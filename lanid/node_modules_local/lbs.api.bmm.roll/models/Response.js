/**
 * Created by LBS006 on 12/16/14.
 */

var lib = require('lib');
module.exports = function (paramMongoose, paramFormSchema){

    var responseSchema = new paramMongoose.Schema({
        s : lib.permissionsSchema({all:""}),
        ct: { //creator
            uID: {type:String},//user login name
            oID: {type:String},//organisation id
            cd: {type: Date, default: Date.now}//creation date
        },
        md: {//modified
            uID: {type:String},//login Name
            oID: {type:String},//organisation id
            lu: {type:Date,required:true}//last updated date
        },
        dp: { //database identifiers properties // we may not need these properties
            ac: {type: paramMongoose.Schema.Types.ObjectId, ref: 'activities'}, //business activity code
            ui: {type: paramMongoose.Schema.Types.ObjectId}, //target respondent user account identify code
            tc: {type: paramMongoose.Schema.Types.ObjectId}, //business transaction code
            Rp: {type: paramMongoose.Schema.Types.ObjectId, ref: 'respondents'} //respondent
        },
        si:{ //search index
            ssi:{ // string searchable index
                si1: String,
                si2: String,
                si3: String
            },
            nsi:{ // number searchable index
                ni1: Number,
                ni2: Number,
                ni3: Number
            },
            dsi:{ // date searchable index
                ni1: Date,
                ni2: Date,
                ni3: Date
            }
        },
        fd: { //form definition
            fields: Object,
            pt:[{  //form photo
                pp:{ //original photo properties , this may be different (in terms of value) from the target photo property
                    tsc: String, //0 target IDPhoto Standard Code 证照代码 // this may be different from IDPhoto Standard Code
                    uc: String,  //1 Usage Code 证照用途（用途代码）
                    it: String,  //2 IDPhoto Category 证照类别
                    swp: String,  //3 Standard width 标准像宽pix
                    shp: String, //4 Standard Height 标准像高pix
                    hlp: String,  //5 Head length 头部长度pix
                    hlpe: String, //6 Head length error 头部长度误差值pix
                    cwp: String, //7 check width 脸颊宽度pix
                    cwpe: String, //8 check width error 脸颊宽度误差值pix
                    hdp: String, //9 Head distance 头顶距pix
                    hdpe: String, //10 head distance 头顶距误差值pix
                    bc: String, // 11 background color 背景颜色
                    bcr: String, //12 background color R 背景颜色R
                    bcg: String, //13 background color G 背景颜色G
                    bcb: String, //14 background color B 背景颜色B
                    bcr: String, //15 background color error RGB误差值
                    rs: String, //16 resolution 分辨率
                    fm: String, //17 format 图片格式
                    ss: String, //18 standard size 标准文件大小
                    osw: String, //19 output nominal size width 输出名义尺寸宽mm
                    osh: String, //20 output nominal size height 输出名义尺寸高mm
                    hlm: String, //21 head length 头部长度mm
                    hlme: String, //22 head length error 头部长度误差值mm
                    cwm: String, //23 check width 脸颊宽度mm
                    cwme: String,// 24 check width error 脸颊宽度误差值mm
                    hdm: String, //25 head distance 头顶距mm
                    hdme: String, //26 head distance error 头顶距误差值mm
                    ifm: String, //27 initial format 初始照片格式
                    ofs: String, //28 original photo size 初始照片文件大小
                    ifr: String, //29 original photo resolution 初始照片清晰度要求
                    rm: String, //30 remarks 备注
                    uri : String, //The url of the uploaded photo: eg: /photos/6ed533a3-ac26-46fd-b1d4-f552de8493fd.html
                    urll:String, //Url of Large version of the image
                    urls:String, //Url of small version of the image
                    urlm:String //Url of medium version of the image
                }, //photo properties
                pc:{
                    pts: String,  // photo source     照片来源
                    ptp: String,  // photo provider 照片提供
                    psi: String,  // photo shooting index 拍摄索引
                    ptp: String,  // photo uploading method 照片上传
                    psr: Boolean, // photo needs inspection 检测要求
                    pcr: Boolean, // photo needs correction  制作要求
                    pwr: Boolean, // photo needs watermark 证照水印
                    pwm: String,  // photo watermark method 水印模式
                    prr: Boolean, // photo needs resizing    证照缩略
                    prm: String,  // photo resizing method   缩略模式
                    ppr: Boolean, // photo replacement requirement 替换限制
                    pvr: Boolean, // Photo verification requirement 认证要求
                    pcr: String,  // photo collection requirement   采集限定
                    pds: String,  // photo data source access control        授权数据源
                    pvm: String,  // photo verification method     认证方式
                    psn: Number   // photo similarity number   对比阀值
                } // photo control properties
            }],
            ac:{type:paramMongoose.Schema.Types.ObjectId, ref: 'activities'}, // activity
            fmn: String, //form name, default is business activity name
            uuid:String, //uuid of the html save to the storage bucket
            uri: String, //uniform resource indicator ,similar to url
            fcd: Date    // form creation date
        },
        sb:[ //service booking
            {
             btc: String, //Business transaction code
             plid: {type: String},  //price list id
             svid: String,        // service id
             svn: String,        // service name
             serviceCode: String, ////// Service code
             svp: Number,        // service price
             sdp:Number,        //service discount price
             spc:String,         //Creator organisation id of service point
             cvs:{type:Number,default:10},        ////// consumption status //current status of ther service: 10-PENDING, 20-ISSUED, 30-PAID, 40-PERFORMED, 50-PROCESSED,51-REJECTED
             usn: String,       ////// real name of user who bougth the service and is comming to consume the service
             cvt: {type: Date},  //consumption time
             spn: String,        //service point name
             spid: String,        // service point id
             spc: String,        //service point corporation ID
             pcf: Number,        //platform  commission fee
             cpf: Number,        // company publishing activity commission fee
             sq: Number,          // service sequence number
             spm: Number        //service payment method
            }
        ],
        sp: { // service payment
            pa: Number, // payment amount
            pt: {type: Date},   // payment time
            ps: String, // payment status
            //@todo: add invoice prefs here
            it: String, // invoice type // personal or corporate  
            ih: String, // invoice header, to whom the invoice is addressed (for example: Ben for personal and IBM for company)
            ic: String, //invoice collection method, will pick it up by himself or will need  it to be sent to the address below. 
            cp: String, // contact person .. name of the person receiving the invoice
            ia: String,  // invoice address.. invoice delivery addess
            pm: String  // "1" = internal payment, "2" = alipay
        },
        ow:{//owner of the document, this person can fill out the form is does not have to be the same person as the one who created the response
          uid:String,//this is the user login or the session id when this is an anonymous user
          oid:String,//the current organisation is optional
          sc:String,//identify the user to access form data, could be mobile, email or when imported a value provided by the person who imported it
          ac:String,//access code, use this in combination with sc to see or edit the form
          lzsid:String//national id of the owner
        },
        ds: {type:Boolean,default:false},//delete status
        lk: {type:Boolean,default:false},//'locked' status - true means responder may not update fields/services/etc
        rc: {type:String,required:true},//response code, like LZR1001
        rfc: {type:String},//Response Reference Code. User can provide this code and be shown this response.
        acn: String,
        can: String, //corresponding activity name
        cat: String, //corresponding activity type
        pcn: String, //publishing company name
        rs: {type:Number, required:true},
        tid : String //transaction id
    });
    return responseSchema;
};

