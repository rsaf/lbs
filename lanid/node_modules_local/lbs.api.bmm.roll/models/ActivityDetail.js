/**
 * Created by LBS006 on 12/16/14.
 */

var lib = require('lib');

module.exports = function (paramMongoose){

    var activityDetailSchema = new paramMongoose.Schema({
        s : lib.permissionsSchema({all:"r"}),
        ct: { //creator
            uID: {type:String},//id of the user who created the service
            oID: {type:String},//organisation id
            cd: {type: Date, default: Date.now}//creation date
        },
        md: {//modified
            uID: {type:String},//id of user who changed the service
            oID: {type:String},//organisation id
            lu: {type:Date}//last updated date
        },

        acid:{type:paramMongoose.Schema.Types.ObjectId, ref: 'activities'},// activity code
        ac: String,// activity code
        can: String, //corresponding activity name
        ccn: String, //corresponding company name
       //adc:{value: {type:String, default: '新事务'}, verified: Boolean, verifiedDate: Date},  //activity details code
        adl: {value: {type:String, default: '../commons/images/BusinessManagementDetailLogo.jpg'}, verified: Boolean, verifiedDate: Date},//activity detail logo
        //@todo confirm comments below with leo, and make sure this is the right way to do it
       // this info can be obtained form acid above adn: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity detail name
       // this info can be obtained form acid above arc: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity reference code 事务编号
        aar: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity average rating 评价
        apc: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity publishing corporation 发布单位//todo now being populated instead
        asp: {value: {type:String,default:''}, verified: Boolean, verifiedDate: Date},//activity service price 服务费
        //asd: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity start date 有效日期
        //aed: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity end date 有效日期
        //apm: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity payment methods 支付方式
        arc: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},//activity response condition 响应条件

        contacts:{
            name:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            phone:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            qq:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            wx:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            email:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            inmail:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
        },

        description:{
            text: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            attachment:[{nm: String, fm: String, url: String,fs:Number, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}]
        },

        images: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId} }],
        videos: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId} }],
        audios: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}],
        faq:[{q:String, a:String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}]
    });


    //public Methods ===============================
    activityDetailSchema.statics.readByActivityID = function(paramUserAccountID, credential, paramCallback){
        return this.findOne(lib.authTransform({ac: paramUserAccountID},'r',credential), paramCallback); //static method
    };

    activityDetailSchema.methods.deleteByUserAccountID = function(paramUserAccountID, credential, paramCallback){
        return this.findOne(lib.authTransform({_id:paramUserAccountID},'r',credential),paramCallback);
    };

    activityDetailSchema.statics.updateActivityDetail = function(paramdetailsJson, credential, paramCallback ){

        var query =  {_id:paramdetailsJson._id};

        var update =  paramdetailsJson;
        var options = { new: true };
        return this.findOneAndUpdate(lib.authTransform(query,'w',credential), update, options, paramCallback);
    };

    return activityDetailSchema;
};



