/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var oCMM = require('cmm');
var oBMM= require('../bmm_Interface.js');

function message(m){
    if (m.op === 'dependency')
    {
        m.ns = 'bmm';
        return oCMM.dependency(m);
    }
}
var init_message = {
    'op': 'init',
     ns : '',
    'pl':{fn:message}
};

exports.test_bmm_persistActivity = function(test){
  var m = {
    pl:{
      activity:{}
      ,loginName:'myloginname'
      ,currentOrganization:'000000000000000000008008'
    }
  };
  var activityCode;
  oBMM.bmm_persistActivity(m)
  .then(function resolve(ok){
    test.equal(ok.pl.md.uID,'myloginname','Correct last modified user');
    test.equal(ok.pl.ct.uID,'myloginname','Correct create user');
    test.equal(ok.pl.md.oID,'000000000000000000008008','Correct last modified org');
    test.equal(ok.pl.ct.oID,'000000000000000000008008','Correct create org');
    test.strictEqual(!!ok.pl.abd.ac,true,'An activity code has been set.');
    activityCode=ok.pl.abd.ac
    //test an update:
    m.pl.activity={
        _id:ok.pl._id
        ,abd:{
          at:'activity type'
          ,an:'activity name'
        }
      }
    m.pl.loginName='otherloginname';
    m.pl.currentOrganization='000000000000000000008888';
    return oBMM.bmm_persistActivity(m);
  }).then(function resolve(ok){
    test.strictEqual(ok.pl.abd.ac,activityCode,'The activity code has not changed.');
    test.strictEqual(ok.pl.abd.at,'activity type','An activity type has been set.');
    test.strictEqual(ok.pl.abd.an,'activity name','An activity name has been set.');
    test.equal(ok.pl.ct.uID,'myloginname','Correct create user (not changed)');
    test.equal(ok.pl.md.uID,'otherloginname','Correct last modified user (changed)');
    test.equal(ok.pl.md.oID,'000000000000000000008888','Correct last modified org');
    test.equal(ok.pl.ct.oID,'000000000000000000008008','Correct create org');
    test.done();
  },function reject(no){
    console.log('------------failed test persist activity:',no);
    test.strictEqual(1,23,'Failed  test activity promise');
    test.done();
  });
};

exports.test_bmm_persistForm = function(test){
  var m = {
    pl:{
      form:{
        fd:{fmn:'test form'}
      }
      ,html:"<div id=\"t5613048\" data-class=\"radio\" data-name=\"test\" data-verification=\"false\"><input name=\"test\" data-values=\"one\ntwo\" data-name=\"test\" value=\"one\" data-verification=\"false\" data-bind=\"entity.test\" type=\"radio\">one<input name=\"test\" data-values=\"one\ntwo\" data-name=\"test\" value=\"two\" data-verification=\"false\" data-bind=\"entity.test\" type=\"radio\">two</div>"
      ,loginName:'myuser'
      ,currentOrganization:'000000000000000000000808'
    }
  };
  var formCode,uuid;
  oBMM.bmm_persistForm(m)
  .then(function resolve(ok){
    uuid=ok.pl.fd.uuid;
    formCode = m.pl.fc;
    test.strictEqual(!!ok.pl.fd.uuid,true,'uuid is set');
    test.strictEqual(ok.pl.fd.fmn,'test form','name of the form is set');
    test.strictEqual(ok.pl.fd.fields.length,2,'2 fields are set');
    test.strictEqual(ok.pl.md.oID,'000000000000000000000808','last modified org is set');
    test.strictEqual(ok.pl.ct.oID,'000000000000000000000808','created org is set');
    test.strictEqual(ok.pl.md.uID,'myuser','last modified name is set');
    test.strictEqual(ok.pl.ct.uID,'myuser','created name is set');
    m.pl.form._id=ok.pl._id;
    m.pl.form.fd.fmn='new name';
    m.pl.form.fd.uuid=uuid;
    m.pl.loginName='update user';
    m.pl.currentOrganization='000000000000000000080808';
    return oBMM.bmm_persistForm(m);
  })
  .then(function resolve(ok){
    test.strictEqual(ok.pl.fd.fmn,'new name','name of the form is set');
    test.strictEqual(ok.pl.md.oID,'000000000000000000080808','last modified org is set');
    test.strictEqual(ok.pl.ct.oID,'000000000000000000000808','created org is set');
    test.strictEqual(ok.pl.md.uID,'update user','last modified name is set');
    test.strictEqual(ok.pl.ct.uID,'myuser','created name is set');
  
    test.done();
  },function reject(no){
    console.log('failed:',no);
    test.strictEqual(1,2,'Failed persist form promise');
    test.done();
  });

}

exports.setUp = function setUp(callback) {
    oCMM.init(init_message)
    .then(function (r) {
      return oBMM.init(init_message)
    }).then(function (r1) {
      return callback();
    }).fail(function (r) {
      console.log('Failed init:',r);
    });
};

exports.tearDown = function tearDown(callback) {
    callback();
};


