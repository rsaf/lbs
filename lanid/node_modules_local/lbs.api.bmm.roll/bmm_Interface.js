/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 $.post('/home/login.json',{antiBotValue:'MSNP',password:'123456',user_captcha:'MSP',username:'haruadmin'})
.then(function(){
  lbs.modHelper.getMessage(
   "/workspace/activities/form.json"
   , false, {},'POST',{json:
          JSON.stringify({"form":{"fd":{"fmn":"hi"}},"html":"<br>"})
      }
  ).then(function(msg){console.log(msg);});
});

 $.post('/home/login.json',{antiBotValue:'MSNP',password:'123456',user_captcha:'MSP',username:'haruadmin'})
.then(function(){
  lbs.modHelper.getMessage(
   "/workspace/activities/form.json"
   , false, {},'PUT',{json:
          JSON.stringify({"form":{"_id":"54eae6e96bbad6ab08c6a165","fd":{"fmn":"lala"}},"html":"lala"})
      }
  ).then(function(msg){console.log(msg);});
});

manually run bucket upload:
echo "hello" | ssh -i ~root/.ssh/uploadbot uploadbot@localhost "uploadform" "5d4194c3-a659-441b-8f6e-000000000001" "html"


 
 */

var mongoose = null ; //mongoose object
var message = null;   // message function
var storageBucketManager = null; //
var bucketServers = null;

var ActivitySchema = null;
var ActivityModel = null;
var FormMetaSchema = null;
var FormMetaModel = null;
var UsersMetaSchema = null;
var UsersMetaModel = null;
var RespondentSchema = null;
var RespondentModel = null;
var ResponseSchema = null;
var ResponseModel = null;
var Parser = require('parse5').Parser;
var ActivityDetailSchema = null;
var ActivityDetailModel = null;
var CounterSchema = null;
var Counter = null;
/* @type {TransactionHelper} */
var transactionHelper;
var utils;

var q = require('q');
var lib = require('lib');
var xlsx = require('node-xlsx')
var crypto = require('crypto');

function init(m) {
    var r = {pl: null , er:''};
    if(!(m.pl.fn instanceof Function)) {
        r.er = {ec:null , em: 'Payload pl is not a function'};
        return q.fail(r);
    }
    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    });
    var p2 = message({
        op: 'dependency',
        pl: {dn: 'bucketManager'}
    });

    var p3 = message({
        op: 'dependency',
        pl: {dn: 'bucketServers'}
    });

    return q.all([p1,p2, p3]).then(function(r1){
        mongoose = r1[0].pl.fn;
        storageBucketManager = r1[1].pl.fn;
        bucketServers = r1[2].pl.fn;

        console.log('\nbmm: bmm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);

        ActivitySchema = require("./models/Activity.js")(mongoose);
        ActivityModel = mongoose.model('activities', ActivitySchema);
        FormMetaSchema = require("./models/FormMeta.js")(mongoose);
        FormMetaModel = mongoose.model('formmetas', FormMetaSchema);
        RespondentSchema = require("./models/Respondent.js")(mongoose);
        RespondentModel = mongoose.model('respondents', RespondentSchema);
        ResponseSchema = require("./models/Response.js")(mongoose);
        ResponseModel = mongoose.model('responses', ResponseSchema);
        UsersMetaSchema = require("./models/UsersMeta.js")(mongoose);
        UsersMetaModel = mongoose.model('usersmetas', UsersMetaSchema);
        ActivityDetailSchema = require("./models/ActivityDetail.js")(mongoose);
        ActivityDetailModel = mongoose.model('activitydetails', ActivityDetailSchema);
        CounterSchema = require("./models/Counter")(mongoose);
        Counter = mongoose.model('counters', CounterSchema);
        transactionHelper = require('lib').transactionHelper.init({pl:{mongoose:mongoose}});
        utils = require('lib');

        //Take all the default data from the .json and populate the smm database
        var jsoninit = require("./data/mongo_init.json");
        return lib.prepopulateMongoDatabase(jsoninit, transactionHelper);
    })
        .then(function success() {
            return q.resolve({pl: {pm: 'bmm initialization done!'}, er: null});
        }  ,  function failure(r) {
            return q.resolve({pl: {pm: 'bmm initialization had some issue: ',er: r.er}});
        });

}

function _htmlUnescape(str){
  str = str
      .replace(/\&amp\;/, '&')
      .replace(/\&nbsp\;/, ' ')
      .replace(/\&quot\;/, '"')
      .replace(/\&lt\;/, '<')
      .replace(/\&gt\;/, '>');
  return str;
}

function _parseHtml(html) {
  var parse5 = require('parse5');
  var elem = {fields:[],pt:[]};
  var parser = new Parser();
  var getAttr = function getAttr(attr, name) {
    var i = attr.length;
    while ((i-=1) > -1) {
      if (attr[i].name === name) {
        return attr[i].value;
      }
    }
  };
  parser.parseFragment(html);

  parser = new parse5.SimpleApiParser({
    text: function (text) {
    },
    startTag: function (tagName, attrs, selfClosing) {
      if (!(tagName && attrs && attrs.length && getAttr(attrs, 'data-bind'))){
        return;
      }
      var fd = getAttr(attrs, 'data-photo-standard');
      var verify = getAttr(attrs, 'data-verification');
      var value = getAttr(attrs, 'value');
      var defaultVal = getAttr(attrs, 'data-default');
      var defaultval = getAttr(attrs, 'data-default');
      if (fd) {
        elem.pt.push({pp:JSON.parse(_htmlUnescape(fd))});
      }else{
        fd = {
          "nm": getAttr(attrs, 'name') || getAttr(attrs, 'data-name')
          , "vl": value || undefined
          , "dv": defaultVal || undefined
          , "nv": (verify && verify === 'true') ? true : false
          , "dvl": (defaultval || defaultval === '') ? defaultval : undefined
        };
        elem.fields.push(fd);
      }
    }
  });
  parser.parse(html);
  return elem;
}
function _persistFormMeta(form,loginName,currentOrganization,transactionid,override){
    var dbForm;
    var credential = new lib.Credential(loginName,currentOrganization);
  return q()
  .then(function(){
    return transactionHelper.getCreate('formmetas',form,transactionid, override?{fc: form.fc}:undefined, override,credential);
  })
  .then(function(data){
    var code = false;
    dbForm=data;
    if(override && !data.isNew)
    {
        return q.reject("INITIALIZATION MODE KICKOUT");
    }
    if(!dbForm.fc){
      code = transactionHelper.getNextSequence('formCode');
    }
    return q.all(code);
  }).then(function(code){
    if(code){
      form.fc='LZF'+code.seq;
    }
    transactionHelper.setFields(dbForm,form,'formmetas',loginName,currentOrganization);
    return transactionHelper.saveToPromise(dbForm);
  })
  .then(function(data){
    return q.resolve({er:null,pl:data});
  })
  .then(null, function reject(er){
    if(er == "INITIALIZATION MODE KICKOUT")
        return q.reject(er);
    return q.reject({pl:null,er:{ec:1001,em:'In bmm _persistFormMeta:'+er+' '}});
  });

}
/**
 * Resolves the promise with a Business Activity
 * if m.pl.code starts with lzb it will get the activity
 * for that response
 * if m.pl.code does not start with lzb it will try to
 * get the activity with that code
 * if m.pl._id is set it will try to get the activity with
 * that _id
 * @param {Object} m
 * @returns {Promise}
 */
function bmm_getActivity(m){
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return q().then(function(){
    if(m.pl.code&&m.pl.code.toLowerCase().indexOf('lzr')===0){
      return ResponseModel.findOne(lib.authTransform({rc:m.pl.code.toUpperCase()},'r',credential)).exec();
    }
    return false;
  })
  .then(function(response){
    if(response){
      m.pl.code=false;
      m.pl._id=response.dp.ac;
    }
    var d = q.defer();
    var query = {};
    if(m.pl.code){
      query["abd.ac"]=m.pl.code.toUpperCase();
    }
    if(m.pl._id){
      query._id=m.pl._id;
    }
    ActivityModel.findOne(query)
            .populate('fm')
            .exec(function(er,data){
      if(er){
        d.reject(er);return;
      }
      d.resolve(data);
    });
    return d.promise;
  });
}
function bmm_persistForm(m) {
    var r = {"pl": null, "er": null};
    return q().then(function(){
      return storageBucketManager('uploadform', (m.pl.form.fd.uuid||null),'html', m.pl.html, null);
    })
    .then(function (r) {
      var form = m.pl.form;
      var htmlParsed=_parseHtml(m.pl.html);
      form.fd.uuid = r.pl.uuid;
      form.fd.uri = '/forms/' + r.pl.uuid + '.html';
      form.fd.fields = htmlParsed.fields;
      form.fd.pt = htmlParsed.pt;
      return _persistFormMeta(form,m.pl.loginName,m.pl.currentOrganization, undefined, m.pl.override);
    }  ,  function(err){
            console.log("Error persisting form?",err);
        });
}

function bmm_uploadPhoto(m) {
    var r = {"pl": null, "er": null};
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    return storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null)
    .then(function (r) {
      r.pl.pfm = m.pl.ifm;
      return q.resolve(r);
    })
    .then(null,function reject(r) {
      r.err = "In bmm_uploadPhoto:"+r+" ";
      return q.reject(r);
    });
}


/*
 var m = {
 "ns":"bmm",
 "op": " bmm_get_list_template",
 "pl": {"formID": "value1"}
 };
 r = {pl: {url:"/files/7ab7a057-b10f-47d1-9967-f5b11b625b9b.xlsx" }, er: null};

 */

function bmm_getFormMeta(m){
    var code = m.pl.fc,
        login = m.pl.loginName,
        org = m.pl.currentOrganization;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    return q().then(function(){
        return FormMetaModel.findOne(lib.authTransform({ds:{"$ne":true},fc:code,"$or" : [{"ct.uID":login},{"ct.oID":org}]},'r',credential)).exec()
    }).then(function(response){
        return response;
    })
}
function bmm_get_list_template(m) {
    var r = {"pl": null, "er": null};
    console.log("bmm_get_list_template",m);
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)

    /*
        if activity has url, just return it
        Query for json
        JSON->XLSX
        store in bucket
        stash url with activity
        return url
     */

    return q().then(function(){
      console.log("doing find");
        return FormMetaModel.find(lib.authTransform({ds:{"$ne":true},fc: m.pl.formID,"$or" : [{"ct.uID":m.pl.loginName},{"ct.oID":m.pl.currentOrganization}]},'r',credential))
            .exec();
    }).then(function(response){
        //Get form field names
        console.log("doing xlsx creation")
        if(!response || response.length <= 0) {console.log('Specified Form',m.pl.formID,'not found');q.reject({pl:null,er:{ec:1001,em:'In bmm_get_list_template: Specified Form not found ('+m.pl.formID+') '}}); return;}

        var template = response[0];
        //Confirm we have a nice sane set of form fields to pull
        if(template.fd && template.fd.fields &&  Object.prototype.toString.call( template.fd.fields ) === '[object Array]' )
        {
            console.log("Form file url = ",template.fd.template);
            var fieldArray = template.fd.fields;
            var uniq = [];
            var fields = fieldArray.map(function(f){
                if(uniq.indexOf(f.nm) < 0)
                {
                  uniq.push(f.nm)
                  return f.nm;
                }
            }).filter(function(n){ return n != undefined }); 

            //Check to see if we need to add a 'photo_path' column if a photo submission is asked int he form
            if(template.fd.pt && 
              template.fd.pt.length > 0)
            {
              //@todo localize
              console.log(template.fd.pt)
              fields.push("photopath")
            }
            else{
              console.log("no photo found:",template.fd.pt)
            }
            console.log(fields)
            //Create the xls template
            var data = [
                fields
            ];
            var buffer = xlsx.build([{name: "template_"+ m.pl.formID, data: data}]);
            var url = undefined;

            console.log("doing xlsx upload")
            //TODO
            return storageBucketManager('uploadfile', null, m.pl.fileType, buffer, null).then(function(r){
              return r
            }).then(null,function(err){
              q.reject('bucket storage failed due to error "'+err+'"')
            })
        } else {
            q.reject("form fields aren't properly set up")
        }

    }).then(function(r){
        console.log('after bucket, r = ',r)
        //Assemble
        var url  = '/files/' + r.pl.uuid  +  '.' + m.pl.fileType;
        console.log("Template File available at",url)

        // update form meta data
        /*
         FormMetaModel.update(
         {ds:{"$ne":true},fc: m.pl.formID,"$or" : [{"ct.uID":m.pl.loginName},{"ct.oID":m.pl.currentOrganization}]}
         ,{"$set":{"fd.template":url}})
         .exec();
         */
         console.log('tryiing to resolve with',url)
        return url;
    }).then(null,function reject(err){
            console.log("failing here 2");
            return q.reject({pl:null,er:{ec:1001,em:'In bmm_get_list_template: '+err+' '}});
        }
    );

    // r = {pl: {url:"/files/7ab7a057-b10f-47d1-9967-f5b11b625b9b.xlsx" }, er: null};



    //return q(r)
}

function bmm_persistResponse(m){
  var dbResponse
  ,jsonResponse
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization, m.pl.code);
  return q()
  .then(function(){
    jsonResponse=m.pl.response;
    var query, okcreate = undefined;
    if(m.pl.activityCode && !jsonResponse._id){
        console.log("Persist has activity code", m.pl.activityCode, m.pl.loginName);
        query = {acn: m.pl.activityCode, "ct.uID": m.pl.loginName, ds:{"$ne":true}};
        okcreate = true;
    }
    return transactionHelper.getCreate('responses',jsonResponse,m.pl.transactionid,query,okcreate,credential);
  })
  .then(function(res){
          console.log("Response from getCreat in persistResponse is\n",res);
    dbResponse=res;
    if(!dbResponse.rc){
      return transactionHelper.getNextSequence('responseCode');
    }
    return false;
  })
  .then(function(code){
    if(code){
      jsonResponse.rc='LZR'+code.seq;
    }
    if(!(dbResponse.ow&&dbResponse.ow.uid)){
      jsonResponse.ow={};
      jsonResponse.ow.uid=m.pl.loginName;
      if(m.pl.currentOrganization){
        jsonResponse.ow.oid=m.pl.currentOrganization;
      }
    }
    //@todo: also need to set dp.ui but currently not sure what to set it to (import lists)
    if(jsonResponse.sp && jsonResponse.sp.ps === 'paid'){
      jsonResponse.sp.pt = new Date();
    }
    if(!(dbResponse.sp && dbResponse.sp.ps)){
      jsonResponse.sp = jsonResponse.sp || {};
      jsonResponse.sp.ps = 'pending';
    }
    if(!(dbResponse.dp&&dbResponse.dp.ac)){
      return bmm_getActivity({pl:{code:m.pl.activityCode}});
    }
    return false;
  })
  .then(function(activity){
    if(activity){
      jsonResponse.rs=10;
      jsonResponse.dp=jsonResponse.dp||{};
      jsonResponse.dp.ac=activity._id;
      jsonResponse.fd=jsonResponse.fd||{};
      jsonResponse.fd.ac=activity._id;
      jsonResponse.acn =activity.abd.ac;
      jsonResponse.can =activity.abd.an;
      jsonResponse.cat =activity.abd.at;
      jsonResponse.pcn =activity.abd.pcn;
      jsonResponse.s = {
          grp:{uid: activity.ct.oID},
          lzm:{val: m.pl.code}
      };
    }
    var callbacks = {
      "sb":function(dbEntity,uiEntity,key){
        var serviceBookings = dbEntity.sb || [],
                serviceBooking = uiEntity[key],
                index = utils.find(serviceBookings,'svn',serviceBooking.svn);
        if(index===-1){
          serviceBookings.push(serviceBooking);
        }else{
          serviceBookings.set(index,serviceBooking);
        }
          serviceBookings = serviceBookings.sort(function(a,b){
              if(a && b && a.sq !== undefined && b.sq !== undefined)
              {
                  return a.sq - b.sq
              }
              return 0;
          });
          dbEntity.sb.set(serviceBookings);
        return false;
      }
      ,"fd.fields":function(dbEntity,uiEntity,key){
        var keys = Object.keys(uiEntity.fd.fields),i=keys.length;
        dbEntity.fd=dbEntity.fd||{};
        dbEntity.fd.fields=dbEntity.fd.fields||{};
        while((i-=1)>-1){
          dbEntity.fd.fields[keys[i]]=uiEntity.fd.fields[keys[i]];
        }
        return false;
      }
      ,"fd.pt":function(dbEntity,uiEntity,key){
        var pt = lib.getMember(uiEntity,key.split('.')),
          i,
          _id,
          keys;
        if(pt){
          keys = Object.keys(pt);
          i=keys.length;
          while((i-=1)>-1){
            //not sure if the following is needed on a new document
            dbEntity.fd = dbEntity.fd || {};
            dbEntity.fd.pt = dbEntity.fd.pt || new mongoose.Types.Array();
            if(dbEntity.fd.pt[keys[i]]){
              _id=dbEntity.fd.pt[keys[i]]._id;
            }else{
              _id = new mongoose.Types.ObjectId();
            }
            dbEntity.fd.pt.set(keys[i],{"_id":_id,"pp":{
                "uri":uiEntity.fd.pt[keys[i]].pp.uri,
                "urll":uiEntity.fd.pt[keys[i]].pp.urll,
                "urlm":uiEntity.fd.pt[keys[i]].pp.urlm,
                "urls":uiEntity.fd.pt[keys[i]].pp.urls
            }});
          }
        }
        return false;
      }
    };

    transactionHelper.setFields(dbResponse,jsonResponse,'responses',m.pl.loginName,m.pl.currentOrganization,callbacks);
    return transactionHelper.saveToPromise(dbResponse);
  })
  .then(function (){
    if(m.pl.transactionid){
      return transactionHelper.commit({transactionid:m.pl.transactionid});
    }
    return false;
  })
  .then(function resolve(){
    return q.resolve({pl:dbResponse});
  })
  .then(null,function reject(err){
    return q.reject({ec:1001,em:'Error in bmm_persistResponse: '+err});
  });
}


function bmm_deleteResponse(m){

    var r = {'pl':null, 'er':{em:null, ec:null}}
    var deferred = q.defer();
    var query = {_id: m.pl._id};
    var options = {new: false};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    ResponseModel.findOneAndUpdate(lib.authTransform(query,'w',credential), m.pl, options, function (err, nm) {
            if (nm) {
                r.pl = nm;
                deferred.resolve(r);
            }
            else {
                r.er.em = err;
                deferred.reject(r);
            }
        });
        return deferred.promise;

}

function bmm_getAllResponsesForActivity(m){
    var code = m.pl.code;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q().then(function(){
        return ResponseModel.find(lib.authTransform({ds:{"$ne":true},acn:code},'r',credential)).exec()
    });
}
/**
 * Resolves the promise with a activity response having a fully populated activity
 * if m.pl.code is set it gets the response by code
 * if m.pl._id is set it gets the response by id.
 * @param {Object} m 
 * @returns {Promise}
 */
function bmm_getResponses(m){
    m.mt = m.mt || {};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q.all([
        function(){
            var orQueries = [m.pl.currentOrganization == "200000000000000000000000"?{}:{"ow.uid":m.pl.loginName}];
            if(m.pl.currentOrganization != '000000000000000000000001' && m.pl.currentOrganization != "200000000000000000000000"){
                orQueries.push({"ow.oid":m.pl.currentOrganization});
                orQueries.push({"s.grp.uid": m.pl.currentOrganization});
            }
            var filterQuery = [];
            //Designate Search Key
            if(m.mt.sk) filterQuery.push({$or:[{rc:m.mt.sk},{can: m.mt.sk},{acn: m.mt.sk},{pcn: m.mt.sk}]});

            //Define start date
            if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

            //Define end date
            if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

            console.log('------ orqueries',orQueries);
            var query = {ds:{"$ne":true},"$or" : orQueries}
            if(filterQuery.length) query['$and'] = filterQuery;
            console.log(query);
            return ResponseModel.find(lib.authTransform(query,'r',credential))
                .populate('dp.ac dp.respondents fd.ac')
                .skip(m.mt.p * m.mt.ps).limit(m.mt.ps)
                .exec();
        }(),
        function(){
            var orQueries = [m.pl.currentOrganization == "200000000000000000000000"?{}:{"ow.uid":m.pl.loginName}];
            if(m.pl.currentOrganization!='000000000000000000000001'){
                orQueries.push({"ow.oid":m.pl.currentOrganization});
            }
            console.log('------ orqueries',orQueries);
            return ResponseModel.find(lib.authTransform({ds:{"$ne":true},"$or" : orQueries},'r',credential))
                .populate('dp.ac dp.respondents fd.ac')
                .count()
                .exec();
        }()
    ])
        .then(function (data) {
            m.mt.tc = data[1];
            return q.resolve({er: null, pl: data[0], mt: m.mt});
        })
        .then(null, function reject(err) {
            return q.reject({pl: null, er: {ec: 1001, em: 'In bmm_getResponses: ' + err + ' '}});
        });
}

function bmm_parse_excel_to_responses(m){

    console.log("PARSING EXCEL TO RESPONSES");
  var xl = m.pl.data;
  var xlid = m.pl.uuid;
  var map = m.pl.map;
  if(!xl){console.log("No xls available. Message was:",m); return;}
  var json = xlsx.parse(xl);
  var headers = json[0].data[0]
  var data = json[0].data.slice(1);
  var ac;
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    return q()
        //FETCH ACTIVITY INFO
        .then(function(){
            return ActivityModel.find(lib.authTransform({ds:{"$ne":true},'abd.ac':m.pl.activityCode},'r',credential)).exec();
        })
        //FETCH FORM META MODEL FOR THIS ACTIVITY
        .then(function(response){
            ac = response[0];
            if(!ac) return q.reject({pl:null,er:{ec:1001,em:'In bmm_parse_excel_to_responses: no activity found'}});
            return FormMetaModel.find(lib.authTransform({ds:{"$ne":true},'_id':ac.fm},'r',credential)).exec();
        })
        //REMOVE PREEXISTING RESPONSES
        .then(function(response){
            console.log("Credential while removing preexisting:",credential);
            return ResponseModel.update(lib.authTransform({'acn': m.pl.activityCode},'w',credential),{"$set":{ds:true}},{multi:true}).exec()
                .then(function (r){
                    return ActivityModel.update(lib.authTransform({'abd.ac': m.pl.activityCode},'w',credential),{"$set":{'arc.crc':0, 'arc.prc':0, 'arc.ptl':0}}).exec()
                })
                .then(function (n){
                    return response[0]
                }  ,  function failure(e){
                    console.log("FAILED to remove preexisting reponses!",e);
                })
        })
        //PREGENERATE RESPONSES
        .then(function(template){
            //Complain if malformed FormMeta
            if(!(template && template.fd && template.fd.fields &&  Object.prototype.toString.call( template.fd.fields ) === '[object Array]' ))
                throw "Invalid fd object in response";
            if(!template.siv || !template.siv[0] || !template.siv[0].in)
                throw "No unique identifying field set on excel - cannot pregenerate responses";

            //Create a map of excel headers -> values
            var fieldArray = template.fd.fields;
            var ownerStandin = template.siv[0] ? template.siv[0].in : undefined;
            var targets = [];
            var names = new Array();
            fieldArray.forEach(function(f,idx){
                var values = new Array();
                fieldArray.forEach(function(ft){
                    if(ft.nm == f.nm && values.indexOf(ft.vl) < 0)//duplicate found
                    {
                        values.push(ft.vl);
                    }
                });
                if(names.indexOf(f.nm) < 0)
                {
                    names.push(f.nm)
                    targets.push({values : values, name : f.nm});
                }
            })
            //Detect photo path header
            if(!(headers.indexOf('photopath') < 0))
            {
                targets.push({values:[undefined], name : 'photopath'})
            }
            //Create a workset of response creations
            var responseCreationPromises = data.map(function(datum){
                //Parse excel data to response object

                var parsed_datum = {fd:{fields:{}, pt:new Array()}};
                parsed_datum.rfc = lib.generateResponseReferenceCode();
                var owner = undefined;
                for(var i = 0; i < headers.length; i++)
                {
                    var input = datum[i];
                    if(input == "undefined") input = undefined;

                    if(!targets[i] && headers[i] == "LZM")
                    {
                        var name = "LZM";
                    }
                    else
                    {
                        var vals = targets[i].values;
                        var name = targets[i].name;
                    }
                    if(name == ownerStandin) {
                        if(ownerStandin == "LZSID")//Don't use national ID's as ow field
                        {
                            try {
                                owner = crypto.createHash('md5').update(input+"").digest("hex");
                            }catch(e){
                                throw "Not a string or buffer while creating hash of LZSID input";
                            }
                        }
                        else
                            owner = input;
                    }
                    if(name == "photopath" && input)
                    {
                        //extract original file name
                        var f_ext = input.slice(input.lastIndexOf('.'));
                        var orig = input.replace(/\.[^/.]+$/, "");//trim off extension
                        orig = orig.substr(Math.max(orig.lastIndexOf('/'),orig.lastIndexOf('\\'))+1);
                        //photo
                        parsed_datum.fd.pt.push({
                            pp:{
                                uri : "/photos/"+map[orig]+f_ext,
                                urll : "/photos/"+map[orig]+ "_l" + f_ext,
                                urlm : "/photos/"+map[orig]+ "_m" + f_ext,
                                urls : "/photos/"+map[orig]+ "_s" + f_ext
                            }
                        })
                    }
                    else if(name == "LZM" && input)
                    {
                        parsed_datum.rfc = input;
                    }
                    else
                    {
                        //ensure saved as string
                        parsed_datum.fd.fields[name] = ""+input === undefined?"":input;
                    }
                }
                //Create task
                bmm_logResponseOnActivity({
                    code: m.pl.activityCode,
                    loginName: owner,
                    currentOrganization: m.pl.currentOrganization
                })
                return bmm_persistResponse({
                    pl: {
                        response: parsed_datum,
                        transactionid: m.pl.transactionid,
                        code : parsed_datum.rfc,
                        loginName: owner,
                        currentOrganization: m.pl.currentOrganization,
                        activityCode: m.pl.activityCode
                    }
                });

            }).filter(function(p){return p !== undefined});
            //Run workset

            return q.all(responseCreationPromises)
                .then(function(r){
                    console.log('done creating', r.length,'pregenerated responses for activity', m.pl.activityCode);
                    return {pl:r, er:null};
                })
                .fail(function(r){
                    console.log('had error',r);
                    return {pl:null, er:r};
                })
        })
        .then(function updateActivity(responses){
            console.log("Checking ac.abd.ul:",ac.abd.ul);
            if(ac.abd.ul == '名单内用户')//LIST ONLY
            {
                var count = responses.pl.length;
                return ActivityModel.update(lib.authTransform({'abd.ac': m.pl.activityCode},'w',credential),{"$set":{'arc.mr':count, 'arc.crc':count}}).exec()
            }
        })
        .then(null, function failure(err){
            console.log("Had exception while trying to pregenerate responses:",err);
            return {pl:null,er:err}
        })
}

function bmm_download_activity_data(m){
    console.log('\n bmm downlaoding activity data ...\n ');
    var r = {"pl": null, "er": null};
    var options = "";
    var fields = new Array();
    var ac_id = undefined;
    var tgtField = m.pl.tgtField;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    
    function get_excel_headers(activity)
    {
      return q()
          //FETCH ACTIVITY
          .then(function(){
              return ActivityModel.find(lib.authTransform({ds:{"$ne":true}, 'abd.ac':activity},'r',credential)).exec();
          })
          //FETCH FORM META
          .then(function(response){
              var ac = response[0];
              if(!ac) return q.reject({pl:null,er:{ec:1001,em:'In bmm_download_activity_data: no activity found '}})
              ac_id = ac._id
              return FormMetaModel.find(lib.authTransform({ds:{"$ne":true}, '_id':ac.fm},'r',credential)).exec();
          })
          //CREATE HEADERS ARRAY
          .then(function(response){
              var template = response[0];
              //Confirm we have a nice sane set of form fields to pull
              if(!(template && template.fd && template.fd.fields &&  Object.prototype.toString.call( template.fd.fields ) === '[object Array]' ))
                return [];

              var fieldArray = template.fd.fields;
              var uniq = [];
              var headers = fieldArray.map(function(f){
                  if(uniq.indexOf(f.nm) < 0)
                  {
                      uniq.push(f.nm)
                      return f.nm;
                  }
              }).filter(function(n){ return n != undefined });
              if(template.fd.pt &&
                  template.fd.pt.length > 0)
              {
                  //@todo localize
                  headers.push("photopath")
              }
              else{
                  console.log("no photo found:",template.fd.pt)
              }
              if(headers.indexOf("LZM") < 0)
                headers.push("LZM");
              return headers;
          })
          //Handle fail
          .then(null,function reject(err){
              return q.reject({pl:null,er:{ec:1001,em:'In bmm_download_activity_data: '+err+' '}});
          })
    }
    function json_to_excel(paramjson,listfields)
    {
      //Header
      var data = [listfields];
      //Responses
      for(var i = 0; i < paramjson.length; i++)
      {
        var datum = paramjson[i];
        if(!datum) continue;
        var lineitem = new Array();
        for(var k = 0; k < listfields.length; k++)
        {
          var key = listfields[k];
          if(key == "photopath")//photopath present
          {
            if(datum.fd && datum.fd.pt && datum.fd.pt[0] && datum.fd.pt[0].pp && datum.fd.pt[0].pp.uri && datum.fd.pt[0].pp.uri != "/commons/images/IDPhotoSubmitedDemo.png") {
                if(tgtField)//tgtField specified, use that
                {
                    var fieldValue = tgtField=="rc"?datum.rc:datum.fd.fields[tgtField];
                    var altName = fieldValue + datum.fd.pt[0].pp.uri.slice(datum.fd.pt[0].pp.uri.lastIndexOf('.'));
                    lineitem.push(altName);
                }
                else
                    lineitem.push(datum.fd.pt[0].pp.uri);
            }
            else
              lineitem.push(undefined);
          }
          else if(key == "LZM")
            lineitem.push(datum.rfc);
          else
            lineitem.push(datum.fd.fields[key]);
        }
        data.push(lineitem);
      }
      //Build Excel
        console.log("DATA DATA\n",data);
      var nm = "activity_responses" + ((m.pl && m.pl.ac) ? "_"+m.pl.ac : "")
      var buffer = xlsx.build([{name: nm, data: data}]);
      return buffer;
    }

    return q()
        //FETCH EXCEL HEADERS
        .then(function(){
            return get_excel_headers(m.pl.ac);
        })
        //GET RESPONSES
        .then(function(headers){
            //Save aside headers for later
            fields = headers;
            return ResponseModel.find({ds:{"$ne":true},'acn': m.pl.ac}).exec();
        })
        //GENERATE EXCEL & ZIP IT
        .then(function(responses){
            //Construct options
            console.log("Making Excel---",responses.length)
            for (var i in responses){
                if(!(responses[i])) continue;
                var respo = responses[i].toObject();
                var uniq = [];
                if(respo.fd && respo.fd.pt && respo.fd.pt[0] && respo.fd.pt[0].pp){
                    var image = respo.fd.pt[0].pp.uri;
                    try {
                        var uuid = image.slice(image.lastIndexOf('/') + 1);
                        var bucket = bucketServers(uuid);
                        var fieldValue = tgtField=="rc"?respo.rc:respo.fd.fields[tgtField];
                        var altName = fieldValue + image.slice(image.lastIndexOf('.'));
                        var toAppend = uuid + (altName?(";"+altName):"");
                        if(!uniq.indexOf(toAppend)<0) continue;
                        uniq.push(toAppend);
                        options = options + " " + bucket + ":" + toAppend;
                    }catch(e){
                        console.log("Error in making responses from excel:",e,image,uuid);
                    }
                }
            }
            //Make Excel data buffer
            var xl_buffer = json_to_excel(responses,fields);
            //Perform excel+file zip
            console.log("zipping with ", {xlsx:xl_buffer,options:options},"\n there were ",responses.length,"responses found");
            return storageBucketManager('zipper', '', 'zip' , xl_buffer, options);
        })
        //REPLY WITH URL OF ZIP FILE
        .then(function(bucketReply){
            r.pl = {zipfile: "/files/" + bucketReply.pl.uuid + ".zip"};
            return q.resolve(r);
        }).fail(function(failmessage){
            console.log("failing bucket reply is",failmessage);
            return q.fail({pl:null,er:{ec:1001,em:'In bmm_download_activity_data: '+ failmessage+' '}});
        });
}

function bmm_import_responses_data(m){
    console.log('\n---Prepopulating activity response data ...\n ',m);
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q()
        //FETCH USERSMETA FOR ACTIVITY
        .then(function(){
            return UsersMetaModel.find(lib.authTransform({ds:{"$ne":true},"ac":m.activityCode},'r',credential)).exec();
        })
        //UNZIP UPLOADED DATA
        .then(function(usermeta){
            if(!usermeta.length) throw new Error("No user meta document associated with activity code", m.activityCode);
            console.log("unzipping uploaded data",usermeta);
            console.log("and fp.uri being",usermeta[0].fp.uri);
            var um = usermeta[0];
            //Check if the associated file is a zip then get its UUID and pass to the unzipper
            var find_uid = (/files\/([a-zA-Z0-9\-]+).zip/.exec(um.fp.uri));
            var uid = find_uid.length?find_uid[1]:undefined;
            return storageBucketManager('unzipper', uid, 'zip');
        })
        //PARSE UPLOADED EXCEL TO RESPONSES
        .then(function(bucketReply){
            console.log("after unzipper");
            var r = {
                pl : {
                    data : bucketReply.pl.xlsx.data,
                    uuid : bucketReply.pl.xlsx.uuid,
                    map : bucketReply.pl.map,
                    loginName : m.pl.loginName,
                    currentOrganization : m.pl.currentOrganization,
                    activityCode : m.activityCode,
                    transactionid : m.transactionid
                },
                er : null
            };
            return bmm_parse_excel_to_responses(r);

        })
        //RESOLVE
        .then(function(r){
            return q.resolve(r);
        }).fail(function(failmessage){
            return q.fail({pl:null,er:{ec:1001,em:'bmm_import_responses_data: '+ failmessage+' '}});
        });
}

function bmm_associate_response_with_user(m){
    console.log('\nbmm: associating response with user\n');
    //todo security?
    var targetCode = m.pl.rc;
    var userToAssoc = m.pl.user;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    console.log("Changing ownership of", targetCode,"to",userToAssoc);

    var deferred = q.defer();
    ResponseModel.update(
        {rc:targetCode},
        {$set:{"s.own.uid":userToAssoc.loginName, "ct.uID":userToAssoc.loginName,"ow.uid":userToAssoc.loginName,"md.uID":userToAssoc.loginName}},
        function(err,res){
            if(!err){
                m.num = res;
                console.log("Ending ownership change with:",err,res);
                deferred.resolve(m);
            }
            else {
                m.er = err;
                deferred.reject(m);
            }
        }
    )
    return deferred.promise;
}

function bmm_upload_respondents_list(m) {
    console.log('\nbmm: uploading respondents list\n ');

    var r = {"pl": null, "er": null};
    var deferred = q.defer();


    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadfile', null, m.pl.fp.fm, m.pl.fd, null).then(function (r){


        m.pl.fp.uri = '/files/' + r.pl.uuid + '.' + m.pl.fp.fm;
        delete m.pl.fd;
        //todo : do creation security here
        var toCreate = lib.createTransformjson(m);
        toCreate.pl.ac = m.ac;
        console.log("TO CREATE OF UM has pl :", m.pl)
        toCreate.pl.s = {
            own : {
                uid : m.pl.loginName
            },
            grp : {
                uid : m.pl.currentOrganization
            }
        }
        UsersMetaModel.remove({ac: m.ac},function(paramError, paramDocumentJSON){
            if(!paramError){
                console.log("CREATING USER META WITH PL:",toCreate.pl);
                UsersMetaModel.create(toCreate.pl, function(paramError, paramDocumentJson){
                    if (!paramError) {
                        r.pl = paramDocumentJson;
                        deferred.resolve(r);
                    }
                    else {
                        r.er = {ec:'', em: paramError};
                        deferred.reject(r);
                    }
                });
            }
            else {
                r.er = {ec:'',em: paramError};
                deferred.reject(r);
            }
        })

    }).fail( function (r){
        deferred.reject(r);
    });

    return deferred.promise;
}


function bmm_getAllForms(m){
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q().then(function(){
        return FormMetaModel.find(lib.authTransform({ds:{"$ne":true},"$or" : [{"ct.uID":m.pl.loginName},{"ct.oID":m.pl.currentOrganization}]},'r',credential))
            .exec();
    }).then(function(response){

            return q.resolve(response);
        }).then(null,function reject(err){
            return q.reject({pl:null,er:{ec:1001,em:'In bmm_getAllForms: '+err+' '}});
        }
    );
}


function bmm_getResponse(m){
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization, m.pl.code);
  return q().then(function(){
      var e = new Error('dummy');
    if(m.pl.code&&m.pl.code.toLowerCase().indexOf('lzr')===0){
      return ResponseModel.findOne({rc:m.pl.code.toUpperCase()})
              .populate('dp.respondents')
              .exec();
    }
    else if(m.pl.code){
            return ResponseModel.findOne(lib.authTransform({rfc:m.pl.code},'r',credential))
                .populate('dp.respondents')
                .exec();

    }
    else if(m.pl._id){
        return ResponseModel.findOne(lib.authTransform({_id:m.pl._id},'r',credential))
            .populate('dp.respondents')
            .exec();
    }
  })
  .then(function(response){
    if(response){
      return q.resolve(response);
    }
    else if(m.pl.code){
        return q.reject('empty'); //todo: call reject directly and skip the find activity part, as the activity code was expected to be extracted from the found response
    }

    var query = {};
    if( m.pl._id){
      query._id=m.pl._id;
    }else{
      return q.reject('Response not found using code:'+m.pl.code+' or _id:'+m.pl_id);
    }
    return ResponseModel.findOne(lib.authTransform(query,'r',credential))
            .populate('dp.respondents')
            .exec();
  })
  .then(function(response){
    return q.all([//populate response does not pupulate the activity but form information in activity is needed
      //manually populate the activity
      bmm_getActivity({pl:{_id:response.dp.ac}})
      ,response
    ]);
  })
  .then(function(msg){
    var ret=msg[1].toObject();
    ret.dp.ac=ret.fd.ac=msg[0].toObject();
    return q.resolve(ret);
  })
  .then(null,function reject(err){

            if(err === 'empty'){  //todo: added this resolve here so that we don't have an error when the response is not found by code
                return q.resolve(null);//todo: resolve null so that the handler will respond with pl = null

            }
          else{
                return q.reject({pl:null,er:{ec:1001,em:'In bmm_getResponse: '+err+' '}});
            }
    }
  );
}

function bmm_getUserMeta(m){
    var ac_code = m.pl.ac_code;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q()
        .then(function(){
            console.log("{ac:"+ac_code+"}")
            return UsersMetaModel.findOne(lib.authTransform({ac:ac_code},'r',credential)).exec()
        })
        .then(function(response){
            var usermeta = undefined;
            if(response)
                usermeta = response.toObject();
            console.log("Retrieving usermeta object:",usermeta);
            return usermeta;
        }, function(response){
            return null;
        })
}
function _persistActivity(activity,loginName,currentOrganization,m){
  var dbActivity,
      credential = new lib.Credential(loginName,currentOrganization,undefined);
  return q()
    .then(function(){
    return transactionHelper.getCreate('activities',{_id:activity._id},m.pl.transactionid, m.pl.override?{"abd.ac":activity.abd.ac}:undefined, m.pl.override, credential);
  })
  .then(function(data){
    var code = false;
    dbActivity=data;
    if(m.pl.override && !dbActivity.isNew)
    {
        return q.reject("INITIALIZATION MODE KICKOUT");
    }
    if(dbActivity.isNew){
      activity.abd = activity.abd || {};
      //activity.abd.aps=20;
    }
    if(!(dbActivity.abd && dbActivity.abd.ac)){
      code = transactionHelper.getNextSequence('businessActivityCode');
    }
    return q.all(code);
  })
  .then(function (code){
    if(code){
      activity.abd=activity.abd||{};
      activity.abd.ac='LZB'+code.seq;
    }
    transactionHelper.setFields(dbActivity,activity,'activities',m.pl.loginName,m.pl.currentOrganization);
    return transactionHelper.saveToPromise(dbActivity);
  })
  .then(function (){
    if(m.pl.transactionid){
      return transactionHelper.commit({transactionid:m.pl.transactionid});
    }
    return false;
  })
  .then(function (){
    return q.resolve(dbActivity);
  })
  .then(null,function reject(err){
    if(err == "INITIALIZATION MODE KICKOUT")
        return q.reject(err);
    return q.reject({pl:null,er:{ec:1001,em:"In _persistActivity:"+err+' '}});
  });
}
function bmm_persistActivity(m){
    var r = {"pl": null, "er": null};
    return q()
    .then(function resolve(){
      var activity = m.pl.activity;
      return _persistActivity(activity,m.pl.loginName,m.pl.currentOrganization,m);
    });
}
/**
 * Returns activities where creator or last modified is current user/organisation
 *   if no user or activity is provided then it gets all activities
 * @param {type} m
 * @returns {Array(Document)}
 */

function bmm_getActivities(m){
    m.mt = m.mt || {};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  var orArray=[],
      filterQuery=[],
      pushOr=function(arr,val){
        arr.push(val);return true;
      },
      query={"ds":{"$ne":true}},
      dummy=false,
      isAdmin = m.pl.currentOrganization == "200000000000000000000000",
      mongooseQuery;
    if(m.pl.readyOnly)
        query["abd.aps"] = 30;
    if(m.pl.publicOnly) {
        query["abd.ul"] = {"$ne": '名单内用户'}; //don't show list-only activities
        query["abd.vc"] = {"$ne": 'HIDDEN'}; //don't show hidden activities
    }

  //@todo: only published and open activities (change default query when orArry is empty)
  return q.all([
          function(){
              dummy = (!isAdmin && m.pl.loginName)
                  ?pushOr(orArray,{"ct.uID":m.pl.loginName})&&pushOr(orArray,{"md.uID":m.pl.loginName}):false;
              dummy = (!isAdmin && m.pl.currentOrganization)
                  ?pushOr(orArray,{"ct.oID":m.pl.currentOrganization})&&pushOr(orArray,{"md.oID":m.pl.currentOrganization}):false;
              if(orArray.length){
                  query['$or']=orArray;
              }
              var filterQuery = []
              //Designate Search Key
              if(m.mt.sk) filterQuery.push({$or:[{'abd.ac':m.mt.sk},{'abd.an': m.mt.sk},{'abd.pcn': m.mt.sk}]});

              //Define start date
              if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

              //Define end date
              if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

              if(filterQuery.length) query['$and'] = filterQuery;
              mongooseQuery = ActivityModel.find(lib.authTransform(query,'r',credential))
              return mongooseQuery.sort({'abd.ac':1}).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec();
          }(),
          function(){
              dummy = (!isAdmin && m.pl.loginName)
                  ?pushOr(orArray,{"ct.uID":m.pl.loginName})&&pushOr(orArray,{"md.uID":m.pl.loginName}):false;
              dummy = (!isAdmin && m.pl.currentOrganization)
                  ?pushOr(orArray,{"ct.oID":m.pl.currentOrganization})&&pushOr(orArray,{"md.oID":m.pl.currentOrganization}):false;
              if(orArray.length){
                  query['$or']=orArray;
              }
              return ActivityModel.find(lib.authTransform(query,'r',credential)).count().exec();
          }()
      ])
  .then(function(data){
    m.mt.tc = data[1];
    return q.resolve({er:null,pl:data[0],mt: m.mt});
  })
  .then(null, function reject(er){
    return q.reject({pl:null,er:{ec:1001,em:'In bmm_getActivities:'+er+' '}});
  });
}



//function createCorporateDetailPage (m){
//    var r ={"pl":null, "er":null};
//    var deferred = q.defer();
//    corporateDetailModel.create(m.pl, function(paramError, paramData){
//        if(!paramError){
//            r.pl = paramData;
//            deferred.resolve(r);
//        }
//        else {
//            r.er = paramError;
//            deferred.reject(r);
//        }
//    });
//    return deferred.promise;
//}


function bmm_readActivityDetailByID (m){
    var r ={"pl":null, "er":null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
   // ActivityDetailModel.readByActivityID(m.pl.ac,function( paramError, paramData ){

    ActivityDetailModel.findOne(lib.authTransform({ac:m.pl.ac},'r',credential)).populate({path:'acid',  select:'abd.ac abd.pcn abd.an abd.asd abd.acd abd.apm'}).exec(function (paramError, paramData) {

                    if(paramData){
                        r.pl = paramData;
                        deferred.resolve(r);
                    }
                    else if (paramError) {
                        r.er = paramError;
                        deferred.reject(r);
                    }
                    else if (!paramData){

                        ActivityModel.findOne({'abd.ac':m.pl.ac},function(paramError, activityParam){
                            if(activityParam){


                                 ActivityDetailModel.create({

                                     ac:m.pl.ac,
                                     can: activityParam.abd.an,
                                     ccn: activityParam.abd.pcn,
                                     acid:activityParam,
                                     'ct.uID': m.pl.uID,
                                     'ct.oID': m.pl.oID,
                                     's.own.uid' : m.pl.uID,
                                     's.grp.uid' : m.pl.oID
                                      })
                                    .then(function (detail) {
                                        detail.populate({path:'acid',  select:'abd.ac abd.pcn abd.an abd.asd abd.acd abd.apm'
                                            }, function (err, param) {

                                            if (param) {

                                                console.log('bmm activity detail crated----', param);
                                                r.pl = param;
                                                deferred.resolve(r);
                                            }
                                            else if (err) {
                                                r.er = err;
                                                deferred.reject(r);
                                            }
                                        });

                                    });



                    }
                    else{
                        console.log("bmm Error from Create activity detail... " + paramError);
                    }
                });
            }

        });
    return deferred.promise;
}


function bmm_readAllActivityDetails (m){

    m.mt = m.mt || {};
    var r ={"pl":null, "er":null};
    var deferred = q.defer();
    var query = {'ds':{'$ne':true}};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    if(m.pl&&m.pl.filter){

        //var cond = '/'+m.pl.filter+'/'; regular expression to work as the like query in sql database
        var cond = m.pl.filter;

        console.log('conditions----',cond);

        query = {$and:[{"ds":{"$ne":true}},{$or:[{ac:cond},{can:cond},{ccn:cond}]}]};
    }




    return q.all([
        function(){
            return   ActivityDetailModel.find(lib.authTransform(query,'r',credential)).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).populate({
                path:'acid',  select:'abd.ac abd.an abd.asd abd.acd abd.apm'}).exec()
        }()
        ,function(){
            return ActivityDetailModel.find(lib.authTransform(query,'r',credential)).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,function fail(err){

        r.er = err;
        console.log('bmm  error in bmm_readAllActivityDetails: ',r.er);
        return r;
    })



    //
    //ActivityDetailModel.find(query).limit(m.pl.pageSize).populate({path:'acid',  select:'abd.ac abd.an abd.asd abd.acd abd.apm'}).exec(function (paramError, paramData) {
    //
    //    if(paramData){
    //        r.pl = paramData;
    //        deferred.resolve(r);
    //    }
    //    else if (paramError) {
    //        r.er = paramError;
    //        deferred.reject(r);
    //    }
    //});
    return deferred.promise;
}

function bmm_updateActivityDetail(m){
    var r ={"pl":null, "er":null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    ActivityDetailModel.updateActivityDetail(m.pl,credential,function(paramError, paramData){
        if(!paramError){
            r.pl = paramData;
            deferred.resolve(r);
        }
        else {
            r.er = paramError;

            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function bmm_uploadActivityDetailLogo(m) {
    console.log('\nbmm: in uploading activity detail logo\n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

        m.pl.jsonData.adl.value = '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;

        delete m.pl.PhotoData;

        ActivityDetailModel.updateActivityDetail( m.pl.jsonData,credential, function(paramError, paramDetail){

            if (!paramError) {
                r.pl = paramDetail;

                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });


    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

function bmm_updateActivityDetailImages(m) {
    console.log('\nbmm: in uploading activity detail images\n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)



    if(m.pl.op==='create'){

        storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

            var url =  '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;


            delete m.pl.PhotoData;

            ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {images: {url:url}}},{safe: true, upsert: true}, function(err, profile){
                if(!err){
                    r.pl = profile.images.pop();
                    deferred.resolve(r);
                }
                else {
                    r.er = err;
                    deferred.reject(r);
                }
            });

        }).fail(function (r) {
            deferred.reject(r);
        });

    }

    else if (m.pl.op==='delete'){
        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {images: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, activityDetail){
            if(!err){
                //returns the whole activityDetail
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }






    return deferred.promise;
}
function bmm_updateActivityDetailVideos(m) {
    console.log('\nbmm: in updating Activity detail videos\n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)


    if(m.pl.op==='create'){

        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {videos: {url: m.pl.jsonData.url}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                r.pl = returnedDetail.videos.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {videos: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                //returns the whole activityDetail
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}

function bmm_updateActivityDetailAudios(m) {
    console.log('\nbmm: in uploading Activity detail videos\n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)

    if(m.pl.op==='create'){

        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {audios: {url: m.pl.jsonData.url}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                r.pl = returnedDetail.audios.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {audios: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                //returns the whole returnedDetail
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }



    return deferred.promise;
}

function bmm_updateActivityDetailDescription(m) {

    ////
    //description:{
    //    text: {value: {type:String, default: '无'}, verified: Boolean, verifiedDate: Date},
    //    attachment:[{nm: String, fm: String, url: String,fs:Number, uuid: String }]
    //}
    var i;
    console.log('\nbmm: uploading files and updating Activity detail description \n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var fileUploadsPromises = [];
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    if(m.pl.op==='create'){


        for (i in m.pl.jsonData.description.attachment){
            //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
            var p =  storageBucketManager('uploadfile', null, m.pl.jsonData.description.attachment[i].fm, m.pl.jsonData.description.attachment[i].fd, null);
            fileUploadsPromises.push(p);
        }
        q.all(fileUploadsPromises).then(function (rl){
            var j;
            for (j in rl ){
                if(!(rl[j])) {
                  continue;
                }

                //m.pl.jsonData.description.attachment[j].url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.jsonData.description.attachment[j].fm;

                var url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.jsonData.description.attachment[j].fm;
                var fm =m.pl.jsonData.description.attachment[j].fm;
                var fd =m.pl.jsonData.description.attachment[j].fd;
                var nm = m.pl.jsonData.description.attachment[j].nm;

                delete m.pl.jsonData.description.attachment[i].fd;
              /* jshint ignore:start */
                ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {'description.attachment': {url:url,nm:nm,fd:fd,fm:fm}}},{safe: true, upsert: true}, function(err, returnedDetail){
                    if(!err){
                        r.pl = returnedDetail.description.attachment.pop();
                        deferred.resolve(r);
                    }
                    else {
                        r.er = err;
                        deferred.reject(r);
                    }
                });
              /* jshint ignore:end */

            }


        }).fail(function(){
            deferred.reject(r);
        });

    }
    else if(m.pl.op === 'update'){

        ActivityDetailModel.updateActivityDetail(m.pl.jsonData,credential,function(paramError, paramData){
            if(!paramError){
                r.pl = paramData;
                deferred.resolve(r);
            }
            else {
                r.er = paramError;

                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {'description.attachment': {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                //returns the whole returnedDetail
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}

function bmm_updateActivityDetailFAQ(m){
    console.log('\nbmm: updating Activity detail faq\n ');
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    if(m.pl.op==='create'){

        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {faq: {q: m.pl.jsonData.q, a: m.pl.jsonData.a}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                r.pl = returnedDetail.faq.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }

        });
    }
    else if(m.pl.op === 'update'){

        ActivityDetailModel.update(lib.authTransform({'faq.uuid':m.pl.jsonData.uuid},'w',credential), {'$set': {'faq.$.q': m.pl.jsonData.q, 'faq.$.a': m.pl.jsonData.a}}, function(err, returnedDetail){
            if(!err){


                if(returnedDetail===1)
                {
                    r.pl = {status: true};
                }
                else if(returnedDetail===0)
                {
                    r.pl = {status: false};
                }

                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        ActivityDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {faq: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
            if(!err){
                //returns the whole returnedDetail
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}







function bmm_updateResponsePhotoByResponseCode(m) {

    console.log('bmm bmm_updateResponsePhotoByResponseCode  -----');


    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
   // var query = {rc: m.pl.rc,'fd.pt.pp.uri':'/commons/images/IDPhotoSubmitedDemo.png',ds:{"$ne":true}};
    var query = {rc: m.pl.rc,ds:{"$ne":true}};


    ResponseModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {

        if (!paramError) {

            if(paramPhotoJson){
                paramPhotoJson.fd.pt[0].pp.uri= m.pl.uri;
                paramPhotoJson.fd.pt[0].pp.urll = m.pl.urll;
                paramPhotoJson.fd.pt[0].pp.urlm = m.pl.urlm;
                paramPhotoJson.fd.pt[0].pp.urls = m.pl.urls;
                paramPhotoJson.save(function (err) {

                    if(!err){

                        console.log('bmm_updateResponsePhotoByResponseCode', paramPhotoJson);
                        r.pl = paramPhotoJson;
                        deferred.resolve(r);
                    }
                    else{

                        console.log('bmm bmm_updateResponsePhotoByResponseCode--',err);
                        r.er = {ec:'', em: err};
                        deferred.reject(r);

                    }

                });

            }
            else{

                console.log('bmm_updateResponsePhotoByResponseCode', paramPhotoJson);
                r.pl = paramPhotoJson;
                deferred.resolve(r);

            }

            }
        else {

            console.log('bmm eError--',paramError);

            r.er = {ec:'', em: paramError};

            deferred.reject(r);
        }
    });


    return deferred.promise;
}


/*
function bmm_updateForm(m) {
    var r = {"pl": null, "er": null};
    var deferred = q.defer();
    storageBucketManager('updateform', m.pl.uuid, m.pl.formHtml).then(function (r) {
        m.pl.uri = '/forms/' + r.pl.uuid + '.html';

        delete m.pl.formHtml;

        FormMetaModel.findOne({uri: m.pl.uri},lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
            if (!paramError) {
                r.pl = paramPhotoJson;
                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });
    }).fail(function (r) {
        deferred.resolve(r);
    });
    return deferred.promise;
}
*/
function bmm_rollback(m){
  return transactionHelper.rollback({transactionid:m.pl.transactionid});
}

function bmm_updateStatus(m){
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return q()
  .then(function(){
    return transactionHelper.getCreate(m.pl.col,{},m.pl.transactionid,{"abd.ac":m.pl.ei},undefined,credential);
  })
  .then(function(msg){
    msg.abd.aps=m.pl.status;
    return transactionHelper.saveToPromise(msg);
  })
  .then(function(msg){
    //no need to return the updated entity
    return transactionHelper.commit({transactionid:m.pl.transactionid});
  })
  .then(function resolve(res){
      return q.resolve(res);
    },function reject(er){
      return q.reject("Error in bmm_updateStatus:"+er+" - ");
    }
  );
}

function bmm_findUserResponse(m) {
    var user = m.pl.user;
    var activity = m.pl.activity;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization, m.pl.code);
    return q()
        .then(function () {
            var query = {
                ds: {"$ne": true},
                "ow.uid": user,
                "acn": activity
            }
            return ResponseModel.findOne(lib.authTransform(query,'r',credential))
                .populate('dp.ac dp.respondents fd.ac')
                .exec();
        })
        .then(function resolve(r) {
            console.log("returning");
            return r;
        }, function failure(err) {
            console.log("error!: ", err);
            throw err;
        });
}
function bmm_changeActivityCode(m) {
    m.pl.field = "abd.ac";
    m.pl.model = ActivityModel;
    return _findByAndSetModelField(m);
}
function bmm_activityCodeInUse(m) {
    m.pl.model = ActivityModel;
    m.pl.tgtField = "abd.ac";

    return _elementByIdentifierExists(m);
}
function bmm_formMetaCodeInUse(m){
    m.pl.model = FormMetaModel;
    m.pl.tgtField = "fc";

    return _elementByIdentifierExists(m);
}
function bmm_changeFormMetaCode(m){
    m.pl.model = FormMetaModel;
    m.pl.field = "fc";

    return _findByAndSetModelField(m);
}
function bmm_changeActivityFormRef(m){
    m.pl.model = ActivityModel;
    m.pl.field = "fm";
    m.pl.qcode = "abd.ac";

    return _findByAndSetModelField(m);
}
function _elementByIdentifierExists(m){
    var query = {};
        query[m.pl.tgtField] = m.pl.code;
    var model = m.pl.model;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q()
        .then(function(){
            return model.findOne(lib.authTransform(query,'r',credential)).exec()
        })
        .then(function resolve(res){
            if(res)
            {
                return true;
            }
            return false;
        }  ,  function failure(err){
            throw err;
        })
}
function _findByAndSetModelField(m){
    var field = m.pl.field,
        model = m.pl.model,
        tgtCode = m.pl.find,
        newCode = m.pl.code;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    if(!(tgtCode && newCode && field && model)) throw 'invalid payload: missing "find" "code" "model" or "field" in '+m;

    var query = {};
    var update = {};
    if(m.pl.qcode) query[m.pl.qcode] = tgtCode;
    else query[field] = tgtCode;
    update[field] = newCode;

    var deferred = q.defer();
    model.update(lib.authTransform(query,'w',credential),{$set:update},{},function(err,cnt){
            if(err)
                deferred.reject(err);
            else
                deferred.resolve(cnt);
        }
    )
    return deferred.promise;
}


function bmm_uploadDocument(m) {
    console.log('\nbmm: uploading document\n ');

    var r = {"pl": null, "er": null};
    var deferred = q.defer();

    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadfile', null, m.pl.ifm, m.pl.fileData, null).then(function (r){

        r.pl.uri = '/files/' + r.pl.uuid + '.' + m.pl.ifm;
        delete m.pl.fileData;

        console.log('bmm_uploadDocument r--',r);

         deferred.resolve(r);

    }).fail( function (r){
        deferred.reject(r);
    });

    return deferred.promise;
}

function bmm_logResponseOnActivity(m){
    if(!m || !m.pl) return;
    var deferred = q.defer();
    var ac = m.pl.code;
    var command = {"$inc": {"arc.crc":1}}
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    if(m.pl.stat == "autoprocess") {
        var ttl = m.pl.ttl;
        command = {"$inc":{"arc.prc":1},"$set":{"arc.ptl":ttl}};
    }
    ActivityModel.findOneAndUpdate(lib.authTransform({"abd.ac": ac},'w',credential), command)
        .exec(function(err, db_res) {
            if (err) {
                deferred.reject(err);
            }
            else {
                console.log("Logged response on activity counter");
                deferred.resolve(true);
            }
        });
    return deferred.promise;
}
function bmm_setMassProcessable(m){
    if(!m || !m.pl) return;
    var deferred = q.defer();
    var ac = m.pl.code;
    var val = m.pl.value;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    ActivityModel.findOneAndUpdate(lib.authTransform({"abd.ac": ac},'w',credential), {"$set": {'abd.mass':val}})
        .exec(function(err, db_res) {
            if (err) {
                deferred.reject(err);
            }
            else {
                console.log("Set ",ac," mass processable to ",val);
                deferred.resolve(true);
            }
        });
    return deferred.promise;
}
function bmm_getExcelHeadersFromUnzipped(m){
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    console.log("xl headers credential",credential);
    return q()//FETCH USERSMETA FOR ACTIVITY
        .then(function(){
            return UsersMetaModel.find(lib.authTransform({ds:{"$ne":true},"ac":m.pl.ac},'r',credential)).exec();
        })
        //UNZIP UPLOADED DATA
        .then(function(usermeta){
            console.log(usermeta);
            console.log("unzipping uploaded data",usermeta,"and fp.uri being",usermeta[0].fp.uri);
            if(!usermeta.length) throw new Error("No user meta document associated with activity code", m.pl.ac);
            var um = usermeta[0];
            //Check if the associated file is a zip then get its UUID and pass to the unzipper
            var find_uid = (/files\/([a-zA-Z0-9\-]+).zip/.exec(um.fp.uri));
            var uid = find_uid.length?find_uid[1]:undefined;
            return storageBucketManager('unzipper', uid, 'zip');
        })
        //PARSE UPLOADED EXCEL TO Unique-Valued headers
        .then(function(bucketReply){
            console.log("after unzipper",xlsx.parse(bucketReply.pl.xlsx.data)[0].data);
            var xldata = xlsx.parse(bucketReply.pl.xlsx.data)[0].data,
                headers = xldata[0].map(function(e){
                    return {
                        name : e,
                        uniqs : [],
                        isUniq : true
                    };
                });
            //Compare
            for(var i = 1; i < xldata.length; i ++)
            {
                for(var h = 0; h < headers.length; h++)
                {
                    //See if this datum has a duplicate
                    for(var x = 0; x < headers[h].uniqs.length && headers[h].isUniq; x++)
                    {
                        if(headers[h].uniqs[x] == xldata[i][h])
                            headers[h].isUniq = false
                    }
                    headers[h].uniqs.push(xldata[i][h])
                }
            }
            //Filter
            var result = [];
            for(var h = 0; h < headers.length; h++)
            {
                if(headers[h].isUniq) result.push(headers[h].name);
            }
            return result;
        })
}
function bmm_associateUniqueFieldWithFormMeta(m){
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return q().then(function getActivity(){
        return bmm_getActivity({
            pl: {
                code: m.pl.ac,
                loginName : m.pl.loginName,
                currentOrganization: m.pl.currentOrganization
            }
        })
    }).then(function associateFormMeta(activity){
        var fc = activity.fm.fc;

        return FormMetaModel.update(lib.authTransform({ds:{"$ne":true},fc:fc},'w',credential),{$set:{siv:[{in: m.pl.field,it:"String"}]}}).exec()
    }).then(function (response){
        console.log(response);
        return {pl:{altered:response},er:null}
    })
}

function bmm_associateAccountWithExtantNationalID(m){
    //Get account id and national id from payload
    var asscAccount = m.pl.account,
        targetHash = crypto.createHash('md5').update(m.pl.nationalID+"").digest("hex"),
        deferred = q().defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    //Find all responses whose ow.lzsid is equal to the crypto.md5 hash of the national id
    ResponseModel.findAndUpdate({"ow.uid":targetHash},{"$set":{"ow.uid":asscAccount}},{multi:true},function(err,res){
        if(err)
        {
            console.log("Rejecting association with ",err);
            deferred.reject(err);
        }
        else
        {
            console.log("Successfully associated ",res);
            deferred.resolve(res);
        }
    })
    //Update response ow.uid to be the account id
    //Return a payload of the number of responses changed
}
exports.operations = [
                        init,
                        bmm_persistForm,
                        bmm_persistActivity,
                        bmm_getResponse,
                        bmm_getResponses,
                        bmm_persistResponse,
                        bmm_uploadPhoto,
                        bmm_readActivityDetailByID,
                        bmm_updateActivityDetail,
                        bmm_uploadActivityDetailLogo,
                        bmm_updateActivityDetailImages,
                        bmm_updateActivityDetailVideos,
                        bmm_updateActivityDetailAudios,
                        bmm_updateActivityDetailDescription,
                        bmm_updateActivityDetailFAQ,
                        bmm_getActivity,
                        bmm_getActivities,
                        bmm_getAllForms,
                        bmm_rollback,
                        bmm_deleteResponse,
                        bmm_updateStatus,
                        bmm_get_list_template,
                        bmm_download_activity_data,
                        bmm_readAllActivityDetails,
                        bmm_import_responses_data,
                        bmm_upload_respondents_list,
                        bmm_associate_response_with_user,
                        bmm_updateResponsePhotoByResponseCode,
                        bmm_getUserMeta,
                        bmm_findUserResponse,
                        bmm_changeActivityCode,
                        bmm_activityCodeInUse,
                        bmm_formMetaCodeInUse,
                        bmm_changeFormMetaCode,
                        bmm_changeActivityFormRef,
                        bmm_uploadDocument,
                        bmm_getFormMeta,
                        bmm_logResponseOnActivity,
                        bmm_getAllResponsesForActivity,
                        bmm_getExcelHeadersFromUnzipped,
                        bmm_associateUniqueFieldWithFormMeta,
                        bmm_setMassProcessable
                    ];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});
