/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//  message format
/*
 var m = {
 "ns":"olm",
 "mv": "1.00"
 "op": "readOperationsLog",
 "pl": {"userAccountID": "value1", "opType":"value2", "pageNumber":"value3", "pageSize":"value4"}
 };

 var r = {
 "er":"value",
 "pl": "value"
 }
 */

'use strict';
var mongoose = null ; //mongoose object
var smtpSendMessage = null;      //smtp object
var smsSendMessage= null;
var message = null;   //esb message function

var NotificationSchema = null;
var NotificationModel = null;
var MessageQueueSchema = null;
var MessageQueueModel = null;
var OutboxMessageSchema= null;
var OutboxMessageModel = null;
var CommentSchema = null;
var CommentModel = null;


var Q = require('q');

function init(m) {
    var r = {pl: null , er:null};
  if(!(m.pl.fn instanceof Function)) {
      r.er = {ec: '' , em: 'Payload pl is not a function'};
    return Q.fail(r);
  }

  message = m.pl.fn;
  // the promise for this init is completed once we get mongoose
  var p1 = message({
    op: 'dependency',
    pl: {dn: 'mongoose'}
  });


  var p2 = message({
    op: 'dependency',
    pl: {dn: 'smtpClient' }
  });

    var p3 = message({
        op: 'dependency',
        pl: {dn: 'smsClient' }
    });


    return Q.all([p1, p2, p3]).then(function(r1){
   //console.log(" returning from Q.all \n" + r1[0] + "\n" + r1[1]);
       // console.log(r1);
    if(!(r1[0].pl.fn instanceof Object)){
        r.er = {ec: '005' , em: 'Payload r[0].pl.fn not an object '};
        return Q.fail(r);
    }
    else {
        mongoose = r1[0].pl.fn;
        console.log('\nmdm: mdm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
    }
    if(!(r1[1].pl.fn instanceof Object)){
        r.er = {ec: '006' , em: 'Payload r[1].pl.fn not an object '};
        return Q.fail(r);
    }
    else {
        smtpSendMessage  = r1[1].pl.fn;
        console.log('mdm: mdm has received smtp dependency ...');
    }

        if(!(r1[2].pl.fn instanceof Object)){
            r.er = {ec: '007' , em: 'Payload r[2].pl.fn not an object '};
            return Q.fail(r);
        }
        else {
            //console.log("trying to get sms client");
            smsSendMessage  = r1[2].pl.fn;
            console.log('mdm: mdm has received sms dependency ...');
        }

     NotificationSchema = require("./models/Notification.js")(mongoose);
     NotificationModel = mongoose.model('notifications', NotificationSchema); //exposes static methods
     MessageQueueSchema = require("./models/MessageQueue.js")(mongoose);
     MessageQueueModel = mongoose.model('messagequeues', MessageQueueSchema); //exposes static methods
     OutboxMessageSchema = require("./models/OutboxMessage.js")(mongoose);
     OutboxMessageModel = mongoose.model('outboxmessages', OutboxMessageSchema); //exposes static methods
     CommentSchema= require("./models/Comment.js")(mongoose);
     CommentModel = mongoose.model('comments', CommentSchema); //exposes static methods


     r.pl  = {pm: 'mdm initialization done!'};
    return Q(r);
  });
}

function instantiate(m) {
    //console.log("entering self instantiating of mdm smtp service ...");
    var r =  {pl:null, er:null};
    if(m.pl.dn === 'smtp') {
        var smtpService = require('./services/smtpService.js');
        console.log('mdm: mdm self instantiating smtp with configurations from cmm ...');
        r.pl=  {fn: smtpService.smtpTransporter(m.pl.dc)};
        return Q(r);
    } else {
        r.er ={ec: null, em:'do not know how to instantiate ' + m.pl.dn};
        return Q.fail(r);
    }
}

//var m = {
//    ns: 'mdm',
//    vs: '1.0',
//    op: 'sendNotification',
//    pl: {
//         recipients:[{
//             inmail:{to:'642d0eff3748330000dc5639'},
//             weixin:{to:'lionleo001'},
//             sms:{to:'15900755434'},
//             email:{to:'leo@lbsconsulting.com'}
//         },{
//             inmail:{to:'642d0eff3748330000dc5639'},
//             weixin:{to:'13855558888'},
//             sms:{to:'xyz', status: Boolean},
//             email:{to:'rolland@lbsconsulting.com'}
//         }],
//         notification:{
//         from: String,
//         subject:'事务提交成功',
//         body:'事务提交成功事务提交成功事务提交成功事务提交成功事务提交成功事务提交成功事务提交成功',
//         notificationType:'业务通知'}
//    }};

function sendNotification(m) {
    var deferred = Q.defer();
    var r = {"pl": null, "er": {em: null, ec: null}};

    if (m.pl.recipients.length > 0) {

        //creates a record in the send outbox
        OutboxMessageModel.create(m.pl).then(function(ms, er) {
            if (ms) {
                //create a quee of messages to be sent
                MessageQueueModel.create(m.pl).then( function (mq,er) {
                    if (mq) {
                        r.pl = mq;
                        deferred.resolve(r);

                        var inMailRecipients = mq.recipients;
                        for (var i = 0; i < inMailRecipients.length; i++) {
                            if(mq.recipients[i].inmail.to){
                                sendInMail(mq, i);
                            }
                            if(mq.recipients[i].sms.to){
                                sendSMS(mq, i);
                            }
                            if(mq.recipients[i].email.to){
                                sendEmail(mq, i);
                            }
                        }
                    }
                    else{
                        r.er.em = er;
                        r.er.ec = '7002';
                        deferred.reject(r);
                    }
                });
            }
            else{
                console.log('Error message: ', er);
                r.er.em = er;
                r.er.ec = '7001';
                deferred.reject(r);
            }
        });
    }
    return deferred.promise;
};



function sendSMS(paramMQ, paramIndex) {

    var message= {
        "pl": {
        "mobile":"",
         message:""
        },
        er: null
    };
    //console.log(' sending mail from mq', paramMQ);
    message.pl.mobile = paramMQ.recipients[paramIndex].sms.to;
    message.pl.message = paramMQ.notification.subject + ": " +  paramMQ.notification.body;

    smsSendMessage(message).then(function(r){
       if(r.pl){
               paramMQ.recipients[paramIndex].sms.ss = true;
               paramMQ.save();
           }
    });

}

function sendEmail(paramMQ, paramIndex) {

    var message = {
        pl: {
            "to": null,
            "subject": null,
            "text": null
        }
    };

    //console.log(' sending mail from mq', paramMQ);
    message.pl.to = paramMQ.recipients[paramIndex].email.to;
    message.pl.subject = paramMQ.notification.subject;
    message.pl.text = paramMQ.notification.body;

   smtpSendMessage(message).then(function(r){
        if(r.pl){
            paramMQ.recipients[paramIndex].email.ss = true;
            paramMQ.save();
        }
    });

}


function sendInMail(paramMQ, paramIndex) {

    var message = {
        recipient: {
            inmail: {to: null}
        },
        notification: {
            from: null,
            subject: null,
            body: null,
            notificationType: null
        }
    };

    //console.log(' sending mail from mq', paramMQ);
    message.recipient.inmail.to = paramMQ.recipients[paramIndex].inmail.to;
    message.notification.body = paramMQ.notification.body;
    message.notification.subject=  paramMQ.notification.subject;
    message.notification.from =  paramMQ.notification.from;
    message.notification.notificationType=  paramMQ.notification.notificationType;

    NotificationModel.create(message, function (er, nm) {
        if(nm){
            paramMQ.recipients[paramIndex].inmail.ss = true;
            paramMQ.save();
        }
    });
}

//var m = {
//    ns: 'mdm',
//    vs: '1.0',
//    op: 'getNotificationByTo',
//    pl: {
//         viewStatus: true, // null
//         to:'642d0eff3748330000dc5639',
//         pageNumber: 1,
//         pageSize: 10
//    }
//};

function getNotifications(m) {
    m.mt = m.mt || {};
    var r ={"pl":null, "er":{em:null, ec:null}};

    var model = m.pl.messageGroup === 'sent' ? OutboxMessageModel : NotificationModel;
    if(m.pl.messageGroup === 'all') {
        var query = {"ds":{"$ne":true}, 'recipient.inmail.to': m.pl.to}
    }
    else if(m.pl.messageGroup === 'unread') {
        var query = {"ds":{"$ne":true},'recipient.inmail.to': m.pl.to,'notification.viewStatus': false}
    }
    else if(m.pl.messageGroup === 'sent') {
        var query = {"ds":{"$ne":true},'notification.from': m.pl.from}
    }
    var filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'notification.subject':m.mt.sk},{'notification.notificationType': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

    if(filterQuery.length) query['$and'] = filterQuery;

    return Q.all([
        function(){
            return model.find(query).sort({'notification.sendTime':-1}).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }()
        ,function(){
            return model.find(query).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,  function fail(err){
        return {er:{em:err}};
    })
}

//var m = {
//    ns: 'mdm',
//    vs: '1.0',
//    op: 'updateViewStatus',
//   pl:{
//       messageID:''
//       viewStatus:true
//   }
//};

function mdm_createComment(m){
    var deferred = Q.defer();
    var r = {"pl": null, "er": {em: null, ec: null}};

    CommentModel.create(m.pl).then(function(cm, err){
        if (cm) {
            r.pl = cm;
            deferred.resolve(r);
        }
        else{
            r.er.em = er;
            r.er.ec = '9002';
            deferred.reject(r);
        }
    });

    return deferred.promise;

}

function mdm_readComment(m){
    var deferred = Q.defer();
    var r = {"pl": null, "er": {em: null, ec: null}};

    var query = CommentModel.find({"ds":{"$ne":true}, 'tguid': m.pl.tguid}).sort({cd:-1}).skip((m.pl.pageNumber - 1) * m.pl.pageSize).limit(m.pl.pageSize);

    query.exec(function(paramError, paramData){
        if(!paramError){
            r.pl = paramData;
            deferred.resolve(r);
        }
        else {
            r.er.em = paramError;
            deferred.reject(r);
        }
    });

    return deferred.promise;

}

//m.pl = {_id: xyz, ln: xyz, ds:true}

function mdm_markCommentForDelete(m) {
    var r = {"pl": null, "er": {em: null, ec: null}};
    var deferred = Q.defer();
    var query = {_id: m.pl._id, ln: m.pl.ln};
    var options = {new: false};

    CommentModel.findOneAndUpdate(query, m.pl, options, function (err, cm) {
        if (cm) {
            r.pl = cm;
            deferred.resolve(r);
        }
        else {
            r.er.em = err;
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function mdm_markCommentAsLiked(m) {
    var r = {"pl": null, "er": {em: null, ec: null}};
    var deferred = Q.defer();
    var query = {_id: m.pl._id};
    var options = {new: false};

    CommentModel.findOneAndUpdate(query, m.pl, options, function (err, cm) {
        if (cm) {
            r.pl = cm;
            deferred.resolve(r);
        }
        else {
            r.er.em = err;
            deferred.reject(r);
        }
    });
    return deferred.promise;
}



function updateViewStatus(m) {
    var r = {"pl": null, "er": {em: null, ec: null}};
    var deferred = Q.defer();
    var query = {_id: m.pl.messageID};
    var update = {'notification.viewStatus': m.pl.viewStatus};
    var options = {new: true};
    var messageModel = null;
    if (m.pl.messageType == 'inbox'){
        messageModel = NotificationModel;
    }
    else {
        messageModel = OutboxMessageModel;
    }
    messageModel.findOneAndUpdate(query, update, options, function (err, nm) {
        if (nm) {
            r.pl = nm;
            deferred.resolve(r);
        }
        else {
            r.er.em = err;
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function persistNotification(m) {
    var r = {"pl": null, "er": {em: null, ec: null}};
    var deferred = Q.defer();
    var query = {_id: m.pl.notification._id};
    var options = {new: false};

    var messageModel = null;
    if (m.pl.messageType == 'inbox'){
        messageModel = NotificationModel;
    }
    else {
        messageModel = OutboxMessageModel;
    }


    messageModel.findOneAndUpdate(query, m.pl.notification, options, function (err, nm) {
        if (nm) {
            r.pl = nm;
            deferred.resolve(r);
        }
        else {
            r.er.em = err;
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function sendEmailMessage(paramNM, paramCallback) {
    //console.log(paramNM);
    smtp.sendMail({
        from: 'leo@lanid.cn',
        to: paramNM.recipient.email.to,
        subject: paramNM.notification.subject,
        text: paramNM.notification.body
    }, function (paramError, paramInfo) {
        if (!paramError) {
            paramNM.recipient.email.sendStatus = true;
            paramNM.recipient.email.sendTime = Date.now();
            paramNM.save(function (parammError, parammMessage) {
                if (parammMessage) {
                    return paramCallback(null, true);
                }
                else {
                    return paramCallback(parammError, null);
                }
            });
        }
        else {
            return paramCallback(paramError, null);
        }
    });
}

exports.operations = [
    init,
    instantiate,
    sendNotification,
    getNotifications,
    updateViewStatus,
    persistNotification,
    mdm_createComment,
    mdm_readComment,
    mdm_markCommentForDelete,
    mdm_markCommentAsLiked
];

exports.operations.forEach(function(op) {
 exports[op.name] = op;
});

