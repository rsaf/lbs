/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

'use strict';
var mongoose = null; //mongoose object
var message = null;  // message function
var storageBucketManager = null; // photo physical storage handle


var FileSchema = null;
var FileModel = null;
var PhotoModel = null;
var PhotoSchema = null;
var IDPhotoModel = null;
var IDPhotoSchema = null;

var Q = require('q');
var lib = require('lib');


function init(m) {
    var r = {pl: null, er: ''};
    if (!(m.pl.fn instanceof Function)) {
        r.er = {ec: null, em: 'Payload pl is not a function'};
        return Q.fail(r);
    }
    message = m.pl.fn;
    var p1 = message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    });
    var p2 = message({
        op: 'dependency',
        pl: {dn: 'bucketManager'}
    });
    return Q.all([p1, p2]).then(function (r1) {  // the promise for this init is completed once we get all dependencies
        //console.log(r1);
        mongoose = r1[0].pl.fn;
        storageBucketManager = r1[1].pl.fn;
        //console.log(storageBucketManager);
        console.log('\ndmm: dmm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        console.log('dmm: dmm has received storageBucketManager dependency...');

        //console.log('\n' +  photoStorage.originalStorage);
        FileSchema = require("./models/Files.js")(mongoose);
        FileModel = mongoose.model('files', FileSchema);

        PhotoSchema = require("./models/Photo.js")(mongoose);
        PhotoModel = mongoose.model('photos', PhotoSchema); //exposes static

        IDPhotoSchema = require("./models/IDPhoto.js")(mongoose);
        IDPhotoModel = mongoose.model('idphotos', IDPhotoSchema); //exposes static

        var r = {pl: {pm: 'dmm initialization done! '}, er: null};
        return Q(r);
    });

}

function dmm_uploadPhoto(m) {
    console.log('\ndmm: in uploading photo\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    // executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadphoto', null, m.pl.opp.ifm,  m.pl.photoData, null).then(function (r) {
        //console.log('dmm: reply from upload bucket function ..\n')
        m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.opp.ifm;
        m.pl.urll= '/photos/' + r.pl.uuid +'_l' +'.' + m.pl.opp.ifm;
        m.pl.urlm= '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.opp.ifm;
        m.pl.urls= '/photos/' + r.pl.uuid +'_s' +'.' + m.pl.opp.ifm;
        m.pl.opp.irs = r.pl.pd;
        m.pl.opp.ofs = r.pl.ps;
        m.pl.opp.ifm = r.pl.pfm;

        delete m.pl.PhotoData;
        //console.log(m);
        PhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
            if (!paramError) {
                r.pl = paramPhotoJson;
                //console.log(r);
                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });
    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

//tested
function dmm_markPhotoForDelete(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    var query = {_id: m.pl._id};
    m.pl.ds = true;
    var update = lib.updateTransformjson(m).pl;
    var options = {new: true};

    PhotoModel.findOneAndUpdate(query, update, options, function (paramError, paramPhoto) {
        if (!paramError) {
            r.pl = paramPhoto;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function dmm_markDocumentForDelete(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    var query = {_id: m.pl._id};
    m.pl.ds = true;
    var update = lib.updateTransformjson(m).pl;
    var options = {new: true};

    FileModel.findOneAndUpdate(query, update, options, function (paramError, paramPhoto) {
        if (!paramError) {
            r.pl = paramPhoto;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function dmm_getUserPhotos(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    PhotoModel.find({'ct.uID': m.pl.uID, 'ct.oID': m.pl.oID, ds: false }, function (paramError, paramPhotoProperty) {
        if (!paramError) {
            r.pl = paramPhotoProperty;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//
//m.pl = {
//    fn: null,
//    ft: null,
//    rm: null,
//    fs: null,
//    fm: null,
//    uri: null
//    uID: null,
//    oID: null,
//    fd: null
//}

function dmm_uploadDocument(m) {
    console.log('\ndmm: uploading document\n ');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
   storageBucketManager('uploadfile', null, m.pl.fm, m.pl.fd, null).then(function (r){

       m.pl.uri = '/files/' + r.pl.uuid + '.' + m.pl.fm;
       delete m.pl.fd;

       FileModel.create(lib.createTransformjson(m).pl, function(paramError, paramDocumentJson){
           if (!paramError) {
               r.pl = paramDocumentJson;
               deferred.resolve(r);
           }
           else {
               r.er = {ec:'', em: paramError};
               deferred.reject(r);
           }
       });

   }).fail( function (r){
       deferred.reject(r);
   });

    return deferred.promise;
}


function dmm_getUserDocuments(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    FileModel.find({'ct.uID': m.pl.uID, 'ct.oID': m.pl.oID, ds: false, ft: m.pl.ft }, function (paramError, paramFileProperty) {
        if (!paramError) {
            r.pl = paramFileProperty;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em:paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function dmm_copyPhotoToUser(m) {
    console.log('\ndmm: copying photo to user\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    storageBucketManager('copyphoto', m.pl.uri, null).then(function (r) {
         console.log('dmm: reply from upload bucket function ..\n')
        //m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.imageExt;//broken

        console.log(m);

        IDPhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramIDPhotoJson) {
            if (!paramError) {
                r.pl = paramIDPhotoJson;
                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });
    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

exports.operations = [init, dmm_uploadPhoto,dmm_uploadDocument, dmm_copyPhotoToUser, dmm_getUserPhotos,dmm_markPhotoForDelete, dmm_getUserDocuments, dmm_markDocumentForDelete];

//re-export ops (for testing)
exports.operations.forEach(function (op) {
    exports[op.name] = op;
});
