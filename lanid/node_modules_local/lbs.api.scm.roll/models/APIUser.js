/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//Model Dependencies ===============================
var bcrypt   = require('bcrypt-nodejs');

module.exports = function (paramMongoose){

//Model Schema Definition ===============================
var apiUserSchema = paramMongoose.Schema({
    //_id: String,
    createdOn: { type: Date, default: Date.now },
    createdBy: {type: String, default: "系统创建"},
    loginStatus: Boolean,
    accountStatus:{type: String, default: "10"},
    lastHostName: String, 
    accountIsLocked: Boolean, 
    lastChangeDate: Date,
    lastLoginDate: Date,
    lastLoginMethod: String,  //local, facebook, twitter, google
    lastFailDate:  Date,
    failCount: Number,
    expirationDate: Date,
    userType: String, // personal, corporate,admin, api
    loginCountTotal: Number,
    groups:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'Group'}],
    currentOrganization: {type: paramMongoose.Schema.Types.ObjectId, ref: 'organizations'},
    previousOrganizations:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'organizations'}],

    lanzheng        : {//apiLogin
        apikey       : {type: String,unique:true },
        secret       : String,
        loginName    : String,//friendlyName
        ipaddress    : String,
        usage        : String,
        status       : String,
        validityStart: String,
        validityEnd  : String,
        loginCount   : Number,
        temptoken    : String,  //temporary token
        exptoken     : Date,    //Token expiration date time
        hashKey      : String   //hash of apikey, secret, ipaddress,
    }


});

// Model methods ======================
// generating a hash


apiUserSchema.methods.incAPILoginCount = function(paramCallback){
if(this.apiLogin.loginCount){
this.apiLogin.loginCount += 1;
}
else {
this.apiLogin.loginCount = 1;
}
this.save(paramCallback);
};

apiUserSchema.methods.generateHash = function(paramAPIKeySecretIPAddress) {
    return bcrypt.hashSync(paramAPIKeySecretIPAddress, bcrypt.genSaltSync(8), null);
};

// checking if password is valid
apiUserSchema.methods.validateAPIUser = function(paramAPIKeySecretIPAddress) {
    return bcrypt.compareSync(paramAPIKeySecretIPAddress, this.apiLogin.hashKey);
};

apiUserSchema.statics.loginAPI = function (paramAPIKey, paramSecret, paramIPAddress, paramCallback){
this.findOne({"apiLogin.apikey": paramAPIKey }, function(paramError, paramUser){
    if(paramError){
       paramCallback(paramError,false);
    }
    else if (paramUser){
        //console.log(paramUser);
        if(paramUser.validateAPIUser(paramAPIKey+paramSecret+paramIPAddress)){
        paramUser.incAPILoginCount(paramCallback);
        }    
        else {
         paramCallback("Invalid Login or Password!, please try again ", false);   
        }
    }
    else {
        paramCallback(paramError,false);
    }
});
};

 apiUserSchema.statics.getByID = function (paramUserID, paramCallback){
this.findById(paramUserID, paramCallback);   
};

return apiUserSchema;
};