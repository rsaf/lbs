/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//Model Dependencies ===============================
var bcrypt   = require('bcrypt-nodejs');

module.exports = function (paramMongoose){

//Model Schema Definition ===============================
var userSchema = paramMongoose.Schema({
    //_id: String,


    createdOn: { type: Date, default: Date.now },
    createdBy: {type: String, default: "系统创建"},
    loginStatus: Boolean,
    accountStatus:{type: String, default: "20"},
    lastHostName: String, 
    accountIsLocked: Boolean, 
    lastChangeDate: Date,
    lastLoginDate: Date,
    lastLoginMethod: String,  //local, facebook, twitter, google
    lastFailDate:  Date,
    failCount: Number,
    expirationDate: Date,
    userType: String, // personal, corporate, servicePoint,admin
    loginCountTotal: Number,
    groups:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'Group'}],
    currentOrganization: {type: paramMongoose.Schema.Types.ObjectId, ref: 'organizations'},
    previousOrganizations:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'organizations'}],
    lanzheng         : {
        loginName    : {type: String, unique: true},
        mobile       :{type: String, unique: true},
        weixin       :{name:{type: String},openID:{type: String}},
        verificationCode :{code: String, issueDate:{type: Date, default: Date.now}},//todo: no need for time span, should just overwrite the existing value(keep only the latest code)
        hashPassword : String,
        oldPasswords : [String],
        loginCount   : Number
    },
    facebook         : {
        //id         : {type: String, unique:true},
        token        : String,
        email        : String,
        name         : String,
        loginCount   : Number
    },
    twitter          : {
        //id         : {type: String, unique:true},
        token        : String,
        displayName  : String,
        username     : String,
        loginCount   : Number
    },
    google           : {
        //id         : {type: String, unique:true},
        token        : String,
        email        : String,
        name         : String,
        loginCount   : Number
    }

});


// Model methods ======================
// generating a hash
userSchema.statics.findLanzhengUser = function(paramLoginInfo,paramCallback){
    console.log("TRYING TO FIND",paramLoginInfo);
    return this.findOne(
       // {
           // $and:[
               // {accountStatus: "20"},
                {$or: [{'lanzheng.loginName': paramLoginInfo}, {'lanzheng.mobile': paramLoginInfo},{'lanzheng.weixin.name': paramLoginInfo}]}
           // ]
       // }
        ,paramCallback).populate('organizations').exec();
};

userSchema.methods.incLanzhengLoginCount = function(paramCallback){
if(this.lanzheng.loginCount){
this.lanzheng.loginCount += 1;
}
else {
  this.lanzheng.loginCount = 1;  
}
this.save(paramCallback);
};

userSchema.methods.generateHash = function(paramPassword) {
    return bcrypt.hashSync(paramPassword, bcrypt.genSaltSync(8), null);
};

// checking if password is valid
userSchema.methods.validPassword = function(paramPassword) {
    return bcrypt.compareSync(paramPassword, this.lanzheng.hashPassword);
};

userSchema.methods.registerUser = function (paramLoginName, paramPassword,paramUserType, paramOrganization, paramCallback){
 //console.log(paramOrganization);
 this.userType = paramUserType;
 this.lanzheng.loginName = paramLoginName;
 this.lanzheng.mobile = paramLoginName;
 this.lanzheng.hashPassword =  this.generateHash(paramPassword);
 this.lanzheng.loginCount = 1; // Once the user is registered, the user is automatically loginned
 this.loginStatus = true;
 this.currentOrganization = paramOrganization;
 this.save(paramCallback);
};

userSchema.statics.login = function (paramLoginName, paramPassword, paramCallback){
    console.log("Logging in ",paramLoginName,"with",paramPassword);
this.findLanzhengUser(paramLoginName, function(paramError, paramUser){
    console.log("FLU returned");
    if(paramError){
       paramCallback(paramError,false);
    }
    else if (paramUser){
        console.log("paramuser",paramUser);
        if(paramUser.validPassword(paramPassword)){
        paramUser.incLanzhengLoginCount(paramCallback);   
        }    
        else {
         paramCallback("Invalid Login or Password!, please try again ", false);   
        }
    }
    else {
        paramCallback(paramError,false);
    }
});
};

userSchema.statics.getByID = function (paramUserID, paramCallback){
this.findById(paramUserID, paramCallback);   
};

return userSchema;
};