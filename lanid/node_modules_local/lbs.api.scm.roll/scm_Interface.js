/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var UserSchema = null;
var GroupSchema = null;
var OrganizationSchema = null;
var User = null;
var Group = null;
var OrganizationModel = null;
var mongoose = null;
var getWXUserInfo = null;
var APIUserSchema;
var APIUserModel;

var Q = require('q');
var uuid = require('node-uuid');

var message = null;

var personal_oID = '000000000000000000000001';
var admin_oID =    '200000000000000000000000';


function init(m) {
    if (!(m.pl.fn instanceof Function)) {
        return Q.fail({pl: null, er: {em: 'Payload pl is not a function'}});
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose

    var p0 = message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    });


    var p1 = message({
        op: 'dependency',
        pl: {dn:'getWXUserInfo'}
    });


    return Q.all([p0,p1]).then(function (r1) {
        //console.log(r1);
        mongoose = r1[0].pl.fn;
        getWXUserInfo = r1[1].pl.fn;

        //var m = {pl:{"code":"041830ee1a9b2727536df90babf87056"}};
        //getWXUserInfo(m).then(function(r){
        //    console.log(r);
        //});

        console.log('\nscm: scm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        UserSchema = require("./models/User.js")(mongoose);
        GroupSchema = require("./models/Group.js")(mongoose);
        OrganizationSchema = require("./models/Organization.js")(mongoose);
        APIUserSchema = require("./models/APIUser.js")(mongoose);
        APIUserModel = mongoose.model('apiusers', APIUserSchema ); //exposes static methods
        User = mongoose.model('users', UserSchema); //exposes static methods
        Group = mongoose.model('groups', GroupSchema); //exposes static methods
        OrganizationModel =  mongoose.model('organizations', OrganizationSchema); //exposes static methods
        var r = {pl: {pm: 'scm initialization done! '}, er: null};

        //return Q(r);

        var deferred = Q.defer();
        createInitialOrganizationalID(personal_oID, function(paramErr, paramOrg){
           if(paramOrg){
               createInitialOrganizationalID(admin_oID, function(parammErr, parammOrg){
                   if(parammOrg){
                       deferred.resolve(r);
                   }
                   else {
                       deferred.reject({pl: null, er: {em: 'default admin organization could not be created'}});
                   }
               });
           }
            else {
               deferred.reject({pl: null, er: {em: 'default personal organization could not be created'}});
           }
        });

        return deferred.promise;

    }).fail(function(r){
        return Q.fail({pl: null, er: {em: r }});
    });

}

function createInitialOrganizationalID(paramOrganizationID, paramCallback){

    OrganizationModel.findById(paramOrganizationID,function(paramError, paramOrganization){
        if(paramOrganization){
            paramCallback(null, paramOrganization);
        }
        else if (!paramError){
            var oOrganization = new OrganizationModel();
            oOrganization._id = paramOrganizationID;
            oOrganization.save(paramCallback);
        }
        else {
            paramCallback(paramError, null);
        }
    });
}

passport.use(new LocalStrategy(function (paramUsername, paramPassword, paramCallback) {
    //console.log(paramUsername + " " + paramPassword);
    User.login(paramUsername, paramPassword, paramCallback);
}));

passport.serializeUser(function (paramUser, paramNext) {
    console.log("Serializing " + paramUser.id);
    paramNext(null, paramUser.id);
});

passport.deserializeUser(function (paramID, paramNext) {
    console.log("Deserializing " + paramID);

    User.getByID(paramID, function (paramError, paramUser) {
        if (paramError) {
            paramNext(paramError, null);
        }
        else if (paramUser) {
            paramNext(null, paramUser);
        }
    });
});

//=======================================PUBLIC INTERFACE =========================================//

var m = {op: "getOrganization", "pl": null, "er": null};
 m.pl = {org: 'lanzheng'};

function getOrganization(m){
    var r = {pl:null, er: null};
    if(m.pl.org === 'lanzheng')
    {
        r.pl = {oID:admin_oID};
        return Q(r);
    }
}

function getPassport(m) {
    var r = {"pl": null, "er": null};
    r.pl = {fn: passport};
    return Q(r);
}

function getRegisterUser(m) {



    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function registerUser() {
        return function registerNewUser(paramRequest, paramResponse) {


            var r2 = {pl: null, er: null};
            var userType = paramRequest.body.userType;
            var loginName = paramRequest.body.loginName;
            var password = paramRequest.body.password;
            var deferred = Q.defer();
            paramRequest.logout();
            if (userType === 'personal') {
                OrganizationModel.findById(personal_oID,function(paramError, paramOrganization){

                    if(paramOrganization){
                        deferred.resolve(createUserAccount(userType, loginName, password, paramOrganization).then(function(r){console.log('oo0s',r); return r;}));
                    }
                    else{
                        console.log("Error from Create personal user organization... " + paramError)
                    }
                });
            }
            else if (userType === 'corporate') {
                OrganizationModel.create({}, function (paramError, paramOrganization) {


                    if (paramOrganization) {
                        deferred.resolve(createUserAccount(userType, loginName, password, paramOrganization).then(function(r){console.log('oos',r); return r;}));
                    }
                    else {
                        console.log("Error from Create corporate user organization... " + paramError);
                    }
                });
            }
            function createUserAccount(paramUserType, paramLoginName, paramPassword, paramOrganization) {
                ///console.log('Registering userType:' + userType + '  LoginName:' + loginName + "   organization: " + paramOrganization);

                var deferred = Q.defer();
                if (paramUserType && paramLoginName && paramPassword && paramOrganization) {
                    var oUser = new User(); //exposes instance methods

                    oUser.registerUser(paramLoginName, paramPassword, paramUserType, paramOrganization, function (paramError, paramUser) {
                        if (paramError) {
                            r2.er = {ec: 8404, em: paramError}; //error message
                        }
                        else if (paramUser) {
                            paramRequest.logIn(paramUser, function (parameterError) {
                               // console.log(paramUser);
                                //console.log(parameterError);
                                if (parameterError) {
                                    r2.er = {ec: 8404, em: parameterError}; //error message
                                }
                                else {
                                    r2.pl = {
                                        status: true,
                                        userType: paramUser.userType,
                                        loginName: paramUser.lanzheng.loginName,
                                        loginCount: paramUser.lanzheng.loginCount,
                                        mobile: paramUser.lanzheng.mobile


                                    };
                                }
                            });
                        }
                        else {
                            r2.er = {ec: 8404, em: "unknown error during login"}; //error message
                        }
                        paramResponse.writeHead(200, {"Content-Type": "application/json"});
                        paramResponse.end(JSON.stringify(r2));
                        console.log(JSON.stringify(r2));
                        deferred.resolve(paramRequest);
                    });
                }
                else {
                    r2.er = {ec: 8404, em: "incorrect user information"}; //error message
                    paramResponse.writeHead(200, {"Content-Type": "application/json"});
                    paramResponse.end(JSON.stringify(r2));
                    console.log(JSON.stringify(r2));
                    deferred.reject(paramRequest);
                }
                return deferred.promise;
            }
            return deferred.promise;
        };
    };
    return Q(r);
}


function getRegisterWithCallback(m){
    console.log('scm registring user-----');


    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function registerUser() {
        return function registerNewUser(paramRequest, paramResponse, paramCallback) {

            console.log('scm registring user step1 done-----');
            var r2 = {pl: null, er: null};
            var userType = paramRequest.body.userType;
            var loginName = paramRequest.body.loginName;
            var password = paramRequest.body.password;
            var responseCode = paramRequest.body.responseCode;
            paramRequest.logout();
            if (userType === 'personal') {
                OrganizationModel.findById(personal_oID,function(paramError, paramOrganization){

                    console.log('scm registring user step2 done-----');
                    if(paramOrganization){
                        createUserAccount(userType, loginName, password, paramOrganization);
                    }
                    else{
                        console.log("Error from Create personal user organization... " + paramError);
                    }
                });
            }
            else if (userType === 'corporate') {
                OrganizationModel.create({}, function (paramError, paramOrganization) {

                    console.log('scm registring user step2 done-----');

                    if (paramOrganization) {
                        createUserAccount(userType, loginName, password, paramOrganization);
                    }
                    else {
                        console.log("Error from Create corporate user organization... " + paramError);
                    }
                });
            }
            function createUserAccount(paramUserType, paramLoginName, paramPassword, paramOrganization) {
                ///console.log('Registering userType:' + userType + '  LoginName:' + loginName + "   organization: " + paramOrganization);
                if (paramUserType && paramLoginName && paramPassword && paramOrganization) {
                    var oUser = new User(); //exposes instance methods
                    oUser.registerUser(paramLoginName, paramPassword, paramUserType, paramOrganization, function (paramError, paramUser) {
                        if (paramError) {
                            r2.er = {ec: 8404, em: paramError}; //error message
                        }
                        else if (paramUser) {
                            paramRequest.logIn(paramUser, function (parameterError) {
                                console.log(paramUser);
                                console.log(parameterError);
                                if (parameterError) {
                                    r2.er = {ec: 8404, em: parameterError}; //error message
                                }
                                else {
                                    r2.pl = {
                                        status: true,
                                        userType: paramUser.userType,
                                        loginName: paramUser.lanzheng.loginName,
                                        loginCount: paramUser.lanzheng.loginCount,
                                        mobile: paramUser.lanzheng.mobile
                                    };
                                }
                            });
                        }
                        else {
                            r2.er = {ec: 8404, em: "unknown error during login"}; //error message
                        }
                        paramCallback(paramRequest, paramResponse, r2);
                    });
                }
                else {
                    r2.er = {ec: 8404, em: "incorrect user information"}; //error message
                    paramCallback(paramRequest, paramResponse, r2);
                }
            }
        };
    };
    return Q(r);
}

function getCreateUser(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function createUser() {

        return function createNewUser(paramRequest, paramResponse) {
            var r2 = {pl: null, er: null};
            var currentOrganizationID = paramRequest.user.currentOrganization;
            var creator = paramRequest.user.lanzheng.loginName;
            var requestUserType = paramRequest.user.userType; //the executing the create function ..
            var userType = paramRequest.body.userType;

            OrganizationModel.findById(currentOrganizationID, function (paramError, paramOrganization) {
                if (paramOrganization) {

                    if ((requestUserType === 'corporate') && (userType == 'corporate')) {
                        var oUser = new User();

                        //console.log(paramOrganization);
                        oUser.userType = userType;
                        oUser.lanzheng.loginName = paramRequest.body.loginName;
                        oUser.lanzheng.hashPassword = oUser.generateHash(paramRequest.body.password);
                        oUser.lanzheng.loginCount = 0; // Once the user is registered, the user is automatically loginned
                        oUser.loginStatus = false;     // this may not be needed ..
                        oUser.currentOrganization = paramOrganization;
                        oUser.createdBy = creator;

                        oUser.save(function (paramError, paramUser) {
                            if (paramError) {
                                r2.er = {ec: 8404, em: paramError}; //error message
                            }
                            else if (paramUser) {
                                r2.pl = {
                                    status: true,
                                    userType: paramUser.userType,
                                    loginName: paramUser.lanzheng.loginName,
                                    loginCount: paramUser.lanzheng.loginCount,
                                    mobile: paramUser.lanzheng.mobile
                                };

                            }
                            else {
                                r2.er = {ec: 8404, em: "unknown error during login"}; //error message
                            }
                            paramResponse.writeHead(200, {"Content-Type": "application/json"});
                            paramResponse.end(JSON.stringify(r2));
                            return;

                        });
                    }

                    else if (((requestUserType === 'corporate') || (requestUserType === 'admin') )&& (userType == 'api')) {

                        var oAPIUser = new APIUserModel(); //exposes instance methods
                        oAPIUser.userType = userType;
                        oAPIUser.createdBy = creator;
                        oAPIUser.currentOrganization = paramOrganization;
                        oAPIUser.lanzheng.loginName = paramRequest.body.loginName;
                        oAPIUser.lanzheng.ipaddress = paramRequest.body.ipaddress;
                        oAPIUser.lanzheng.usage = paramRequest.body.usage;
                        oAPIUser.lanzheng.status = paramRequest.body.status;
                        oAPIUser.lanzheng.validityStart = paramRequest.body.validityStart;
                        oAPIUser.lanzheng.validityEnd = paramRequest.body.validityEnd;
                        oAPIUser.lanzheng.apikey = uuid.v4();
                        oAPIUser.lanzheng.secret = paramRequest.body.secret;
                        oAPIUser.lanzheng.loginCount = 0;
                        oAPIUser.lanzheng.temptoken = '';
                        oAPIUser.lanzheng.exptoken = '';
                        oAPIUser.lanzheng.hashKey = oAPIUser.generateHash(oAPIUser.lanzheng.apikey + oAPIUser.lanzheng.secret + oAPIUser.lanzheng.ipaddress);

                        oAPIUser.save(function (paramError, paramUser) {
                            if (paramError) {
                                r2.er = {ec: 8404, em: paramError}; //error message
                            }
                            else if (paramUser) {

                                r2.pl = {
                                    status: true,
                                    userType: paramUser.userType,
                                    loginName: paramUser.lanzheng.loginName,
                                    loginCount: paramUser.lanzheng.loginCount,
                                    mobile: paramUser.lanzheng.mobile
                                };

                            }
                            else {
                                r2.er = {ec: 8404, em: "unknown error during login"}; //error message
                            }
                            paramResponse.writeHead(200, {"Content-Type": "application/json"});
                            paramResponse.end(JSON.stringify(r2));
                            return;
                        });

                    }

                    else {
                        console.log(" scm Error on userTypes... " + paramError);
                        r2.er = {ec: 8404, em: "incorrect user type .."}; //error message
                        paramResponse.writeHead(200, {"Content-Type": "application/json"});
                        paramResponse.end(JSON.stringify(r2));
                        return;
                    }

                }
                else {
                    console.log(" scm Error from Create corporate user organization... " + paramError);
                    r2.er = {ec: 8404, em: "incorrect user information"}; //error message
                    paramResponse.writeHead(200, {"Content-Type": "application/json"});
                    paramResponse.end(JSON.stringify(r2));
                    return
                }
            });

        };

    }
    return Q(r);
}

function getVerifyUserLogin(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function loginUser() {
        return function loginUserCredentials(paramRequest, paramResponse) {
           // console.log("Logging in ... " + paramRequest.body.username + " " + paramRequest.body.password);
            //console.log("Captcha... " + paramRequest.body.antiBotValue + " "+ paramRequest.body.user_captcha)
            //var systemCaptcha = paramRequest.body.antiBotValue;
            //var userCaptcha = paramRequest.body.user_captcha;
            var r2 = { pl: null, er: null};
            paramRequest.logout();
            //if (userCaptcha === systemCaptcha ){
            passport.authenticate('local', function (paramError, paramUser) {
                if (paramUser) {
                    paramRequest.logIn(paramUser, function (parameterError) {
                        if (parameterError) {
                            r2.er = {ec: 8404, em: parameterError};
                        }
                        else {
                            r2.pl = {
                                status: true,
                                userType: paramUser.userType,
                                loginName: paramUser.lanzheng.loginName,
                                loginCount: paramUser.lanzheng.loginCount,
                                mobile: paramUser.lanzheng.mobile
                            };
                        }
                    });
                }
                else if (paramError) {
                    r2.er = {ec: 8404, em:paramError};
                }
                else {
                    r2.er = {ec: 8404, em:"unknown error during login"};
                }
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(JSON.stringify(r2));
                //console.log(JSON.stringify(r2));
            })(paramRequest, paramResponse);
            //};
        };
    };
    return Q(r);
}


function getVerifyAPILogin(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function loginAPI() {
        return function loginUserCredentials(paramRequest, paramResponse, next) {

           // console.log('paramRequest', paramRequest);
            console.log(paramRequest.body);


            var r2 = { pl:{rs:true}, er: null};
            //console.log(JSON.stringify(r2));
            //paramResponse.writeHead(200, {"Content-Type": "application/json"});
            //paramResponse.end(JSON.stringify(r2));

            paramRequest.user = {
                lanzheng : {
                    loginName : 'foomaster'
                },
                currentOrganization : '000000000000000000000001'
            }

           next()


            // console.log("Logging in ... " + paramRequest.body.username + " " + paramRequest.body.password);
            //console.log("Captcha... " + paramRequest.body.antiBotValue + " "+ paramRequest.body.user_captcha)
            //var systemCaptcha = paramRequest.body.antiBotValue;
            //var userCaptcha = paramRequest.body.user_captcha;
            //var r2 = { pl: null, er: null};
            //paramRequest.logout();
            ////if (userCaptcha === systemCaptcha ){
            //passport.authenticate('local', function (paramError, paramUser) {
            //    if (paramUser) {
            //        paramRequest.logIn(paramUser, function (parameterError) {
            //            if (parameterError) {
            //                r2.er = {ec: 8404, em: parameterError};
            //            }
            //            else {
            //                r2.pl = {
            //                    status: true,
            //                    userType: paramUser.userType,
            //                    loginName: paramUser.lanzheng.loginName,
            //                    loginCount: paramUser.lanzheng.loginCount
            //                };
            //            }
            //        });
            //    }
            //    else if (paramError) {
            //        r2.er = {ec: 8404, em:paramError};
            //    }
            //    else {
            //        r2.er = {ec: 8404, em:"unknown error during login"};
            //    }
            //    paramResponse.writeHead(200, {"Content-Type": "application/json"});
            //    paramResponse.end(JSON.stringify(r2));
            //    //console.log(JSON.stringify(r2));
            //})(paramRequest, paramResponse);
            //
        };
    };
    return Q(r);
}

function getSessionUser(m) {
    var r = {
        pl: {fn: null},
        er: {ec: null, em: null}
    };
    r.pl.fn = function sessionUser() {
        return function getSessionUzer(paramRequest, paramResponse) {
            var r2 = {pl: null, er: null};
            if (paramRequest.isAuthenticated()) {
                //console.log(paramRequest.user);
                r2.pl = {
                    status: true,
                    userType: paramRequest.user.userType,
                    loginName: paramRequest.user.lanzheng.loginName,
                    loginCount: paramRequest.user.lanzheng.loginCount,
                    mobile: paramRequest.user.lanzheng.mobile
                };
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
            }
            else {
                r2.er = {ec: 8404, em: 'user not found'};
                paramResponse.writeHead(404, {"Content-Type": "application/json"});
            }
            paramResponse.end(JSON.stringify(r2));
            //console.log(JSON.stringify(r2));
        };
    };
    return Q(r);
}

function getOrganizationUsers(m) {
    var r = {
        pl: {fn: null},
        er: {ec: null, em: null}
    };
    r.pl.fn = function organizationUsers() {
        return function getOrganizationUzers(paramRequest, paramResponse) {
            var r2 = {pl: null, er: null};
            var usersList = [];

            if (paramRequest.isAuthenticated()) {
                var currentOrganizationID = paramRequest.user.currentOrganization;
                var promiseUsers = User.find({currentOrganization: currentOrganizationID});
                var promiseAPIs = APIUserModel.find({currentOrganization: currentOrganizationID});
                Q.all([promiseUsers, promiseAPIs]).then(function(results){
                    usersList.push(results[0]);
                    usersList.push(results[1]);
                    r2.pl = usersList;
                    paramResponse.writeHead(200, {"Content-Type": "application/json"});
                    paramResponse.end(JSON.stringify(r2));
                }).fail(function(r){
                   console.log('scm error in find users', r);
                    r2.er = {ec: 8404, em: 'could not find users '};
                    paramResponse.writeHead(404, {"Content-Type": "application/json"});
                    paramResponse.end(JSON.stringify(r2));
                });
            }
            else {
                r2.er = {ec: 8404, em: 'user not authenticated'};
                paramResponse.writeHead(404, {"Content-Type": "application/json"});
                paramResponse.end(JSON.stringify(r2));
            }


        };
    };
    return Q(r);
}


function getLogoutUser(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function logoutUser() {
        return function getLogoutUzer(paramRequest, paramResponse) {
            var r2 = {
                pl: {loginOut: true},
                er: null
            };

            paramRequest.logout();
            paramResponse.writeHead(200, {"Content-Type": "application/json"});
            paramResponse.end(JSON.stringify(r2));
           // console.log(JSON.stringify(r2));
        };
    };
    return Q(r);
}


function getUserIsAuthorizedChecker(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function verifyAuthen() {
        return function verifyAuthenticatedSessions(paramRequest, paramResponse, paramNext) {
            var r2 = {
                pl: null,
                er: null
            };
            // var = http://localhost/workspace/activities/activityDetails/:activityDetail_id.json
            //console.log("/n /home/login and url " + paramRequest.url.toString() + " compare : " + (paramRequest.url.toString() == '/home/login') );
            if (paramRequest.isAuthenticated()) {
                //check for user authorization using redis ...
                //var varUserID = paramRequest.user.id;
                //check if user has access to the requested resources
                console.log('user id: ' + paramRequest.user.id + ' is authorized ...');
                //console.log(paramRequest);
                return paramNext();

            }
            var allowed = [
                /^\/workspace\/activities\/activity\.json/i//get activity details for response
                ,/^\/workspace\/services\/services\.json/i//POST to services, not the same as POST to service
                ,/^\/workspace\/activities\/activityDetails\//i
                ,/^\/workspace\/services\/serviceDetails\//i
                ,/^\/workspace\/profiles\/v1\/corporateDetails\//i
                ,/^\/workspace\/notifications\/comments\//i
                ,/^\/workspace\/notifications\/mailling\//i
                ,/^\/workspace\/finance\/order\//i
            ],allowedCounter=allowed.length;
            while(--allowedCounter>-1){
                if(allowed[allowedCounter].test(paramRequest.url.toString())){
                    console.log("allowed into special case",paramRequest.url.toString());
                    return paramNext();
                }
            }
            r2.er = {ec: 8401, em: 'user not authorized'};
            paramResponse.writeHead(401, {"Content-Type": "application/json"});
            paramResponse.end(JSON.stringify(r2));
            //console.log(JSON.stringify(r2));
            //return paramResponse.redirect('/'); // If user is not login, user will be redirected to the login page..
        };
    };
    return Q(r);
}


function getContactValidator(m){
    var  r = {pl: null, er:{ec: null, em:null}};

    var contacts = m.pl

};

function scm_getAllUsers(m){


    var r = {pl:null, er:null};

    var deferred = Q.defer();


    var varObjectID =  mongoose.Types.ObjectId;
    var promise1 = APIUserModel.find({"currentOrganization": varObjectID(""+m.pl.currentOrganization)}).exec();
    var promise2 = User.find({"currentOrganization": varObjectID(""+m.pl.currentOrganization)}).exec();


    Q.all([promise1,promise2]).then(

        function(response){

            r.pl = response[0].concat(response[1]);

            deferred.resolve(r)
        },
        function(err){

            r.er = err;

            console.log('scm error----------',err);
            deferred.reject(r);
        })



    return deferred.promise;

};





function scm_getByType(m){

    m.mt = m.mt || {};
    var r = {pl:null, er:null};

    var userType = m.pl.userType;
    var model = User;

    var query = {};

    if(userType != 'all'){
            query.userType = userType;
    }
    if(userType === 'api'){
        model = APIUserModel;
    }
    var filterQuery = []
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'lanzheng.loginName':m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'createdOn':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'createdOn':{'$lte' : dateplus}})     }

    if(filterQuery.length) query['$and'] = filterQuery;

    return Q.all([
        function(){

            return model.find(query).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec();
        }(),
        function(){
            return model.find(query).count().exec();
        }()
    ])
    .then(function(data){
        m.mt.tc = data[1];
        return Q.resolve({er:null,pl:data[0],mt: m.mt});
    }  ,  function reject(er){
        return Q.reject({pl:null,er:{ec:1001,em:'In scm_getByType:'+er+' '}});
    });

};










function scm_disableEnableUser(m){


    var r = {pl:null, er:null};

    var deferred = Q.defer();
    var userType = m.pl.userType;
    var model = User;

    var query = {_id: m.pl._id};


    if(userType === 'api'){
        model = APIUserModel;
    }

    model.findOne(query, function(paramError, paramJson){

        if(!paramError){

                    if(paramJson){
                        paramJson.accountStatus = m.pl.newStatus;
                        paramJson.save(function(err){

                            if(!err){
                                r.pl =  paramJson
                                deferred.resolve(r)

                            }
                            else{

                                r.er = err;
                                console.log('scm error: could not save new status----------',err);
                                deferred.reject(r);

                            }
                        })
                    }

        }
        else{

            r.er = paramError;
            console.log('scm error----------',err);
            deferred.reject(r);
        }

    });

    return deferred.promise;

};




//var m = {"pl": null, "er": null};
//m.pl = {users: [{account:'leo@lbs.com', valid:false }, {account:'leo@lbs.com', valid:false }, {account:'leo@lbs.com', valid:false }]};

function validateUsersList(m){

    var r = {"pl": null, "er": null};
    r.pl = m.pl;
    var i = 0;
    var j = m.pl.users.length;
    var deferred = Q.defer();

    validateUserLogin(m.pl.users[i].account, callBackMethod);

    function callBackMethod(error, user) {
        if (user) {
            r.pl.users[i].valid = true;
            i = i + 1;
            if (i===j)
            {
                deferred.resolve(r);
            }
            else {
                validateUserLogin(m.pl.users[i].account, callBackMethod);
            }
        }
        else {
            r.pl.users[i].valid = false;
            i = i + 1;
            if (i===j)
            {
                deferred.resolve(r);
            }
            else {
                validateUserLogin(m.pl.users[i].account, callBackMethod);
            }
        }
    }

    function validateUserLogin(paramAccount , callBackMethod){
        User.findOne({'lanzheng.loginName': paramAccount},callBackMethod);
    }

    return deferred.promise;
}



function scm_getUserByLoginInfo(m){


    var r = {pl:null, er:null};

    var deferred = Q.defer();

    User.findLanzhengUser(m.pl.loginInfo)
        .then(function(user){

                        r.pl = user;
                        deferred.resolve(r)


        },
        function(err){

            r.er = err;
            console.log('scm error in find user----------',err);
            deferred.reject(r);
        })

    return deferred.promise;

}







function scm_checkVerificationCodeAndSaveContact(m){


    var r = {pl:{status:false}, er:null};

    var deferred = Q.defer();


    User.findLanzhengUser(m.pl.userInfo)
        .then(function(user){


            if(user&&user.lanzheng.verificationCode.code == m.pl.code){//todo also check if the verification code is within 30 min

                user.lanzheng.mobile = m.pl.mobile;
                user.save(function(err, returnUser){

                    if(!err){
                        r.pl.status = true;
                        deferred.resolve(r)
                    }
                    else{

                        r.er = err;
                        console.log('scm error in save user mobile----------',err);
                        deferred.reject(r);

                    }

                })

            }
            else{
                deferred.resolve(r)
            }


        },
        function(err){

            r.er = err;
            console.log('scm error in find user----------',err);
            deferred.reject(r);
        })

    return deferred.promise;

}

function scm_checkVerificationCodeAndSavePassword(m){

    console.log('scm scm_checkVerificationCodeAndSavePassword---');
    var r = {pl:{status:false,user:null}, er:null};

    var deferred = Q.defer();


    User.findLanzhengUser(m.pl.userInfo)
        .then(function(user){


            if(user&&user.lanzheng.verificationCode.code === m.pl.code){//todo also check if the verification code is within 30 min

                var oUser = new User();


                var pw = oUser.generateHash(m.pl.newPassword);


                user.lanzheng.hashPassword = pw
                user.save(function(err, returnUser){


                    if(!err){
                        r.pl.status = true;
                        r.pl.user = returnUser;
                        deferred.resolve(r)
                    }
                    else{

                        r.er = err;
                        console.log('scm error in save user password----------',err);
                        deferred.reject(r);

                    }

                })

            }
            else{
                deferred.resolve(r)
            }


        },
        function(err){

            r.er = err;
            console.log('scm error in find user----------',err);
            deferred.reject(r);
        })

    return deferred.promise;

}


function scm_saveVerificationCode(m){


    console.log('scm save verification code---');


    var r = {pl:null, er:null};

    var deferred = Q.defer();

    User.findLanzhengUser(m.pl.userInfo)
        .then(function(user){

            if(user){

                user.lanzheng.verificationCode.code = m.pl.code;
                user.lanzheng.verificationCode.issueDate = new Date();

                user.save(function(err, user){

                    if(!err){
                        r.pl = user;
                        deferred.resolve(r)
                    }
                    else{

                        r.er = err;
                        console.log('scm error in save user verification code----------',err);
                        deferred.reject(r);

                    }

                })

            }
            else{

                r.er = 'user not found';
                console.log('scm error in user not found----------');
                deferred.reject(r);

            }


        },
        function(err){

            r.er = err;
            console.log('scm error in find user----------',err);
            deferred.reject(r);
        })

    return deferred.promise;

}


function scm_BindWXuser(m){
    var r = {pl:null, er:null};
    var deferred = Q.defer();
    //var m = {pl:{"code":"03140b54055f2da36a123fa4ba2949cg", "loginName": "jack"}};
    getWXUserInfo(m).then(function(r){
        //@todo find user and add weixin id, as we did for mobile phone, after this user can also login with weixin account id

    })
    return deferred.promise;
}

function scm_GetWXuser(m){
    //var m = {pl:{"code":"03140b54055f2da36a123fa4ba2949cg"}};
  return  getWXUserInfo(m);
}



function scm_SetUserWeixinInfo(m){


    var r = {pl:null, er:null};

    var deferred = Q.defer();

    User.findLanzhengUser(m.pl.userInfo)
        .then(function(user){


            if(user){

                user.lanzheng.weixin.name = m.pl.weixin.name;
                user.lanzheng.weixin.openID = m.pl.weixin.openID;

                user.save(function(err, returnUser){

                    if(!err){
                        r.pl = returnUser;
                        deferred.resolve(r)
                    }
                    else{
                        r.er = err;
                        console.log('scm error in save user mobile----------',err);
                        deferred.reject(r);

                    }

                });

            }
            else{

                r.er = 'user not found!';
                console.log('user not found!');
                deferred.reject(r);
            }


        },
        function(err){

            r.er = err;
            console.log('scm scm_SetUserWeixinInfo error:--------',err);
            deferred.reject(r);
        });

    return deferred.promise;

}



exports.operations = [
                        init,
                        getPassport,
                        getVerifyUserLogin,
                        getRegisterUser,
                        getRegisterWithCallback,
                        getSessionUser,
                        getLogoutUser,
                        getUserIsAuthorizedChecker,
                        validateUsersList,
                        getOrganization,
                        getCreateUser,
                        getVerifyAPILogin,
                        getOrganizationUsers,
                        scm_getAllUsers,
                        scm_getByType,
                        scm_disableEnableUser,
                        scm_getUserByLoginInfo,
                        scm_saveVerificationCode,
                        scm_checkVerificationCodeAndSaveContact,
                        scm_checkVerificationCodeAndSavePassword,
                        scm_BindWXuser,
                        scm_SetUserWeixinInfo,
                        scm_GetWXuser
                     ];

// re-export ops (for testing)
exports.operations.forEach(function (op) {
    exports[op.name] = op;
});
