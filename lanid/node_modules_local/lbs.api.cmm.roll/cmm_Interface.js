var Q = require('q');
var message;
var mongodbConfigs = require('./configs/mongooseConfigs.js');
var postgredbConfigs = require('./configs/sequelizeConfigs.js');
var standardConfigs = require('./configs/standardConfigs.js');
var navigationConfigs = require('./configs/navigationConfigs.js');
var bucketConfigs = require('./configs/bucketConfigs.js');
var redisConfigs = require('./configs/redisConfigs.js');
var smsConfigs = require('./configs/smsConfigs.js');
var smtpConfigs = require('./configs/smtpConfigs.js');
var ivsConfigs = require('./configs/ivsConfigs.js');
var alipayConfigs = require('./configs/alipayConfigs.js');
var weixinpayConfigs = require('./configs/weixinpayConfigs.js');

function init(m) {
  var r = {pl: null , er:null};
  //console.log(m);
  if(!(m.pl.fn instanceof Function)) {
    console.log('cmm initiation m.pl.fn contains no function...');
    r.er = { em: 'Payload pl contains no function'};
    return Q.fail(r);
  }
  else {
    exports.message = m.pl.fn;
    console.log('cmm: cmm is ready for system bootstrapping...');
    r.pl  = {pm: 'cmm initialization done! '};
    return Q(r)
  }
}
function getConfigs(namespace, dependencyName) {
  if(namespace === 'module1' && dependencyName === 'internal_service') {
    return {url: 'http://government.cn/api/v1/call'};
  }
  else if(namespace==='mdm' && dependencyName === 'smtp'){
    //console.log(standardConfigs.getSMTPConfigs());
    return standardConfigs.getSMTPConfigs();
  }
  else {
    console.log('cmm: Unknown namespace: ' + namespace + '  dependency:' + dependencyName);
  }
}

function dependency(m) {
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();

  if(m.pl.dn === 'mongoose') {
    var mongooseODM  = mongodbConfigs.getMongoose(m.ns);
     mongooseODM.connection.on('connected', function(){
       r.pl = { fn: mongooseODM};
       console.log('cmm: sending mongodb dependency to ' + mongooseODM.connection.name);
       deferred.resolve(r);
     });
  }

  else if (m.pl.dn === 'redis') {
    var redisClient = redisConfigs.getRedis(m.ns);
    redisClient.on("connect", function () {
      r.pl = {fn: redisClient};
      console.log('cmm: sending redis dependency to ' + m.ns);
      deferred.resolve(r);
    });
  }

  else if(m.pl.dn === 'sequelize') {
    console.log('trying to get sequelize ..');
    var sequelizeORM  = postgredbConfigs.getSequelize(m.ns);
    // check database connection
    sequelizeORM.authenticate().complete(function(err) {
      if (err) {
        r.pl = { fn: err};
        console.log('cmm: err  ', err);
        deferred.reject(r);
        console.log('Unable to connect to the database: ', err);
      } else {

        console.log('cmm: sending postgresdb dependency to ' + m.ns );
        r.pl = { fn:sequelizeORM};
        //console.log('sequelize object ..', r.pl.fn);
        deferred.resolve(r);
      }
    });
  }

  else if (m.pl.dn === 'bsport'){
    r.pl = {fn: standardConfigs.getBSPort()};
    return Q(r);
  }

  else if (m.pl.dn === 'alipayconfig'){
      r.pl = {fn: alipayConfigs.getAlipayConfig()};
      return Q(r);
  }

  else if (m.pl.dn === 'weixinpayconfig'){
      r.pl = {fn: weixinpayConfigs.getWeixinpayConfig()};
      return Q(r);
  }
  else if (m.pl.dn === 'getWechatOpenID'){
      r.pl = {fn: weixinpayConfigs.getWechatOpenID()};
      return Q(r);
  }
  else if (m.pl.dn === 'getWXUserInfo'){
      r.pl = {fn: weixinpayConfigs.getWXUserInfo()};
      return Q(r);
  }
  else if (m.pl.dn ==='navigation'){
    r.pl = {fn:navigationConfigs.getNavigations()};
    return Q(r);
  }

  else if (m.pl.dn ==='bucketManager'){
    //console.log("requesting bucket manager ...");
    r.pl = {fn:bucketConfigs.getBucketManager()};
    return Q(r);
  }

  else if (m.pl.dn ==='bucketServers'){
      r.pl = {fn:bucketConfigs.getBucketServers()};
      return Q(r);
  }

  else if (m.pl.dn ==='smsClient'){

      r.pl = {fn:smsConfigs.getSMSClient(m.ns)};
      return Q(r);
  }

  else if (m.pl.dn ==='ivsClient'){

      r.pl = {fn:ivsConfigs.getIVSClient(m.ns)};
      return Q(r);
  }

  else if (m.pl.dn ==='smtpClient'){
      r.pl = {fn:smtpConfigs.getSMTPClient(m.ns)};
      return Q(r);
  }

  else {
    // delegate back instantiation to the caller
    console.log('cmm: delegating instantiation of ' + m.pl.dn + ' back to ' + m.ns);
    return exports.message({
      op: 'instantiate',
      ns: m.ns,
      pl: {
        dn: m.pl.dn, //dependency name
        dc: getConfigs(m.ns, m.pl.dn) //dependency configurations
      }
    });
  }
  return deferred.promise;
}

module.exports.operations = [init, dependency];

//re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
})