#!/bin/bash

# generate the directory names from UUID
ONE=$( echo "$FILE_UUID" | cut -c 1)
TWO=$( echo "$FILE_UUID" | cut -c 2)
THREE=$( echo "$FILE_UUID" | cut -c 3)

# create destination path and install cleanup hook
DEST_PATH=${IMAGE_ROOT}/${ONE}/${TWO}/${THREE}/${FILE_UUID}
echo "Creating $DEST_PATH"
if [ -d "$DEST_PATH" ]; then
  echo "Warning: $DEST_PATH already exist, will overwrite (this may be normal if retransferring)"
else
  mkdir -p ${DEST_PATH}
fi

function finish {
  RV=$?
  if [ "$RV" -ne "0" ]; then
    echo "Deleting $DEST_PATH"
    rm -rf "$DEST_PATH"
  fi
  exit $RV
}
trap finish INT TERM EXIT

# read image
ORIGINAL_FILE=${DEST_PATH}/${FILE_UUID}.${FILE_EXT}
echo "stdin to $ORIGINAL_FILE"
cat > $ORIGINAL_FILE || exit 1000

# check file format
IDENTIFY_OUTPUT=`$IDENTIFY -quiet ${ORIGINAL_FILE}`
[[ "$?" -ne 0 ]] && echo "identify failed on file" && exit 2000
echo ""
echo "$IDENTIFY_OUTPUT"
PHOTO_FORMAT=$( echo "$IDENTIFY_OUTPUT" | cut -d " " -f 2 )
PHOTO_DIMEMSION=$( echo "$IDENTIFY_OUTPUT" | cut -d " " -f 3 )
PHOTO_SIZE=$( echo "$IDENTIFY_OUTPUT" | cut -d " " -f 7 )

echo -n "PHOTO_FORMAT $PHOTO_FORMAT PHOTO_DIMEMSION $PHOTO_DIMEMSION PHOTO_SIZE $PHOTO_SIZE"

IS_FILE_EXT=$(echo "$IDENTIFY_OUTPUT" | grep ${FILE_EXT})
[[ -z "$IS_FILE_EXT" ]] && echo "Not a ${FILE_EXT} file" && exit 3000

# convert (exit on failure)
cd ${DEST_PATH}
$CONVERT ${FILE_UUID}.${FILE_EXT} -resize 43x55 ${FILE_UUID}_s.${FILE_EXT} || exit 4000
$CONVERT ${FILE_UUID}.${FILE_EXT} -resize 86x110 ${FILE_UUID}_m.${FILE_EXT} || exit 5000
$CONVERT ${FILE_UUID}.${FILE_EXT} -resize 172x220 ${FILE_UUID}_l.${FILE_EXT} || exit 6000

createLocalSymlink ${FILE_EXT} ${IMAGE_ROOT}

# success
echo "OK ${ORIGINAL_FILE}"
exit 0