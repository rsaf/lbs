/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//sample http://mongoosejs.com/docs/connections.html#replicaset_connections
//mongoose.connect(uri, options);
//mongoose.connect('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]' [, options]);




var mongooseODMs = [];

//function getDBServerConfig(param_DB_Name){
//    //default values
//    var config = {
//        uri: 'mongodb://localhost/' + param_DB_Name
//         ,options:{
//         db: { native_parser: true }
//         ,server: { poolSize: 10 }
//         ,replset: { rs_name: null }
//         //,user: 'myUserName',
//         //,pass: 'myPassword'
//         }
//    };
//
//    if(process.env.STAGE ==='production')
//    {
//
//       return  config = {
//            uri: 'mongodb://pika,piko,puma/' + param_DB_Name
//            ,options:{
//                db: { native_parser: true }
//                ,server: { poolSize: 10 }
//                ,replset: { rs_name: 'lanid' }
//                //,user: 'myUserName',
//                //,pass: 'myPassword'
//            }
//        };
//
//
//
//    }
//    else if(process.env.STAGE ==='development')
//    {
//
//        return  config = {
//            uri: 'mongodb://bosbok,bosvark/' + param_DB_Name
//            ,options:{
//                db: { native_parser: true }
//                ,server: { poolSize: 10 }
//                ,replset: { rs_name: 'lanid' }
//                //,user: 'myUserName',
//                //,pass: 'myPassword'
//            }
//        };
//
//    }
//    else {
//        return config;
//    }
//}


module.exports.getMongoose  = function(paramDB){

        //var dbConfig = getDBServerConfig(paramDB);
        //var connString = 'mongodb://'+ getDBServer() + '/'  + paramDB + '?poolSize=2';
        //var connString = 'mongodb://'+ dbConfig.host + '/'  + paramDB + '?poolSize=' + dbConfig.pool;

        var  dbConfig = require('./configs.json').mgconfig;
        var mongooseODM = require('mongoose');
        mongooseODM = new mongooseODM.Mongoose();
        mongooseODM.connect(dbConfig.uri + paramDB, dbConfig.options);
        mongooseODMs.push(mongooseODM);
        console.log('cmm: connecting to mongodb for '+ mongooseODM.connection.name);

        return mongooseODM;
};

process.on('SIGINT', function(){

    for (var i in mongooseODMs){
        console.log('db connection ready state: ' + mongooseODMs[i].connection.readyState );
        mongooseODMs[i].connection.close(function(){
            console.log('Mongoose disconnected due to application termination...');
            //conn = mongooseODM.connection;

    });
    }
    process.exit(0);
});

