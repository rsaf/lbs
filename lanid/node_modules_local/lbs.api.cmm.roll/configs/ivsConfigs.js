/**
 * Created by leo on 4/30/15.
 */

module.exports.getIVSClient  = function(param_module_ns){

    var ivsConfig = require('./configs.json').ivsconfig;
    var soap = require('soap');
    var Q = require('q');
    var parser = require('xml2js').Parser({explicitArray : false});

    if((ivsConfig.idlicense && ivsConfig.photolicense && ivsConfig.endpoint)){
        console.log("CMM: IVS CONFIGURATIONS FOUND.. TRYING TO CONNECT OT GOVERNMENT SERVICES..., function getIVSClient ");

        //var message = {
        //    pl:{
        //        "sfz": "", //shenfenzheng or user national id number
        //        "xm": "",  //xingming or user full name
        //        "zz": ""   //zhengzhao or user id photo buffer //must be provided when executing the validatePhoto method.
        //    },
        //    "method":""   //method to be executed, this could take value 'validateID' or 'validatePhoto'
        //}

        return  function validateUserInfo(m) {
            var params = {
                "in0": null,
                "in1": null
            };
            var r = {"pl": null, "er": null};
            var deferred = Q.defer();

            soap.createClient(ivsConfig.endpoint, function (err, ivsClient) {
                if(ivsClient)
                console.log("IVS CLIENT DESCRIPTION",ivsClient.describe());

                if (err) {
                    r.er = "An error occurred while getting validation service wsdl, function getIVSClient";
                    deferred.reject(r);
                }
                else {


                    if (m.method === 'validateID') {
                        if(m.pl.sfz &&  m.pl.xm ){

                            params.in0 = ivsConfig.idlicense;
                            params.in1 = '<?xml version="1.0" encoding="UTF-8"?><ROWS><ROW><LZGMSFHM>' + m.pl.sfz + '</LZGMSFHM><LZXM>' + m.pl.xm + '</LZXM></ROW></ROWS>';

                        }
                        else{
                            r.er = "An error occurred while getting validation service wsdl, function getIVSClient";
                            deferred.reject(r);
                        }

                    }
                    else if (m.method === 'validatePhoto') {
                        if( m.pl.sfz &&  m.pl.xm && m.pl.zz ){
                            params.in0 = ivsConfig.photolicense;
                            params.in1 = '<?xml version="1.0" encoding="UTF-8" ?><ROWS><ROW><LZGMSFHM>' + m.pl.sfz + '</LZGMSFHM><LZXM>' + m.pl.xm + '</LZXM><LZXP>' + m.pl.zz.toString('base64') + '</LZXP></ROW></ROWS>';
                        }
                        else{
                            r.er = "An error occurred while getting validation service wsdl, function getIVSClient";
                            deferred.reject(r);
                        }

                    }
                    console.log("Method:", m.method,"SFZ:", m.pl.sfz,"XM", m.pl.xm);
                    console.log("Executing with params",params.in0,",",params.in1?params.in1.substring(0,200):"null","...");
                    try {
                        ivsClient.execute(params, function (err, result) {
                            console.log("Back from execute: error", err, "with result", result);
                            if (result) {
                                try {
                                    parser.parseString(result.out, function (err, json) {
                                        if (json) {
                                            r.pl = json.ROWS.ROW;
                                            deferred.resolve(r);
                                        }
                                        else {
                                            r.er = "error occured parsing xml results , function ivsClient.execute";
                                            deferred.reject(r);
                                        }

                                    });
                                } catch (e) {
                                    deferred.reject(e);
                                }
                            }
                            else {
                                r.er = "error occured while validating user , function ivsClient.execute";
                                deferred.reject(r);
                            }

                        });
                    } catch (e) {
                        console.log("Error while executing ivsCLient.",e)
                        deferred.reject(e);
                    }

                }

            });

            return deferred.promise;
        }

}
    else {

        console.log("CMM: No license or endpoint found for the information verification service, a mock object will be return to ... ", param_module_ns);
        //var message = {
        //    pl:{
        //        "sfz": "", //shenfenzheng or user national id number
        //        "xm": "",  // xingming or user full name
        //        "zz": "",   // zhengzhao or user id photo buffer //must be provided when executing the validatePhoto method.
        //         expect: "" //
        //    },
        //    "method":""   // method to be executed, this could take value 'validateID' or 'validatePhoto'
        //}
        return function validateUserInfoMock(m) {
            var r = {"pl": null, "er": null};
            console.log("VALIDATE USER INFO MOCK:",m);

            if (m.method === 'validateID') {
                    r.pl = { LZBIZCODE: 'NO',
                        LZGMSFHM: '一致',
                        LZBIZDESC: ' 身份证号:一致 姓名:一致',
                        LZNAME: '***',
                        LZXM: '一致',
                        LZXP: '',
                        st:true,
                        LZSID: '*****************' };

                  return Q(r)
            }

            else if (m.method === 'validatePhoto') {
                r.pl = { LZBIZCODE: 'NO',
                        LZGMSFHM: '一致',
                        LZBIZDESC: '身份证号:一致 姓名:一致 照片分值:53 照片分析结果:系统判断为同一人',
                        LZXPFS: '53',
                        LZNAME: '***',
                        LZXM: '一致',
                        LZXPFX: '系统判断为同一人',
                        LZSID: '*****************' }
                return Q(r);
            }

        }
    }
};
