/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

'use strict';
var mongoose = null; //mongoose object
var message = null;   // message function
var storageBucketManager = null; // photo physical storage handle

var StandardSchema = null;
var UsageSchema = null;

var StandardModel = null;
var UsageModel = null;
var PhotoModel = null;
var PhotoSchema = null;

var Q = require('q');
var lib = require('lib');

function init(m) {
    var r = {pl: null, er: ''};
    if (!(m.pl.fn instanceof Function)) {
        r.er = {ec: null, em: 'Payload pl is not a function'};
        return Q.fail(r);
    }
    message = m.pl.fn;
    var p1 = message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    });
    var p2 = message({
        op: 'dependency',
        pl: {dn: 'bucketManager'}
    });
    return Q.all([p1, p2]).then(function (r1) {  //the promise for this init is completed once we get all dependencies
        //console.log(r);
        mongoose = r1[0].pl.fn;
        storageBucketManager = r1[1].pl.fn;
        console.log('\npmm: pmm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        console.log('\npmm: pmm received photo storage bucket .. ');

        StandardSchema = require("./models/Standard.js")(mongoose);
        UsageSchema = require("./models/Usage.js")(mongoose);
        PhotoSchema = require("./models/Photo.js")(mongoose);
        PhotoModel = mongoose.model('photos', PhotoSchema); //exposes static
        StandardModel = mongoose.model('standards', StandardSchema);
        UsageModel = mongoose.model('usages', UsageSchema);

        var r = {pl: {pm: 'pmm initialization done! '}, er: null};
        return Q(r);
    });

}

//    var m_photo = {ns: null,op:'uploadPhoto', pl: null};
//    m_photo.pl = {
//        uID:'54c1c79c4d754999038abf1b',
//        oID:'54c1c79c4d754999038abf1c',
//        imageData:'data',
//        imageExt:'jpg',
//        sg:{code:10, text:原照}, //Stage, possible values {10 'original',20 'inspection', 30 'correction', 40 'processing', 50 'activity', 60 'personal', 70 'corporate' }
//        st:{code:100, text:等待},  //Status, possible values {100: pending, 200: success, 300: rejected }
//        rc:'54c1c79c4d754999038abf1b', //business activity response code code
//        tc:'54c1c79c4d754999038abf1b', // business activity transaction code
//        uri: null // String to physical photo location // AC1279908_SCM15900655434_UC12996987669_OC_2079877898.jpg
//        ign: ''  // imageName
//    };
//
//
//function pmm_uploadPhoto(m) {
//    console.log('\npmm: in uploading image\n ');
//    var r = {"pl": null, "er": null};
//    var deferred = Q.defer();
//    storageBucketManager('uploadimage', null, m.pl.imageData).then(function (r) {
//       console.log('pmm: reply from upload bucket function ..\n')
//        m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.imageExt;
//        delete m.pl.imageData;
//        delete m.pl.imageExt;
//        console.log(m);
//
//        PhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
//            if (!paramError) {
//                r.pl = paramPhotoJson;
//                deferred.resolve(r);
//            }
//            else {
//                r.er = {ec:'', em: paramError};
//                deferred.reject(r);
//            }
//        });
//    }).fail(function (r) {
//        deferred.resolve(r);
//    });
//    return deferred.promise;
//}



function pmm_uploadPhoto(m) {
    console.log('\npmm: in uploading photo\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    // executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadphoto', null, m.pl.ifm,  m.pl.photoData, null).then(function (r) {
        //console.log('dmm: reply from upload bucket function ..\n')
        m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.ifm;
        m.pl.photourl = m.pl.uri;
        m.pl.urll= '/photos/' + r.pl.uuid +'_l' +'.' + m.pl.ifm;
        m.pl.urlm= '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;
        m.pl.urls= '/photos/' + r.pl.uuid +'_s' +'.' + m.pl.ifm;
        m.pl.pp.ofs = r.pl.ps;
        m.pl.pp.fm = m.pl.ifm;
        m.pl.pp.ifr = r.pl.pd;

        delete m.pl.PhotoData;
        delete m.pl._id; // for create the _id must be autoset by mongodb
        PhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
            if (!paramError) {

                r.pl = paramPhotoJson;
                deferred.resolve(r);
            }
            else {

                console.log('pmm paramError--',paramError);

                r.er = {ec:'', em: paramError};

                deferred.reject(r);
            }
        });
    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

function pmm_setCorrectionPhotoAsDone(m) {

    console.log('\npmm: in pmm_setCorrectionPhotoAsDone photo\n ');


    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

            var uuid = lib.getUuidFromUri(m.pl.uri);

            console.log('uuid extracted-----',uuid);

            storageBucketManager('uploadphoto', uuid, m.pl.ifm,  m.pl.photoData, null).then(function (r) {


                delete m.pl.PhotoData;
                delete m.pl._id; // for create the _id must be autoset by mongodb

                var query = {uri: m.pl.uri,sg:'30',ds:{"$ne":true}}
               // var update = lib.updateTransformjson(m).pl;

                PhotoModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {


                    if (!paramError) {


                        paramPhotoJson.st= '300';
                        paramPhotoJson.pp.ofs = m.pl.pp.ofs;
                        paramPhotoJson.pp.isd = m.pl.pp.isd;

                        paramPhotoJson.save(function (err) {

                            if(!err){
                                console.log("STATUS BEING SET TO 300");
                                r.pl = paramPhotoJson;
                                deferred.resolve(r);
                            }
                            else{
                                console.log("STATUS NOT BEING SET TO 300");

                                console.log('pmm paramError--',err);
                                r.er = {ec:'', em: err};
                                deferred.reject(r);

                            }


                        });


                    }
                    else {

                        console.log('pmm paramError--',paramError);

                        r.er = {ec:'', em: paramError};

                        deferred.reject(r);
                    }
                });

            })


    return deferred.promise;


}

function pmm_getDownloadedPhotosURLByBusinessCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    PhotoModel.findOne(lib.authTransform({uri: m.pl.uri},'r',credential), function (paramError, paramPhotoProperty) {
        if (!paramError) {
            r.pl = paramPhotoProperty;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function pmm_updatePhotoByID(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {uri: m.pl.uri};
    var update = m.pl;
    var options = {new: true};

    PhotoModel.findOneAndUpdate(lib.authTransform(query,'w',credential), update, options, function (paramError, paramPhotoProperty) {
        if (!paramError) {
            r.pl = paramPhotoProperty;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function pmm_deletePhotoByID(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {uri: m.pl.uri};
    var options = {select: '*'};

    PhotoModel.findOneAndRemove(lib.authTransform(query,'w',credential), options, function (paramError, paramPhotoProperty) {
        if (!paramError) {
            r.pl = paramPhotoProperty;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_createStandard(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    StandardModel.create(lib.createTransformjson(m).pl, function (paramError, paramData) {
        if (!paramError) {
            r.pl = paramData;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_readStandardByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    StandardModel.findOne(lib.authTransform({sc: m.pl.sc},'r',credential), function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_readStandardByType(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    StandardModel.findOne(lib.authTransform({it: m.pl.it},'r',credential), function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function pmm_readAllStandards(m) {
    /*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    StandardModel.find(function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;
            console.log('------------readAllStandards :  ',paramStandard);


            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
    */
    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {},
        model = StandardModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'abd.ac':m.mt.sk},{'abd.an': m.mt.sk},{'abd.pcn': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){

            return model.find(query).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec();
        }(),
        function(){
            return model.find(query).count().exec();
        }()
    ])
    .then(function(data){
        m.mt.tc = data[1];
        return Q.resolve({er:null,pl:data[0],mt: m.mt});
    }  ,  function reject(er){
        return Q.reject({pl:null,er:{ec:1001,em:'In pmm_readAllStandards:'+er+' '}});
    });
}


function pmm_getUnderProcessingPhotosByOwner(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {'ow.uid': m.pl.ow.uid,'ow.oid': m.pl.ow.oid,sg:'10',ds:{"$ne":true}}
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    PhotoModel.find(lib.authTransform(query,'r',credential),function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function pmm_getIdphotosByOwner(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {'ow.uid': m.pl.ow.uid,'ow.oid': m.pl.ow.oid,sg:'30',st:'300',ds:{"$ne":true}}
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    PhotoModel.find(lib.authTransform(query,'r',credential),function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function pmm_getPhotosForInspection(m) {

    console.log('get photo for inspection-----');

/*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {'ac': m.pl.ac,sg:'20',st:'100',ds:{"$ne":true}}

    PhotoModel.find(query,function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            console.log('returned json----', paramJson);
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;*/

    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {ac: m.pl.ac, st: '100', sg : '20',ds:{"$ne":true}},
        model = PhotoModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'can':m.mt.sk},{'rc': m.mt.sk},{'ac': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)
    {
        var dateplus = new Date(m.mt.ed);
        dateplus.setDate(dateplus.getDate() + 1)
        filterQuery.push({'ct.cd':{'$lte' : dateplus}})
    }
    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return model.find(query).sort('-ct.cd').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }(),
        function(){
            return model.find(query).count().exec()
        }()
    ])
        .then(function(data){
            m.mt.tc = data[1];
            return Q.resolve({er:null,pl:data[0],mt: m.mt});
        }  ,  function reject(er){
            return Q.reject({pl:null,er:{ec:1001,em:'In pmm_getActivitiesInfo:'+er+' '}});
        });
}


function pmm_getQualifedPhotos(m) {

    console.log('pmm_getQualifedPhotos-----');

/*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {ac: m.pl.ac,sg:'20',st:'300',ds:{"$ne":true}}

    PhotoModel.find(query,function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            console.log('returned json----', paramJson);
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;*/

    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {ac: m.pl.ac, st: '300', sg: '20',ds:{"$ne":true}},
        model = PhotoModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'can':m.mt.sk},{'rc': m.mt.sk},{'ac': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)
    {
        var dateplus = new Date(m.mt.ed);
        dateplus.setDate(dateplus.getDate() + 1)
        filterQuery.push({'ct.cd':{'$lte' : dateplus}})
    }
    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return model.find(query).sort('-ct.cd').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }(),
        function(){
            return model.find(query).count().exec()
        }()
    ])
        .then(function(data){
            m.mt.tc = data[1];
            return Q.resolve({er:null,pl:data[0],mt: m.mt});
        }  ,  function reject(er){
            return Q.reject({pl:null,er:{ec:1001,em:'In pmm_getActivitiesInfo:'+er+' '}});
        });
}


function pmm_getUnqualifedPhotos(m) {

    console.log('pmm_getQualifedPhotos-----');
/*

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {ac: m.pl.ac,sg:'20',st:'400',ds:{"$ne":true}}

    PhotoModel.find(query,function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            console.log('returned json----', paramJson);
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;*/

    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {ac: m.pl.ac, st: '400',sg: '20',ds:{"$ne":true}},
        model = PhotoModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'can':m.mt.sk},{'rc': m.mt.sk},{'ac': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)
    {
        var dateplus = new Date(m.mt.ed);
        dateplus.setDate(dateplus.getDate() + 1)
        filterQuery.push({'ct.cd':{'$lte' : dateplus}})
    }
    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return model.find(query).sort('-ct.cd').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }(),
        function(){
            return model.find(query).count().exec()
        }()
    ])
        .then(function(data){
            m.mt.tc = data[1];
            return Q.resolve({er:null,pl:data[0],mt: m.mt});
        }  ,  function reject(er){
            return Q.reject({pl:null,er:{ec:1001,em:'In pmm_getActivitiesInfo:'+er+' '}});
        });
}


function pmm_getPhotoByUri(m) {



    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    var query = {ac: m.pl.ac,uri: m.pl.uri,ds:{"$ne":true}}
    console.log('pmm pmm_getPhotoByUri-----',query,credential);

    PhotoModel.findOne(lib.authTransform(query,'r',credential),function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            console.log('returned json----', paramJson);
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError?paramError:"No result found"};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}


function pmm_getActivitiesInfo(m){

/*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    PhotoModel.aggregate([{$match:{st: m.pl.st,sg: m.pl.sg}},{$group:{_id:"$can", photos:{$push:"$ac"}}}], function(paramError, paramJson){


        if (paramJson) {

            r.pl = paramJson;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }

    })


    return deferred.promise;*/

    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {st: m.pl.st,sg: m.pl.sg},
        model = PhotoModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'can':m.mt.sk},{'rc': m.mt.sk},{'ac': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)
    {
        var dateplus = new Date(m.mt.ed);
        dateplus.setDate(dateplus.getDate() + 1)
        filterQuery.push({'ct.cd':{'$lte' : dateplus}})
    }
    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);
    return Q.all([
        function(){
            var agg = model.aggregate().match(query).group({_id:"$can", photos:{$push:"$ac"}})
            return agg.exec()
        }(),
        function(){
            return model.find(query).count().exec()
        }()
    ])
    .then(function(data){
        m.mt.tc = data[1];
        return Q.resolve({er:null,pl:data[0],mt: m.mt});
    }  ,  function reject(er){
        return Q.reject({pl:null,er:{ec:1001,em:'In pmm_getActivitiesInfo:'+er+' '}});
    });
}



function pmm_getCorrectionPhotosByStatus(m) {

    console.log('pmm_getCorrectionPhotosByStatus-----');
/*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {ac: m.pl.ac,sg:'30',st: m.pl.st,ds:{"$ne":true}}

    PhotoModel.find(query,function (paramError, paramJson) {
        if (paramJson) {

            r.pl = paramJson;
            console.log('returned json----', paramJson);
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
    */
    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {ac: m.pl.ac, st: m.pl.st,sg: '30',ds:{"$ne":true}},
        model = PhotoModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'can':m.mt.sk},{'rc': m.mt.sk},{'ac': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)
    {
        var dateplus = new Date(m.mt.ed);
        dateplus.setDate(dateplus.getDate() + 1)
        filterQuery.push({'ct.cd':{'$lte' : dateplus}})
    }
    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return model.find(query).sort('-ct.cd').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }(),
        function(){
            return model.find(query).count().exec()
        }()
    ])
        .then(function(data){
            m.mt.tc = data[1];
            return Q.resolve({er:null,pl:data[0],mt: m.mt});
        }  ,  function reject(er){
            return Q.reject({pl:null,er:{ec:1001,em:'In pmm_getActivitiesInfo:'+er+' '}});
        });
}

function pmm_SubmitPhotoToInspection(m) {


    console.log('pmm: in pmm_SubmitPhotoToInspection\n ');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    var oldUri = m.pl.uri;

   // var uuid = oldUri.slice(oldUri.lastIndexOf('/') + 1 , oldUri.lastIndexOf('.'));

      var uuid = lib.getUuidFromUri(oldUri);

    storageBucketManager('copyphoto', uuid, m.pl.pp.fm).then(function (r) {


        m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.pp.fm;
        m.pl.photourl = m.pl.uri;
        //Soooooo
        m.pl.urll= '/photos/' + r.pl.uuid +'_l' +'.' + m.pl.pp.fm;
        m.pl.urlm= '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.pp.fm;
        m.pl.urls= '/photos/' + r.pl.uuid +'_s' +'.' + m.pl.pp.fm;
        m.pl.sg = '20'  //inspection;
        m.pl.st = '100'  //pending;

        delete m.pl._id; // for create the _id must be autoset by mongodb

        m.pl._id = new mongoose.Types.ObjectId;
        console.log('existing payload .....', m.pl._id);

        PhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
            if (!paramError) {

                r.pl = paramPhotoJson;
                r.status = true;

                deferred.resolve(r);
            }
            else {

                console.log('pmm paramError--',paramError);
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });
    }).fail(function (r) {


        console.log('pmm submit to inspection failed---',r);
        deferred.reject(r);
    });
    return deferred.promise;
}







function pmm_SubmitPhotoToCorrection(m) {


    console.log('pmm: in pmm_SubmitPhotoToCorrection\n ');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();

    var oldUri = m.pl.uri;

    var uuid = lib.getUuidFromUri(oldUri);

    storageBucketManager('copyphoto', uuid, m.pl.pp.fm).then(function (r) {


        m.pl.uri = '/photos/' + r.pl.uuid + '.' + m.pl.pp.fm;
        m.pl.photourl = m.pl.uri;
        m.pl.urll= '/photos/' + r.pl.uuid +'_l' +'.' + m.pl.pp.fm;
        m.pl.urlm= '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.pp.fm;
        m.pl.urls= '/photos/' + r.pl.uuid +'_s' +'.' + m.pl.pp.fm;
        m.pl.sg = '30'  //correction;
        m.pl.st = '100'  //pending;

        delete m.pl._id; // for create the _id must be autoset by mongodb

        m.pl._id = new mongoose.Types.ObjectId;
        console.log('existing payload .....', m.pl._id);

        PhotoModel.create(lib.createTransformjson(m).pl, function (paramError, paramPhotoJson) {
            if (!paramError) {
                console.log("PHOTOJSON setting up R is:",paramPhotoJson);
                r.pl = paramPhotoJson;
                r.status = true;

                deferred.resolve(r);
            }
            else {

                console.log('pmm paramError--',paramError);
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });
    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}








function pmm_SetInspectedPhotoStatus(m) {

    console.log('pmm pmm_SetInspectedPhotoStatus  -----');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {_id: m.pl._id,sg:'20',ds:{"$ne":true}};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    PhotoModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {



        if (!paramError) {

            paramPhotoJson.st= m.pl.st;

            paramPhotoJson.save(function (err) {

                if(!err){

                    r.pl = paramPhotoJson;
                    console.log('returned json----', paramPhotoJson);
                    deferred.resolve(r);
                }
                else{

                    console.log('pmm paramError--',err);
                    r.er = {ec:'', em: err};
                    deferred.reject(r);

                }


            });


        }
        else {

            console.log('pmm paramError--',paramError);

            r.er = {ec:'', em: paramError};

            deferred.reject(r);
        }
    });


    return deferred.promise;
}


function pmm_SetCorrectionPhotoAsFailed(m) {

    console.log('pmm pmm_SetCorrectionPhotoAsFailed  -----');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {'sg':'30','uri': m.pl.uri,'ds':{"$ne":true}};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    console.log(m);


    PhotoModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {


        if (!paramError) {


            paramPhotoJson.st= '400';

            paramPhotoJson.save(function (err) {

                if(!err){

                    r.pl = paramPhotoJson;
                    deferred.resolve(r);
                }
                else{

                    console.log('pmm paramError--',err);
                    r.er = {ec:'', em: err};
                    deferred.reject(r);

                }


            });


        }
        else {

            console.log('pmm paramError--',paramError);

            r.er = {ec:'', em: paramError};

            deferred.reject(r);
        }
    });
    return deferred.promise;
}






function pmm_SetCorrectionPhotoAsInProcess(m) {

    console.log('pmm pmm_SetCorrectionPhotoAsInProcess  -----');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {'sg':'30','uri': m.pl.uri,'ds':{"$ne":true}};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    console.log(m);


    PhotoModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {


        if (!paramError) {


            paramPhotoJson.st= '200';

            paramPhotoJson.save(function (err) {

                if(!err){

                    r.pl = paramPhotoJson;
                    deferred.resolve(r);
                }
                else{

                    console.log('pmm paramError--',err);
                    r.er = {ec:'', em: err};
                    deferred.reject(r);

                }


            });


        }
        else {

            console.log('pmm paramError--',paramError);

            r.er = {ec:'', em: paramError};

            deferred.reject(r);
        }
    });

    return deferred.promise;
}


function pmm_readAllStandardsTypes(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    StandardModel.find(lib.authTransform({},'r',credential),'sc it', function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;

            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em:paramError};
            deferred.reject(r);
        }
    });

    return deferred.promise;
}

//tested
function pmm_updateStandardByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {sc: m.pl.sc};
    var update = lib.updateTransformjson(m).pl;
    var options = {new: true};

    StandardModel.findOneAndUpdate(lib.authTransform(query,'w',credential), update, options, function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_deleteStandardByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {sc: m.pl.sc};
    var options = {select: '*'};

    StandardModel.findOneAndRemove(lib.authTransform(query,'w',credential), options, function (paramError, paramStandard) {
        if (!paramError) {
            r.pl = paramStandard;
            deferred.resolve(r);
        }
        else {
            r.er = {ec: '', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_createUsage(m) {
    var r = {"pl": null, "er": null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var deferred = Q.defer();
    UsageModel.create(lib.createTransformjson(m).pl, function (paramError, paramUsage) {
        if (!paramError) {
            //console.log(paramUsage);
            UsageModel.findOne(lib.authTransform({uc: paramUsage.uc},'r',credential)).populate('sd', 'sc it').exec(function (paramError, paramUsage) {
                if (!paramError) {
                    r.pl = paramUsage;
                    deferred.resolve(r);
                }
                else {
                    r.er = {ec:'', em: paramError};
                    deferred.reject(r);
                }
            });
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_readUsageByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    UsageModel.findOne(lib.authTransform({uc: m.pl.uc},'r',credential)).populate('sd', 'sc it').exec(function (paramError, paramUsage) {
        if (!paramError) {
            r.pl = paramUsage;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_readAllUsages(m) {
    /*
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    UsageModel.find().populate('sd', 'sc it').exec(function (paramError, paramUsage) {
        if (!paramError) {
            r.pl = paramUsage;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
    */
    m.mt = m.mt || {};
    var r = {pl:null, er:null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {},
        model = UsageModel,
        filterQuery = [];
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'abd.ac':m.mt.sk},{'abd.an': m.mt.sk},{'abd.pcn': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

    if(filterQuery.length) query['$and'] = filterQuery;

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){

            return model.find(query).populate('sd', 'sc it').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec();
        }(),
        function(){
            return model.find(query).count().exec();
        }()
    ])
    .then(function(data){
        m.mt.tc = data[1];
        return Q.resolve({er:null,pl:data[0],mt: m.mt});
    }  ,  function reject(er){
        return Q.reject({pl:null,er:{ec:1001,em:'In pmm_readAllUsages:'+er+' '}});
    });
}

//tested
function pmm_updateUsageByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {uc: m.pl.uc};
    var update = lib.updateTransformjson(m).pl;
    var options = {new: true};

    UsageModel.findOneAndUpdate(lib.authTransform(query,'w',credential), update, options, function (paramError, paramUsage) {
        if (!paramError) {
            UsageModel.findOne(lib.authTransform({uc: paramUsage.uc},'r',credential)).populate('sd', 'sc it').exec(function (paramError, paramUsage) {
                if (!paramError) {
                    r.pl = paramUsage;
                    deferred.resolve(r);
                }
                else {
                    r.er = {ec:'', em: paramError};
                    deferred.reject(r);
                }
            });
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

//tested
function pmm_deleteUsageByCode(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {uc: m.pl.uc};
    var options = {select: '*'};

    UsageModel.findOneAndRemove(lib.authTransform(query,'w',credential), options, function (paramError, paramUsage) {
        if (!paramError) {
            r.pl = paramUsage;
            deferred.resolve(r);
        }
        else {
            r.er = {ec:'', em: paramError};
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

function pmm_associate_response_with_user(m){
    console.log('\npmm: associating response with user\n');
    //todo security?
    var targetCode = m.pl.rc;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    console.log("Changing ownership of", targetCode,"to", credential, m.pl.loginName);

    var deferred = Q.defer();
    PhotoModel.update(
        {rc:targetCode},
        {$set:{"s.own.uid": m.pl.loginName,"ct.uID": m.pl.loginName,"ow.uid": m.pl.loginName,"md.uID": m.pl.loginName}},
        function(err,res){
            if(!err){
                console.log("Ending ownership change with:",err,res);
                m.num = res;
                deferred.resolve(m);
            }
            else {
                console.log("Error is",err);
                m.er = err;
                deferred.reject(m);
            }
        }
    )
    return deferred.promise;
}

exports.operations = [
                        init,
                        pmm_uploadPhoto,
                        pmm_getDownloadedPhotosURLByBusinessCode,
                        pmm_updatePhotoByID,
                        pmm_deletePhotoByID,
                        pmm_createStandard,
                        pmm_readStandardByCode,
                        pmm_readAllStandards,
                        pmm_updateStandardByCode,
                        pmm_deleteStandardByCode,
                        pmm_createUsage,
                        pmm_readUsageByCode,
                        pmm_updateUsageByCode,
                        pmm_deleteUsageByCode,
                        pmm_readAllUsages,
                        pmm_readStandardByType,
                        pmm_readAllStandardsTypes,
                        pmm_getUnderProcessingPhotosByOwner,
                        pmm_SubmitPhotoToInspection,
                        pmm_getPhotosForInspection,
                        pmm_SubmitPhotoToCorrection,
                        pmm_getUnqualifedPhotos,
                        pmm_getQualifedPhotos,
                        pmm_SetCorrectionPhotoAsFailed,
                        pmm_SetCorrectionPhotoAsInProcess,
                        pmm_SetInspectedPhotoStatus,
                        pmm_getIdphotosByOwner,
                        pmm_getPhotoByUri,
                        pmm_setCorrectionPhotoAsDone,
                        pmm_getCorrectionPhotosByStatus,
                        pmm_getActivitiesInfo,
                        pmm_associate_response_with_user
                    ];

//re-export ops (for testing)
exports.operations.forEach(function (op) {
    exports[op.name] = op;
});
