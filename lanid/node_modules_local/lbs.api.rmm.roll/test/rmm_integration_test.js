/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var oCMM = require('cmm');
var oRMM= require('../rmm_Interface.js');

var requestid;

exports.setUp = function setUp(callback) {
  function message(m){
      if (m.op === 'dependency')
      {
          m.ns = 'rmm';
        return oCMM.dependency(m);
      }
  }
  var init_message = {
      'op': 'init',
       ns : '',
      'pl':{fn:message}
      };
  oRMM.init(init_message).then(function (r) {
      callback();

  }).fail(function (r) {
      console.log('000000000 init failed:',r);
      callback();
  });
};

exports.tearDown = function tearDown(callback) {
  callback();
};

exports.testRmm = function testRmm(test){
  oRMM.createRequestMessage({
    pl:{
      requestMessage:{
        rdu: '000000000000000000000009'
        ,rdo: '000000000000000000000008'
        ,rc: 'code'
        ,rt: 'title'
        ,rsu: '000000000000000000000007'
        ,rso: '000000000000000000000006'
        ,rs: 10
        ,rb: 'body'
        ,rtr: 'Service'
        ,ei:[{col:'services',mod:'smm',ei:'000000000000000000000010'}]
        ,url:'the url'
      }
      ,transactionid:'000000000000000000000004'
      ,"loginName": "haru"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
    }
  }).then(function(msg){
    test.equal(msg.pl.rdu,'000000000000000000000009','correct rdu');
    test.equal(msg.pl.rdo,'000000000000000000000008','correct rdo');
    test.equal(msg.pl.rc,'LZQ10001','correct code (try --dropdb=true to get the right code)');
    test.equal(msg.pl.rt,'title','correct title');
    test.equal(msg.pl.rsu,'000000000000000000000007','correct rsu');
    test.equal(msg.pl.rso,'000000000000000000000006','correct rso');
    test.equal(msg.pl.rs,10,'correct rs');
    test.equal(msg.pl.rb,'body','correct rb');
    test.equal(msg.pl.rtr,'Service','correct rtr');
    test.equal(msg.pl.ct.uID,'haru','correct uId');
    test.equal(msg.pl.md.uID,'haru','correct uId');
    test.equal(msg.pl.ct.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.md.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.ei[0].col,'services','correct entity information about collection');
    test.equal(msg.pl.ei[0].mod,'smm','correct entity information about module');
    test.equal(msg.pl.ei[0].ei,'000000000000000000000010','correct entity information about entitty id');
    test.equal(msg.pl.url,'the url','correct url');
    requestid=msg.pl._id;
    return oRMM.rmm_getRequests({pl:{userid:'000000000000000000000009'}});
  }).then(function(msg){
    test.equal(msg.pl.length>0,true,'Finished getting requests');
    return oRMM.rmm_getRequest({pl:{query:{_id:requestid}}});
  }).then(function(msg){
    test.equal(msg.pl.rdu,'000000000000000000000009','correct rdu');
    test.equal(msg.pl.rdo,'000000000000000000000008','correct rdo');
    test.equal(msg.pl.rc,'LZQ10001','correct code (try --dropdb=true to get the right code)');
    test.equal(msg.pl.rt,'title','correct title');
    test.equal(msg.pl.rsu,'000000000000000000000007','correct rsu');
    test.equal(msg.pl.rso,'000000000000000000000006','correct rso');
    test.equal(msg.pl.rs,10,'correct rs');
    test.equal(msg.pl.rb,'body','correct rb');
    test.equal(msg.pl.rtr._id,'Service','correct rtr');
    test.equal(msg.pl.ct.uID,'haru','correct uId');
    test.equal(msg.pl.md.uID,'haru','correct uId');
    test.equal(msg.pl.ct.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.md.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.ei[0].col,'services','correct entity information about collection');
    test.equal(msg.pl.ei[0].mod,'smm','correct entity information about module');
    test.equal(msg.pl.ei[0].ei,'000000000000000000000010','correct entity information about entitty id');
    test.equal(msg.pl.url,'the url','correct url');
    return oRMM.rmm_updatRequestMessage({pl:{
      query:{_id:requestid}
      ,"loginName": "haru1"
      ,"currentOrganization": "54852b4bada015b113c0df72"
      ,transactionid:'000000000000000000001111'
      ,status:40
      ,refuseInfo:'Reason refued'
    }});
  }).then(function(msg){
    test.equal(msg.pl.rdu,'000000000000000000000009','correct rdu');
    test.equal(msg.pl.rdo,'000000000000000000000008','correct rdo');
    test.equal(msg.pl.rc,'LZQ10001','correct code (try --dropdb=true to get the right code)');
    test.equal(msg.pl.rt,'title','correct title');
    test.equal(msg.pl.rsu,'000000000000000000000007','correct rsu');
    test.equal(msg.pl.rso,'000000000000000000000006','correct rso');
    test.equal(msg.pl.rs,40,'correct rs');
    test.equal(msg.pl.rb,'bodyReason refued','correct rb');
    test.equal(msg.pl.rtr._id,'Service','correct rtr');
    test.equal(msg.pl.ct.uID,'haru','correct uId');
    test.equal(msg.pl.md.uID,'haru1','correct uId');
    test.equal(msg.pl.ct.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.md.oID,'54852b4bada015b113c0df72','correct oId');
    test.equal(msg.pl.ei[0].col,'services','correct entity information about collection');
    test.equal(msg.pl.ei[0].mod,'smm','correct entity information about module');
    test.equal(msg.pl.ei[0].ei,'000000000000000000000010','correct entity information about entitty id');
    test.equal(msg.pl.url,'the url','correct url');
    return oRMM.rmm_rollback({pl:{transactionid:'000000000000000000001111'}});
  }).then(function(){
    return oRMM.rmm_getRequest({pl:{query:{_id:requestid}}});
  }).then(function(msg){
    test.equal(msg.pl.rdu,'000000000000000000000009','correct rdu');
    test.equal(msg.pl.rdo,'000000000000000000000008','correct rdo');
    test.equal(msg.pl.rc,'LZQ10001','correct code (try --dropdb=true to get the right code)');
    test.equal(msg.pl.rt,'title','correct title');
    test.equal(msg.pl.rsu,'000000000000000000000007','correct rsu');
    test.equal(msg.pl.rso,'000000000000000000000006','correct rso');
    test.equal(msg.pl.rs,10,'correct rs');
    test.equal(msg.pl.rb,'body','correct rb');
    test.equal(msg.pl.rtr._id,'Service','correct rtr');
    test.equal(msg.pl.ct.uID,'haru','correct uId');
    test.equal(msg.pl.md.uID,'haru','correct uId');
    test.equal(msg.pl.ct.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.md.oID,'54852b4bada015b113c0df7e','correct oId');
    test.equal(msg.pl.ei[0].col,'services','correct entity information about collection');
    test.equal(msg.pl.ei[0].mod,'smm','correct entity information about module');
    test.equal(msg.pl.ei[0].ei,'000000000000000000000010','correct entity information about entitty id');
    test.equal(msg.pl.url,'the url','correct url');
    test.done();  
  }).fail(function(reason){
    console.log('00000000 test failed:',reason);
    test.equal(1,2,'Promise rejected, we are in failed');
    test.done();
  });
};

