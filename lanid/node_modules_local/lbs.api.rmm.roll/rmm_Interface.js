/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
$.post('/home/login.json',{antiBotValue:'MSNP',password:'123456',user_captcha:'MSP',username:'haruadmin'})
.then(function(){
  lbs.modHelper.getMessage(
   "/workspace/requests/request.json"
   , false, {},'PUT',{_id:'54d4930377e4176e042ca172',status:30}
  ).then(function(msg){console.log(msg);});
});
 
 */


'use strict';
var mongoose = null //mongoose object
  ,Q = require('q')
  ,lib = require('lib')
  ,transactionHelper
  ,RequestSchema
  ,Request
  ,RTypeSchema
  ,RType
  ,CounterSchema
  ,Counter;

function init(m) {
    var r = {pl: null, er: ''}
      ,message=null;
    var credential = new lib.Credential("","200000000000000000000000");
    if (!(m.pl.fn instanceof Function)) {
        r.er = {ec: null, em: 'Payload pl is not a function'};
        return Q.fail(r);
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    });

    return Q.all([p1]).then(function (r1) {
      var d = Q.defer();
      mongoose = r1[0].pl.fn;
      console.log('\nrmm: rmm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
      RTypeSchema = require("./models/RType.js")(mongoose);
      RType = mongoose.model('rtypes', RTypeSchema);
      RequestSchema = require("./models/Request.js")(mongoose);
      Request = mongoose.model('requests', RequestSchema);
      CounterSchema = require("./models/Counter.js")(mongoose);
      Counter = mongoose.model('counters', CounterSchema);
      transactionHelper = require('lib').transactionHelper.init({pl:{mongoose:mongoose}});
      
      var p = [],requestTypes=[
        {_id:'Service','rtn':'Service',col:'services',mod:'smm'}
        ,{_id:'ServicePoint','rtn':'Service Point',col:'servicepoints',mod:'smm'}
        ,{_id:'Activity','rtn':'Business Activity',col:'activities',mod:'bmm'}
      ],i=requestTypes.length;
      while(--i>-1){
        p.push(
          (function(index){
            return transactionHelper.getCreate('rtypes',{},false,{_id:requestTypes[index]._id},true, credential)
            .then(function resolve(result){
              if(result.isNew){
                result._id=requestTypes[index]._id;
                result.rtn=requestTypes[index].rtn;
                result.col=requestTypes[index].col;
                result.mod=requestTypes[index].mod;
                return transactionHelper.saveToPromise(result);
              }
            })
          }(i))
        );
      }
      return Q.all(p)
      .then(function(){
        return Q.resolve();
      })
      .then(null,function reject(err){
        r.er=err;
        return Q.reject(r);
      });
    }).then(function(){ 
      var p = [],counters=[
        {_id:'requestCode'}
      ],i=counters.length;
      while(--i>-1){
        p.push(
          (function(index){
            return transactionHelper.getCreate('counters',{},false,counters[index],true,credential)
            .then(function resolve(result){
              if(result.isNew){
                result.seq=1000;
                result._id=counters[index]._id;
                return transactionHelper.saveToPromise(result);
              }
            })
            .then(null,function reject(er){
                return Q.reject(er);
            })                
          }(i))
        );
      }
      return Q.all(p)
      .then(function(){
        return Q.resolve(r);
      })
      .then(null,function reject(err){
        r.er=err;
        return Q.reject(r);
      });
    }).then(function(){ 
      return Q({pl: {pm: 'rmm initialization done!'}, er: null});
    });


}

function rmm_persistRequestMessage(m){
  var dbRequest;
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q()
  .then(function(){
    if(m.pl.request.rtr == 'Activity' && m.pl.request.rs == "10")
    {
        var reqActivity = m.pl.request.ei[0].ei;

        return Request.findOne({rs: 10, ei : {$elemMatch:{ei:reqActivity}}}).exec()
    }
    else return undefined;
  })
  .then(function(look){
    if(look){
        throw "Request Pending"
    }
  })
  .then(function(){
          console.log("rmm_persistRequestMessage getcreate:", m.pl);
    return transactionHelper.getCreate('requests',m.pl.request,m.pl.transactionid, undefined,undefined,credential)
  }).then(function(req){
    dbRequest=req;
    var code = false;
    if(!dbRequest.rc){
      code = transactionHelper.getNextSequence("requestCode");
    }
    return code;
  })
  .then(function(code){
    if(code){
      m.pl.request.rc = 'LZQ'+code.seq;
    }
    transactionHelper.setFields(dbRequest,m.pl.request,'requests',m.pl.loginName,m.pl.currentOrganization);
    return transactionHelper.saveToPromise(dbRequest);
  }).then(function(ret){
    return transactionHelper.commit({transactionid:m.pl.transactionid});
  }).then(function(){
    return Q.resolve(dbRequest);
  }, function fail(e){
          if(e == "Request Pending")return Q.resolve();
          else throw e;
  });
}

function rmm_getRequests(m){
    m.mt = m.mt || {};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    var userid;
    return Q.all([function(){
        userid=m.pl.loginName;
        var orclause = [{rdu:userid},{rdo:m.pl.orgid}]
        var query={ds:{"$ne":true}};
        if(m.pl.currentOrganization != "200000000000000000000000")query["$or"] = orclause;
        var keys,i;
        if(m.pl.filter){
            keys=Object.keys(m.pl.filter);
            i = keys.length;
            while(--i>-1){
                query[keys[i]]=m.pl.filter[keys[i]];
            }
        }

        var filterQuery = []
        //Designate Search Key
        if(m.mt.sk) filterQuery.push({$or:[{'rsu':m.mt.sk},{'rt': m.mt.sk},{'rc': m.mt.sk}]});

        //Define start date
        if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

        //Define end date
        if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

        if(filterQuery.length) query['$and'] = filterQuery;

        return Request.find(lib.authTransform(query,'r',credential))
            .populate('rtr')
            .skip(m.mt.p * m.mt.ps).limit(m.mt.ps)
            .exec(function(){});
    }()
        ,function(){
            userid=m.pl.loginName;
            var query={$or:[{rdu:userid},{rdo:m.pl.orgid}],ds:{"$ne":true}};
            var keys,i;
            if(m.pl.filter){
                keys=Object.keys(m.pl.filter);
                i = keys.length;
                while(--i>-1){
                    query[keys[i]]=m.pl.filter[keys[i]];
                }
            }
            var filterQuery = []
            //Designate Search Key
            if(m.mt.sk) filterQuery.push({$or:[{'rsu':m.mt.sk},{'rt': m.mt.sk},{'rc': m.mt.sk}]});

            //Define start date
            if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

            //Define end date
            if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

            if(filterQuery.length) query['$and'] = filterQuery;

            return Request.find(lib.authTransform(query,'r',credential))
                .populate('rtr')
                .count()
                .exec(function(){});
        }()
    ])
        .then(function resolve(data){
            m.mt.tc = data[1];
            return {er: null, pl: data[0], mt: m.mt};
        },function fail(err){
            return Q.fail({ec:10001,em:"In rmm_getRequest:"+err+" - "});
        })

}

function rmm_getRequest(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q().then(function(){
    var deferred;
    deferred = Q.defer();
    Request.findOne(lib.authTransform(m.pl.query,'r',credential))
    .populate('rtr')
    .exec(function(err, paramData){
      if(!err){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:err.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw er;
    }
    throw e;    
  });
}

function rmm_rollback(m){
  return transactionHelper.rollback({transactionid:m.pl.transactionid});
}

exports.operations = [init,rmm_getRequests,rmm_rollback
  ,rmm_getRequest,rmm_persistRequestMessage];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});
