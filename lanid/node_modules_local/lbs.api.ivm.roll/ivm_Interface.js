/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



'use strict';
var mongoose = null ; //mongoose object
var message = null;   // message function


var Q = require('q');

function init(m) {
    var r = {pl: null , er:''};
    if(!(m.pl.fn instanceof Function)) {
        r.er = {ec:null , em: 'Payload pl is not a function'};
        return Q.fail(r);
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    }).then(function(r1){
        //console.log(r);
        mongoose = r1.pl.fn;
        console.log('\n ivm: ivm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
          var r = {pl: {pm: 'ivm initialization done! '}, er: null};
         return Q(r);
    });
    return p1;
}

/*
 * ivm_validate_id(m)
 * this method is use to validate a user national id.
 * @param. This function takes as input a message with payload
 * @returns. this function returns a message with result of the validation
 */

//  message format
/*
 var m = {
 "ns":"ivm",
 "mv": "1.00"
 "op": "ivm_validate_id(m)",
 "pl": {"fullname": "wangli", "idnumber":"xxxxxxyyyyyyxxxxxhhhhh"}
 };

 var r = {
 "er": null,
 "pl": {vr: true, vrm: "abc" }    //vr = verication result. this can be true of false, vrm = verification result message
 }
 */

//function ivm_validate_id(m) {
//    var r = {"pl": null, "er": null};
//    var deferred = q.defer();
//
//    id_api_validate_id(m).then(function(result){
//        r.pl = result;
//        deferred.resolve(r);
//
//    }).fail(function (error) {
//            r.er = error;
//            deferred.reject(r);
//        });
//
//    return deferred.promise;
//}

/*
 * ivm_validate_id_photo(m)
 * this method is used to validate user national id photo
 * @param. This function takes as input a message with payload
 * @returns. this function returns a message with result of the validation
 */

//  message format
/*
 var m = {
 "ns":"ivm",
 "mv": "1.00"
 "op": "ivm_validate_idphoto(m)",
 "pl": {"fullname": "wangli", "idnumber":"xxxxxxyyyyyyxxxxxhhhhh", "photodata": "blob"}
 };

 var r = {
 "er": null,
 "pl": {vr: true, vrm: "abc" }    //vr = verification result. this can be true of false, vrm = verification result message
 }
 */

//function ivm_validate_idphoto(m) {
//    var r = {"pl": null, "er": null};
//    var deferred = q.defer();
//
//    id_api_validate_idphoto(m).then(function(result){
//        r.pl = result;
//        deferred.resolve(r);
//
//    }).fail(function (error) {
//            r.er = error;
//            deferred.reject(r);
//        });
//
//    return deferred.promise;
//}

exports.operations = [init];

exports.operations.forEach(function(op) {
  exports[op.name] = op;
});
