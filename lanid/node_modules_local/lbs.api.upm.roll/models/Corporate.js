/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var lib = require("lib");
module.exports = function (paramMongoose){

var corporateSchema = new paramMongoose.Schema({
    //_id: {type:paramMongoose.Schema.Types.ObjectId,required:true} // mongodb automatically create this one for us.
    //ct: { //creator
    //    cuID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of the user who created this record
    //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    //    cd: {type: Date, required:true}//creation date
    //},
    //md: {//modified
    //    uID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of user who changed the service
    //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    //    lu: {type:Date,required:true}//last updated date
    //},

    s : lib.permissionsSchema({all:"r"}),
    ow: {
        oID: String,
        uID: String
    },

    basic: {
        corporationName: {value: {type: String, default: '新单位'}, verified: Boolean, verifiedDate: Date},
        corporationPublicName: {value: {type: String, default: '新单位'}, verified: Boolean, verifiedDate: Date},
        corporationLogo: {value: {type: String, default: '../../commons/images/corporateCommonIcon.png'}, verified: Boolean, verifiedDate: Date},
        corporationType: {value: {type: String, default: '事业单位'}, verified: Boolean, verifiedDate: Date},
        businessLicenseNumber: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
        organizationCode: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
        address: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
        userApplicationForm:{
            name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
            uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

        },

        userIdDocument: {
            name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
            uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

        },
        businessLicenseDocument:{
            name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
            uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

        },

        organizationCodeDocument: {
            name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
            uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

        },

        completion:{ type: Number, default: 5}, //percentage completed.
        vs:{type: String,default: '未单位认证'}, // user verification status
        lzID:{type: String,default: '单位认证后获取'}, //lanzheng hao  or lanzheng id abtain after user verification
        memberCount: {value: {type: Number, default: 50}, verified: Boolean, verifiedDate: Date}
        },
        contacts: {
            name: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
           position: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
            phone: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}
        },
        others: {
               tradeMarkName: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
               officialWechatAccount: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
                tramarkRegistrationCertificate: {
                    name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
                    uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

                },
                tramarkCopyRightFile: {
                    name:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
                    uri:{value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date}

                },
                officialWebSite: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                businessDepartmentWebSite: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                 industrytype: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                economictype: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},

               bankingInfo:{
                   accountNumber: {value: {type: String, default: ''}, verified: Boolean, verifiedDate: Date},
                   bankName: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                   alipayAccount: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
               },

               contacts:{
                       copyRightManager:{
                           name:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                           phone:{value: {type:String, default:''}, verified: Boolean, verifiedDate: Date},
                           otherContactInfos:[{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}]
                       },

                       verificationManager:{
                           name:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                           phone:{value: {type:String, default:''}, verified: Boolean, verifiedDate: Date},
                           otherContactInfos:[{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}]
                       }
                      }

            }



});


    corporateSchema.statics.updateCorporateProfile = function(paramCorporateJson, paramCallback ){

        var query =  {_id:paramCorporateJson._id};

        var update =  paramCorporateJson;
        var options = { new: true };
        return this.findOneAndUpdate(query, update, options, paramCallback);
    };


return corporateSchema;

};