/**
 * Created by LBS006 on 1/19/15.
 */
var lib = require("lib");
module.exports = function (paramMongoose){

    var corporateDetailSchema = new paramMongoose.Schema({
        //_id: {type:paramMongoose.Schema.Types.ObjectId,required:true}, // mongodb automatically create this one for us.
        //ct: { //creator
        //    cuID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of the user who created this record
        //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
        //    cd: {type: Date, required:true}//creation date
        //},
        //md: {//modified
        //    uID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of user who changed the service
        //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
        //    lu: {type:Date,required:true}//last updated date
        //},

        s : lib.permissionsSchema({all:"r"}),
        ow: {
            oID: String,
            uID: String
        },

        //uID:String, // Profile UserAccountID from User Account ID on User.ID
        //lzID:String,
        //completion: Number, //percentage completed.
        //corporationName: {value: {type:String, default: '新单位'}, verified: Boolean, verifiedDate: Date},
        //corporationLogo: {value: {type:String,default:'../../commons/images/bachend/backendProfilePic.png'}, verified: Boolean, verifiedDate: Date},
        //corporationCode: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
        //corporationType: {value: {type:String, default: '事业单位'}, verified: Boolean, verifiedDate: Date},
        //authenticationStatus: {value: {type:String, default: '未认证'}, verified: Boolean, verifiedDate: Date},

        cdc: String,  // LZCD100001, LZCD100002  corporatedetailcode
        ccn: String, //corresponding corporate name (public name)


        cb:{type:paramMongoose.Schema.Types.ObjectId, ref: 'corporates'}, // corporate basic

        officialWebSite: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
        businessDepartmentWebSite: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
        address: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},

        contacts:{
                manager:{
                    name:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                    phone:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                    qq:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                    wx:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                    email:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                    inmail:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
                },
            verificationManager:{
                name:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                phone:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                qq:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                wx:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                email:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
                inmail:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
            }

        },

       description:{
            text: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
            attachment:[{nm: String, fm: String, url: String,fs:Number, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}]
             },

        images: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId} }],
        videos: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId} }],
        audios: [{ url: String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}],
        faq:[{q:String, a:String, uuid: {type:paramMongoose.Schema.Types.ObjectId, default: paramMongoose.Types.ObjectId}}]

    });

    //Model Declaration ===============================
//var  Personal = mongoose.model('personal',personalSchema);

//public Methods ===============================
    corporateDetailSchema.statics.readByUserAccountID = function(paramUserAccountID, paramCallback){
        return this.findOne({_id: paramUserAccountID}, paramCallback); //static method
    };

    corporateDetailSchema.methods.deleteByUserAccountID = function(paramUserAccountID, paramCallback){
        return this.findOne({_id:paramUserAccountID},paramCallback);
    };

    corporateDetailSchema.statics.updateCorporateDetailProfile = function(paramCorporateDetailsJson, paramCallback ){

        var query =  {_id:paramCorporateDetailsJson._id};

        var update =  paramCorporateDetailsJson;
        var options = { new: true };
        return this.findOneAndUpdate(query, update, options, paramCallback);
    };

    return corporateDetailSchema;
};