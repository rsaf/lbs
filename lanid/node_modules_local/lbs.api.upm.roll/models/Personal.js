/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var lib = require("lib");
module.exports = function (paramMongoose){
//Model Schema ===============================
var personalSchema = paramMongoose.Schema ({
    //_id: {type:paramMongoose.Schema.Types.ObjectId,required:true}, // mongodb automatically create this one for us.
    //ct: { //creator
    //    cuID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of the user who created this record
    //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    //    cd: {type: Date, required:true}//creation date
    //},
    //md: {//modified
    //    uID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of user who changed the service
    //    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    //    lu: {type:Date,required:true}//last updated date
    //},

    s : lib.permissionsSchema({all:""}),
    userAccountID: String, // Profile UserAccountID from User Account ID on User.ID
    userCurrentOrganization: paramMongoose.Schema.Types.ObjectId,
    lzID:{type: String,default: '实名认证后获取'}, //lanzheng hao  or lanzheng id abtain after user verification
    vs:{type: String,default: '未实名认证'}, // user verification status
    completion:{ type: Number, default: 5}, //percentage completed.
    basic:{
    userName:{value: {type:String, default: '新用户'}, verified: Boolean, verifiedDate: Date},
    avatar: {value: {type:String,default:'../../commons/images/bachend/backendProfilePic.png'}, verified: Boolean, verifiedDate: Date},
    weixinAvatar: String,
    gender:{value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
    dateOfBirth:{value:  {type:Date, default:  Date.now()}, verified: Boolean, verifiedDate: Date},
    country: {value: {type:String, default: '中国'}, verified: Boolean, verifiedDate: Date},
    placeOfBrith:  {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
    currentResidence: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
    },

    private: {
        IDNumber: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
        lastestPhoto:{value:{type:String,default:"../../commons/images/Latest-photo.jpg"},verified: Boolean, verifiedDate: Date},
        fullName: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
        lanID: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date}
    },
    contacts: {
     email: {value: {type:String, default: '**780183@qq.com'}, verified: Boolean, verifiedDate: Date},
     linkToPhone: {value: {type:String, default: ''}, verified: Boolean, verifiedDate: Date},
     linkToQQ: {value: {type:String, default: '未设置QQ绑定'}, verified: Boolean, verifiedDate: Date},
     linkToWechat:{value: {type:String, default: '未设置微信绑定'}, verified: Boolean, verifiedDate: Date}
    }
});



//Model Declaration ===============================
//var  Personal = mongoose.model('personal',personalSchema); 

//public Methods ===============================
personalSchema.statics.readByUserAccountID = function(paramUserAccountID, credential, paramCallback){
   return this.findOne(lib.authTransform({userAccountID: paramUserAccountID},'r',credential), paramCallback); //static method
};

personalSchema.methods.deleteByUserAccountID = function(paramUserAccountID, credential, paramCallback){
   return this.findOne(lib.authTransform({userAccountID:paramUserAccountID},'w',credential),paramCallback);
};

personalSchema.statics.updatePersonalProfile = function(paramPersonalJson, credential, paramCallback ){

var query =  {userAccountID:paramPersonalJson.userAccountID};
var update =  paramPersonalJson;
var options = { new: true };
//console.log(query);
//console.log(update);
//delete update.userAccountID;
//console.log(query);
//console.log(update);

return this.findOneAndUpdate(lib.authTransform(query,'w',credential), update, options, paramCallback);

};

return personalSchema;

};
