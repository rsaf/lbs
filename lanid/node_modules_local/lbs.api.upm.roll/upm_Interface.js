/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

'use strict';
var mongoose = null ; //mongoose object
var message = null;   // message function
var storageBucketManager = null;
var ivsValidateUserInfo = null;

var PersonalSchema = null;
var CorporateSchema = null;
var CorporateModel = null;
var CounterSchema = null;
var Counter = null;
var corporateDetailSchema = null;
var corporateDetailModel = null;
var PersonalModel = null;
var defaultNavigation = null;
var transactionHelper =  null;
var  getWexinUserInformation = null;
var Q = require('q');
var lib = require('lib');
//var uuid = require('node-uuid');

function init(m) {
    var r = {pl: null , er:''};
    if(!(m.pl.fn instanceof Function)) {
        r.er = {ec:null , em: 'Payload pl is not a function'};
        return Q.fail(r);
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    });

    var p2 = message({
        op: 'dependency',
        pl: {dn:'navigation'}
    });

    var p3 = message({
        op: 'dependency',
        pl: {dn: 'bucketManager'}
    });

    var p4 = message({
        op: 'dependency',
        pl: {dn: 'ivsClient'}
    });

    var p5 = message({
        op: 'dependency',
        pl: {dn:'getWXUserInfo'}
    });


return Q.all([p1,p2,p3, p4,p5]).then(function(r1){
        //console.log(r);
        mongoose = r1[0].pl.fn;
        defaultNavigation = r1[1].pl.fn;
        storageBucketManager = r1[2].pl.fn;
        ivsValidateUserInfo =  r1[3].pl.fn;
        getWexinUserInformation = r1[4].pl.fn;


        console.log('\nupm: upm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        console.log('upm: upm has received storageBucketManager dependency...');

        PersonalSchema = require("./models/Personal.js")(mongoose);
        CorporateSchema = require("./models/Corporate.js")(mongoose);
        CorporateModel = mongoose.model('corporates', CorporateSchema);
        CounterSchema = require("./models/Counter")(mongoose);
        Counter = mongoose.model('counters', CounterSchema);
        transactionHelper = require('lib').transactionHelper.init({pl:{mongoose:mongoose}});
        corporateDetailSchema = require("./models/CorporateDetail.js")(mongoose);
        corporateDetailModel = mongoose.model('corporateDetails', corporateDetailSchema); //exposes static methods
        PersonalModel = mongoose.model('personals', PersonalSchema); //exposes static methods

         var r = {pl: {pm: 'upm initialization done! '}, er: null};


        var jsoninit = require("./data/mongo_init.json");
        return lib.prepopulateMongoDatabase(jsoninit, transactionHelper);


         //return Q(r)
         //    .then(function(r){
         //        var d = Q.defer();
         //        Counter.find({},function(err,data){
         //            if(err){
         //                d.reject(err);
         //            }
         //            if(data.length===0){
         //                Counter.create([
         //                    {_id:'corporateDetailsCode','seq':10000}
         //                ],function(err){
         //                    if(err){
         //                        d.reject(err);
         //                    }
         //                    d.resolve(r);
         //                });
         //                return;
         //            }
         //            d.resolve();
         //        });
         //        return d.promise;
         //    });

    })
    .then(function success() {
        return Q.resolve({pl: {pm: 'upm initialization done!'}, er: null});
    }  ,  function failure(r) {
        return Q.resolve({pl: {pm: 'upm initialization had some issue: ',er: r.er}});
    });

}

function createPersonalProfile (m){
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  PersonalModel.create(m.pl, function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;
     deferred.reject(r);
    }
  });
  return deferred.promise;
}

function updatePersonalProfile(m){
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  PersonalModel.updatePersonalProfile(m.pl, credential, function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;
     deferred.reject(r);
    }
  });
  return deferred.promise;
};

function readPersonalProfileByUserID (m){
   var r ={"pl":null, "er":null};
   var deferred = Q.defer();
   var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
   PersonalModel.readByUserAccountID(m.pl.userAccountID, credential, function( paramError, paramData ){
 if(paramData){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else if (paramError) {
      r.er = paramError;
     deferred.reject(r);
    }
    else if (!paramData){
     PersonalModel.create({userAccountID:m.pl.userAccountID}, function(parammError, paramPersonal){
         if(paramPersonal){
             r.pl = paramPersonal;
             deferred.resolve(r);
         }
         else if (parammError) {
             r.er = parammError;
             deferred.reject(r);
         }
     });
 }

   });

   return deferred.promise;
}

//function createCorporateDetailPage (m){
//    var r ={"pl":null, "er":null};
//    var deferred = Q.defer();
//    corporateDetailModel.create(m.pl, function(paramError, paramData){
//        if(!paramError){
//            r.pl = paramData;
//            deferred.resolve(r);
//        }
//        else {
//            r.er = paramError;
//            deferred.reject(r);
//        }
//    });
//    return deferred.promise;
//}

function upm_readCorporateInfo(m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    CorporateModel.findOne({'ow.oID': m.pl.oID},function (paramError, paramData) {

        //console.log('corporate read----',paramData);

        if (paramData) {
            r.pl = paramData;
            deferred.resolve(r);
        }
        else if (paramError) {
            r.er = paramError;
            console.log('upm read corporate info failed----');
            deferred.reject(r);
        }
        else if (!paramData) {

            CorporateModel.create({'ow.oID': m.pl.oID, 'ow.uID': m.pl.uID}, function (parammError, paramCorporate) {
                                if (paramCorporate) {
                                    r.pl = paramCorporate;
                                    deferred.resolve(r);
                                }
                                else if (parammError) {
                                    r.er = parammError;
                                    deferred.reject(r);
                                }
                            });


                }
                else {
                    console.log("upm Error from Create coporate detail... ", paramError);
                }
            });

    return deferred.promise;

}

function readCorporateDetailPageByID (m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {};

    if(m.pl.cdc){
        query = {cdc:m.pl.cdc};
    }
    else if(m.pl.oID){
        query = {'ow.oID':m.pl.oID};
    }

    corporateDetailModel.findOne(query).populate({
        path: 'cb',
        select: 'basic.corporationName basic.corporationPublicName basic.corporationLogo basic.corporationType basic.organizationCode basic.completion basic.vs'
    }).exec(function (paramError, paramData) {

        if (paramData) {

            //console.log('corporate detail found----',paramData);
            r.pl = paramData;
            deferred.resolve(r);
        }
        else if (paramError) {
            r.er = paramError;
            deferred.reject(r);
        }
        else if (!paramData) {

            // CorporateModel.findOne({'ow.oID': m.pl.oID},
            upm_readCorporateInfo(m)
                .then(function (corporateParam) {

                    var cb = null;
                    var ccn = null;

                    if (corporateParam.pl) {
                        cb = corporateParam.pl
                        ccn = corporateParam.pl.basic.corporationPublicName.value;
                    }
                    transactionHelper.getNextSequence('corporateDetailsCode')
                        .then(function (code) {
                            var cdc = 'LZCD' + code.seq;

                         //   console.log('upm  corporateDetailsCode---', cdc);

                            return corporateDetailModel.create({
                                'ow.oID': m.pl.oID,
                                'ow.uID': m.pl.uID,
                                cdc: cdc,
                                ccn:ccn,
                                cb: cb

                            })
                            .then(function (detail) {
                                    detail.populate({
                                        path: 'cb',
                                        select: 'basic.corporationName basic.corporationPublicName basic.corporationLogo basic.corporationType basic.organizationCode basic.authenticationStatus basic.completion basic.vs'
                                    }, function (err, param) {

                                        if (param) {

                                        //    console.log('upm corporate detail crated----', param);
                                            r.pl = param;
                                            deferred.resolve(r);
                                        }
                                        else if (err) {
                                            r.er = err;
                                            deferred.reject(r);
                                        }
                                });

                            });
                        });
                })

        }
        else {
            console.log("upm Error from Create coporate detail... " + paramError);
        }

        });

    return deferred.promise;

}

function upm_getCorporateDetailPages (m) {

    m.mt = m.mt || {};
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var query = {"ds":{"$ne":true}};

    if(m.pl&&m.pl.filter){

        //var cond = '/'+m.pl.filter+'/'; regular expression to work as the like query in sql database
        var cond = m.pl.filter;

        console.log('conditions----',cond);

        query = {$and:[{"ds":{"$ne":true}},{$or:[{cdc:cond},{ccn:cond}]}]};
    }

    query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return   corporateDetailModel.find(query).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).populate({
                path: 'cb',
                select: 'basic.corporationName basic.corporationPublicName basic.corporationLogo basic.corporationType basic.organizationCode basic.completion basic.vs'
            }).exec()
        }()
        ,function(){
            return corporateDetailModel.find(query).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,function fail(err){

          r.er = err;
        console.log('upm  error in upm_getCorporateDetailPages: ',r.er);
        return r;
    })


    return deferred.promise;

}

function updateCorporateDetailProfile(m){
    var r ={"pl":null, "er":null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    corporateDetailModel.updateCorporateDetailProfile(m.pl, credential, function(paramError, paramData){
        if(!paramError){
            r.pl = paramData;
            deferred.resolve(r);
        }
        else {
            r.er = paramError;

            deferred.reject(r);
        }
    });
    return deferred.promise;
};

function upm_uploadCorporationLogo(m) {
    console.log('\nupm: in uploading corporate detail logo\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

        m.pl.profileData.basic.corporationLogo.value = '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;

       delete m.pl.PhotoData;

        CorporateModel.updateCorporateProfile( m.pl.profileData,credential,function(paramError, paramReturn){

            if (!paramError) {
                r.pl = paramReturn;

                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });


    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

function upm_updateCorporationDetailsImages(m) {
    console.log('\nupm: in uploading corporate detail images\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)



    if(m.pl.op==='create'){

        storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

            var url =  '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;


            delete m.pl.PhotoData;

            corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$push': {images: {url:url}}},{safe: true, upsert: true}, function(err, profile){
                if(!err){
                    r.pl = profile.images.pop();
                    deferred.resolve(r);
                }
                else {
                    r.er = err;
                    deferred.reject(r);
                }
            });

        }).fail(function (r) {
            deferred.reject(r);
        });

    }

    else if (m.pl.op==='delete'){
        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$pull': {images: {uuid: m.pl.profileData.uuid}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                //returns the whole profile
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }






    return deferred.promise;
}
function upm_updateCorporationDetailsVideos(m) {
    console.log('\nupm: in updating corporate detail videos\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)


    if(m.pl.op==='create'){

        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$push': {videos: {url: m.pl.profileData.url}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                r.pl = profile.videos.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$pull': {videos: {uuid: m.pl.profileData.uuid}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                //returns the whole profile
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}

function upm_updateCorporationDetailsAudios(m) {
    console.log('\nupm: in uploading corporate detail videos\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)

    if(m.pl.op==='create'){

        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$push': {audios: {url: m.pl.profileData.url}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                r.pl = profile.audios.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$pull': {audios: {uuid: m.pl.profileData.uuid}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                //returns the whole profile
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }



    return deferred.promise;
}

function upm_updateCorporationDetailsDescription(m) {

    ////
    //description:{
    //    text: {value: {type:String, default: '无'}, verified: Boolean, verifiedDate: Date},
    //    attachment:[{nm: String, fm: String, url: String,fs:Number, uuid: String }]
    //}

    console.log('\nupm: uploading files and updating corporate detail description \n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    var fileUploadsPromises = [];


    if(m.pl.op==='create'){


        for (var i in m.pl.profileData.description.attachment){
            //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
            var p =  storageBucketManager('uploadfile', null, m.pl.profileData.description.attachment[i].fm, m.pl.profileData.description.attachment[i].fd, null);
            fileUploadsPromises.push(p);
        }
        Q.all(fileUploadsPromises).then(function (rl){

            for (var j in rl ){
                if(!(rl[j])) continue;

                //m.pl.profileData.description.attachment[j].url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.profileData.description.attachment[j].fm;

               var url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.profileData.description.attachment[j].fm;
                var fm =m.pl.profileData.description.attachment[j].fm;
                var fd =m.pl.profileData.description.attachment[j].fd;
                var nm = m.pl.profileData.description.attachment[j].nm;

                delete m.pl.profileData.description.attachment[i].fd;

                corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$push': {'description.attachment': {url:url,nm:nm,fd:fd,fm:fm}}},{safe: true, upsert: true}, function(err, profile){
                    if(!err){
                        r.pl = profile.description.attachment.pop();
                        deferred.resolve(r);
                    }
                    else {
                        r.er = err;
                        deferred.reject(r);
                    }
                });

            }


        }).fail(function(){
            deferred.reject(r);
        })

    }
    else if(m.pl.op === 'update'){

        corporateDetailModel.updateCorporateDetailProfile(m.pl.profileData,credential,function(paramError, paramData){
            if(!paramError){
                r.pl = paramData;
                deferred.resolve(r);
            }
            else {
                r.er = paramError;

                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$pull': {'description.attachment': {uuid: m.pl.profileData.uuid}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                //returns the whole profile
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}

function upm_updateCorporationDetailsFAQ(m){
    console.log('\nupm: updating corporate detail faq\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


    if(m.pl.op==='create'){

        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$push': {faq: {q: m.pl.profileData.q, a: m.pl.profileData.a}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                r.pl = profile.faq.pop();
                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }

        });
    }
    else if(m.pl.op === 'update'){

        corporateDetailModel.update(lib.authTransform({'faq.uuid':m.pl.profileData.uuid},'w',credential), {'$set': {'faq.$.q': m.pl.profileData.q, 'faq.$.a': m.pl.profileData.a}}, function(err, profile){
            if(!err){


                if(profile===1)
                {
                    r.pl = {status: true};
                }
                else if(profile===0)
                {
                    r.pl = {status: false};
                }

                deferred.resolve(r);
            }
            else {
                r.er = err;
                deferred.reject(r);
            }
        });
    }

    else if (m.pl.op==='delete'){
        corporateDetailModel.findOneAndUpdate(lib.authTransform({_id:m.pl.profileData._id},'w',credential), {'$pull': {faq: {uuid: m.pl.profileData.uuid}}},{safe: true, upsert: true}, function(err, profile){
            if(!err){
                    //returns the whole profile
                r.pl = {status:true};
                deferred.resolve(r);
            }
            else {
                r.er = err;
                r.pl = {status:false};
                deferred.reject(r);
            }

        });
    }

    return deferred.promise;
}

function getUserNavigation (m){
    var r ={"pl":null, "er":null};

    if (m.pl.userType === "personal"){
        r.pl = defaultNavigation.personal;
        return Q(r);
    }
    else if (m.pl.userType === "corporate"){
        r.pl = defaultNavigation.corporate;
        return Q(r);
    }
    else if (m.pl.userType === "admin"){
        r.pl = defaultNavigation.admin;
        return Q(r);
    }

    else if (m.pl.userType === "adminphotos"){
        r.pl = defaultNavigation.adminphotos;
        return Q(r);
    }
}

function upm_uploadAvatar(m) {
    console.log('\nupm: in uploading avatar\n ');
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
    storageBucketManager('uploadphoto', null, m.pl.ifm, m.pl.photoData, null).then(function (r) {

        m.pl.profileData.basic.avatar.value = '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;

        delete m.pl.PhotoData;

        PersonalModel.updatePersonalProfile( m.pl.profileData,credential,function(paramError, paramPersonal){

            if (!paramError) {
                r.pl = paramPersonal;

                deferred.resolve(r);
            }
            else {
                r.er = {ec:'', em: paramError};
                deferred.reject(r);
            }
        });

    }).fail(function (r) {
        deferred.reject(r);
    });
    return deferred.promise;
}

//var message = {
//    pl:{
//        "sfz": "", //shenfenzheng or user national id number
//        "xm": "",  //xingming or user full name
//        "zz": ""   //zhengzhao or user id photo buffer //must be provided when executing the validatePhoto method.
//    },
//    "method":""   //method to be executed, this could take value 'validateID' or 'validatePhoto'
//}

//id
//{ LZBIZCODE: 'NO',  // error code
//    LZGMSFHM: '一致', // validation result of the id number
//    LZBIZDESC: ' 身份证号:一致 姓名:一致', // validation result discription
//    LZNAME: '王盛超',  // name to be validated
//    LZXM: '一致', // validation result of the name
//    LZXP: '',
//    LZSID: '371121198806032772' // id to be validated }

//photo
//{ LZBIZCODE: 'NO',    // error code
//    LZGMSFHM: '一致', // validation result of the id number
//    LZBIZDESC: '身份证号:一致 姓名:一致 照片分值:53 照片分析结果:系统判断为同一人', // validation result discription
//    LZXPFS: '53', //similirity number
//    LZNAME: '王盛超', // name to be validated
//    LZXM: '一致', // validation result of the name
//    LZXPFX: '系统判断为同一人', // conclusion of validation
//    LZSID: '371121198806032772' // id to be validated }

function upm_validateUserInfo(m){
    var deferred = Q.defer();
    var r = {"pl": null, "er": null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    console.log("upm_validateUserInfo message:",m);
    Q().then(function runScript(){
        console.log("running script on", m.pl.zz);
        if(m.pl.zz && m.pl.zz.urls)
        {
            var uuid = lib.getUuidFromUri(m.pl.zz.urls).split("_")[0];
            var extension = lib.getExtensionFromUri(m.pl.zz.urls);
            return storageBucketManager('loadphoto',uuid,extension,null,null);
        }
        else return undefined;
    })
        .then(function (bucketreply){
            if((m.method === 'validatePhoto') && m.pl && m.pl.xm && m.pl.sfz && m.pl.zz && bucketreply && bucketreply.pl){
                console.log("COMMING BACK FROM BUCKET.....");
                var max_bytes = 102400;
                if(bucketreply.pl.photoSize > max_bytes){
                    //photo
                     var badpl = { "LZBIZCODE": "NA",
                     "LZGMSFHM": "NA",
                     "LZBIZDESC": "照片太大",
                     "LZXPFS": "NA",
                     "LZNAME": "NA",
                     "LZXM" : "NA",
                     "LZXPFX" :"0",
                     "LZSID": "0"};
                    r.pl = badpl;
                    r.pl.st = false;
                    console.log(r);
                    deferred.resolve(r);

                }
                else {
                    m.pl.zz = bucketreply.pl.photoData;
                    return ivsValidateUserInfo(m);
                }
            }
            else if((m.method === 'validateID') && m.pl && m.pl.xm && m.pl.sfz){
                return ivsValidateUserInfo(m);
            }
            else {
                var badpayload = { "LZBIZCODE": "NA",
                    "LZGMSFHM": "NA",
                    "LZBIZDESC": "条件非法",
                    "LZXPFS": "NA",
                    "LZNAME": "NA",
                    "LZXM" : "NA",
                    "LZXPFX" :"0",
                    "LZSID": "0"};
                r.pl = badpayload;
                r.pl.st = false;
                console.log(r);
                deferred.resolve(r);
            }
        })
    //.then(function validate(res){
    //        console.log("validate res is",res);
    //        if(res && res.pl) {
    //            m.pl.zz = res.pl.photoData;
    //            var max_bytes = 102400
    //            if (res.pl.photoSize > max_bytes) {
    //                //fail
    //
    //                r.er = {
    //                    ec: '',
    //                    em: "Image too large: is " + res.pl.photoSize + " bytes, but must be less than " + max_bytes
    //                };
    //                deferred.reject(r);
    //            }
    //        }
    //        console.log("M entering ivsValidate is:",m);
    //        return ivsValidateUserInfo(m)
    //})
    .then(function (reply){
         //photo validation
         if((reply.pl.LZGMSFHM === '一致') && (reply.pl.LZXM === '一致') && (reply.pl.LZXPFX === '系统判断为同一人') && (reply.pl.LZXPFS)){
             r.pl = reply.pl;
             r.pl.st = true;
             console.log(r);
             deferred.resolve(r);
         }
         //id validation
         //@Todo create update user profile with validation info
         else if(!m.skipProfileUpdate && (!reply.pl.LZXPFS)&& (reply.pl.LZGMSFHM === '一致') && (reply.pl.LZXM ==='一致') && (!reply.pl.LZXPFS)){

             r.pl = reply.pl;
             r.pl.st = true;
             console.log(r);
             //deferred.resolve(r);

             transactionHelper.getNextSequence('userValidationCode')
                 .then(function(code){
                     PersonalModel.readByUserAccountID(m.pl.loginName,credential,function( paramError, paramData ){
                         console.log("RESULT TO UPDATE:",paramData);
                         if(paramData){
                                 paramData.vs = '已实名认证';
                                 paramData.private.fullName.value = m.pl.xm;
                                 var sfz = m.pl.sfz;
                                 paramData.private.IDNumber.value = sfz.substring(0,1) + "****************" + sfz.substring(sfz.length-1,sfz.length);
                                 paramData.lzID = code.seq;
                                 paramData.save(function(paramError, paramPersonal){
                                     if (!paramError) {
                                         console.log("RESOLVING WITH",paramPersonal);
                                         // need to send the result of previous validation instead
                                         //r.pl = paramPersonal;
                                         deferred.resolve(r);
                                     }
                                     else {
                                         console.log("Error updating personal profile:",paramError);
                                         r.er = {ec:'', em: paramError};
                                         deferred.reject(r);
                                     }
                                 });
                         }
                         else if (paramError) {
                             r.er = {ec:'', em: paramError};
                             deferred.reject(r);
                         }
                         else if (!paramData){
                             PersonalModel.create({userAccountID:m.pl.loginName}, function(parammError, paramData){
                                 if(paramData){
                                     paramData.vs = '已实名认证';
                                     paramData.private.fullName.value = m.pl.xm;
                                     var sfz = m.pl.sfz;
                                     paramData.private.IDNumber.value = sfz.substring(0,1) + "****************" + sfz.substring(sfz.length-1,sfz.length);
                                     paramData.lzID = code.seq;
                                     paramData.save(function(paramError, paramPersonal){
                                         if (paramPersonal) {
                                             console.log("RESOLVING WITH",paramPersonal);
                                             //r.pl = paramPersonal;
                                             deferred.resolve(r);
                                         }
                                         else {
                                             console.log("Error updating personal profile:",paramError);
                                             r.er = {ec:'', em: paramError};
                                             deferred.reject(r);
                                         }
                                     });
                                 }
                                 else if (parammError) {
                                     r.er = parammError;
                                     deferred.reject(r);
                                 }
                             });
                         }

                     });
                 });
             }
         else{
             r.pl = reply.pl;
             r.pl.st = false;
             console.log(r);
             deferred.resolve(r);
         }

     }).fail(function (reply){
         deferred.reject(reply);
     });

    return deferred.promise;
};

function upm_updateStatus(m) {
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    m = {pl:m.pl.response};
    console.log('upm_getCorporateDataFromValidationResponse-------');
    console.log("WAS PASSED",m);
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {$or:[{'ow.oID': m.pl.ow.oid},{'s.grp.uid': m.pl.ow.oid}]};
    var fields = m.pl.fd.fields;


     transactionHelper.getNextSequence('userValidationCode')
         .then(function(code){

            console.log('code----',code,credential);

             CorporateModel.findOne(lib.authTransform(query,'w',credential), function (paramError, paramPhotoJson) {

                 if (!paramError) {

                     if(paramPhotoJson){
                         console.log(paramPhotoJson);

                         paramPhotoJson.basic.vs = '已单位认证';
                         paramPhotoJson.basic.lzID = code.seq;
                         paramPhotoJson.basic.corporationName.value = fields.corporationName;
                         paramPhotoJson.basic.corporationPublicName.value = fields.corporationPublicName||fields.corporationName;
                         paramPhotoJson.basic.corporationType.value = fields.corporationType;
                         paramPhotoJson.basic.businessLicenseNumber.value = fields.businessLicenseNumber;
                         paramPhotoJson.basic.organizationCode.value = fields.organizationCode;
                         paramPhotoJson.basic.address.value = fields.address;
                         paramPhotoJson.basic.userApplicationForm.uri.value = fields.userApplicationForm?fields.userApplicationForm.split('#')[0]:'无';
                         paramPhotoJson.basic.userApplicationForm.name.value = fields.userApplicationForm?fields.userApplicationForm.split('#')[1]:'无';
                         paramPhotoJson.basic.userIdDocument.uri.value = fields.userIdDocument?fields.userIdDocument.split('#')[0]:'无';
                         paramPhotoJson.basic.userIdDocument.name.value = fields.userIdDocument?fields.userIdDocument.split('#')[1]:'无';
                         paramPhotoJson.basic.businessLicenseDocument.uri.value = fields.businessLicenseDocument?fields.businessLicenseDocument.split('#')[0]:'无';
                         paramPhotoJson.basic.businessLicenseDocument.name.value = fields.businessLicenseDocument?fields.businessLicenseDocument.split('#')[1]:'无';
                         paramPhotoJson.basic.organizationCodeDocument.uri.value = fields.organizationCodeDocument?fields.organizationCodeDocument.split('#')[0]:'无';
                         paramPhotoJson.basic.organizationCodeDocument.name.value = fields.organizationCodeDocument?fields.organizationCodeDocument.split('#')[1]:'无';


                         paramPhotoJson.contacts.name.value = fields.contactname;
                         paramPhotoJson.contacts.position.value = fields.contactposition;
                         paramPhotoJson.contacts.phone.value = fields.contactphone;


                         paramPhotoJson.others.tradeMarkName.value = fields.tradeMarkName;
                         paramPhotoJson.others.officialWechatAccount.value = fields.officialWechatAccount;
                         paramPhotoJson.others.tramarkRegistrationCertificate.uri.value = fields.tramarkRegistrationCertificate?fields.tramarkRegistrationCertificate.split('#')[0]:'无';
                         paramPhotoJson.others.tramarkRegistrationCertificate.name.value = fields.tramarkRegistrationCertificate?fields.tramarkRegistrationCertificate.split('#')[1]:'无';
                         paramPhotoJson.others.tramarkCopyRightFile.uri.value = fields.tramarkCopyRightFile?fields.tramarkCopyRightFile.split('#')[0]:'无';
                         paramPhotoJson.others.tramarkCopyRightFile.name.value = fields.tramarkCopyRightFile?fields.tramarkCopyRightFile.split('#')[1]:'无';
                         paramPhotoJson.others.officialWebSite.value = fields.officialWebSite;
                         paramPhotoJson.others.businessDepartmentWebSite.value = fields.businessDepartmentWebSite;
                         paramPhotoJson.others.industrytype.value = fields.industrytype;
                         paramPhotoJson.others.economictype.value = fields.economictype;

                         paramPhotoJson.others.bankingInfo.accountNumber.value = fields.bankingInfoAccountNumber;
                         paramPhotoJson.others.bankingInfo.bankName.value = fields.bankingInfoBankName;
                         paramPhotoJson.others.bankingInfo.alipayAccount.value = fields.bankingInfoAlipayAccount;

                         paramPhotoJson.others.contacts.copyRightManager.name.value = fields.copyRightManagerName;
                         paramPhotoJson.others.contacts.copyRightManager.phone.value = fields.copyRightManagerPhone;
                         paramPhotoJson.others.contacts.copyRightManager.otherContactInfos.push({value:fields.copyRightManagerOtherContactInfos});

                         paramPhotoJson.others.contacts.verificationManager.name.value = fields.verificationManagerName;
                         paramPhotoJson.others.contacts.verificationManager.phone.value = fields.verificationManagerPhone;
                         paramPhotoJson.others.contacts.verificationManager.otherContactInfos.push({value:fields.verificationManagerOtherContactInfos});


                         paramPhotoJson.save(function (err) {

                             if(!err){

                                 console.log('upm saved corporate info----', paramPhotoJson);
                                 r.pl = paramPhotoJson;
                                 deferred.resolve(r);
                             }
                             else{

                                 console.log(' upm error--',err);
                                 r.er = {ec:'', em: err};
                                 deferred.reject(r);

                             }

                         });

                     }
                     else{

                         console.log('bmm_updateResponsePhotoByResponseCode', paramPhotoJson);
                         r.pl = paramPhotoJson;
                         deferred.resolve(r);

                     }

                 }
                 else {

                     console.log('upm Error --',paramError);

                     r.er = {ec:'', em: paramError};

                     deferred.reject(r);
                 }
             });


         })




    return deferred.promise;

}

function upm_BindWXuser(m){

    var deferred = Q.defer();
    //var m = {pl:{"code":"03140b54055f2da36a123fa4ba2949cg", "loginName": "jack"}};
    getWexinUserInformation(m).then(function(res){

            deferred.resolve(res);
        //@todo find user and add weixin id, as we did for mobile phone, after this user can also login with weixin account id

     },

    function(err){

        console.log('err----',err);
        r.er = err;
        deferred.reject(r);


    })
    return deferred.promise;
}




function upm_updateWeixin(m) {

    console.log('upm_updateWeixin-------');

    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    var query = {userAccountID:m.pl.userAccountID};

     PersonalModel.findOne(query, function (paramError, paramJson) {

                if (!paramError) {


                    if(paramJson){

                        paramJson.contacts.linkToWechat.value = m.pl.weixin.name;
                        paramJson.basic.weixinAvatar = m.pl.weixin.avatar;

                        paramJson.save(function(err, returnJson){

                            if(!err){
                                r.pl = returnJson;
                                deferred.resolve(r)
                            }
                            else{

                                r.er = err;
                                console.log('scm error in save user mobile----------',err);
                                deferred.reject(r);
                            }
                        });

                    }
                    else{
                        r.er = 'user not found';
                        console.log('user profile not found-----');
                        deferred.reject(r);
                    }

                }
                else {

                    console.log('upm Error --',paramError);

                    r.er = {ec:'', em: paramError};

                    deferred.reject(r);
                }
            });



    return deferred.promise;

}



exports.operations = [
                        init,
                        upm_validateUserInfo,
                        createPersonalProfile,
                        upm_readCorporateInfo,
                        upm_updateCorporationDetailsAudios,
                        upm_updateCorporationDetailsVideos,
                        upm_updateCorporationDetailsImages,
                        upm_uploadCorporationLogo,
                        readCorporateDetailPageByID,
                        updateCorporateDetailProfile,
                        updatePersonalProfile,
                        readPersonalProfileByUserID,
                        getUserNavigation,
                        upm_uploadAvatar,
                        upm_updateCorporationDetailsDescription,
                        upm_updateCorporationDetailsFAQ,
                        upm_updateStatus,
                        upm_getCorporateDetailPages,
                        upm_BindWXuser,
                        upm_updateWeixin
                    ];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});