/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


'use strict';
var mongoose = null; //mongoose object

var Q = require('q');
var TransactionSchema = null;
var Transaction = null;

function init(m) {
    var r = {pl: null, er: ''}
      ,message = null;   // message function
    if (!(m.pl.fn instanceof Function)) {
        r.er = {ec: null, em: 'Payload pl is not a function'};
        return Q.fail(r);
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    });

    return Q.all([p1]).then(function (r1) {
        mongoose = r1[0].pl.fn;
        console.log('\nwmm: wmm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        TransactionSchema = require('./models/Transaction.js')(mongoose);
        Transaction = mongoose.model('transactions', TransactionSchema);
        var r = {pl: {pm: 'wmm initialization done! '}, er: null};
        return Q(r);
    });

}

function _initTransaction(m){
  var transaction = {
    ct: { //creator 
      uID: m.pl.loginName
      ,oID: m.pl.currentOrganization
    },
    md: {//modified
      uID: m.pl.loginName,
      oID: m.pl.currentOrganization
    }
  };
  transaction.status='prepare';
  transaction.description=m.pl.transaction.description;
  transaction.modules=m.pl.transaction.modules;
  return transaction;
}
function setLastUpdated(arg){
  arg.entity.md = arg.entity.md || {};
  arg.entity.md.uID=arg.loginName;
  arg.entity.md.oID=arg.currentOrganization;
  arg.entity.md.lu=new Date();
}
function setCreated(arg){
  arg.entity.ct = arg.entity.ct || {};
  arg.entity.ct.uID=arg.loginName;
  arg.entity.ct.oID=arg.currentOrganization;
  arg.entity.ct.lu=new Date();
}

function createTransaction(m) {
  var r ={"pl":null, "er":null}
  ,dbTransaction
  ,er={};
  return Q()
  .then(function(){
      var d = Q.defer();
      dbTransaction = new Transaction(_initTransaction(m));
      dbTransaction.save(function(paramError,paramData){
        if(paramError){
          d.reject(paramError);return;
        }
        r.pl={transaction:paramData};
        d.resolve(r);
      });
      return d.promise;
  })
  .then(null,function(e){
      er.pl=null;
      er.er = {ec:1001,em:'In wmm createTransaction:'+e+' '};
      return Q.reject(er);
  });
}

function _updateTransaction(m) {
  var r ={"pl":null, "er":null}
  ,deferred = Q.defer()
  ,er=new Error();  
  Q().then(function(){
    var d = Q.defer();
    Transaction.findOne({'_id':m.pl.transaction._id},function(err,data){
      if(err){
        d.reject(err);
      }else{
        d.resolve(data);
      }
    });
    return d.promise;
  }).then(function(dbTransaction){
      dbTransaction.status=m.pl.status;
      dbTransaction.save(function(err,data){
        if(err){
          deferred.reject(err);return;
        }
        r.pl=data;
        deferred.resolve(r);
      });
    },function(e){
      if(!e.er){
        er.pl=null;
        er.er = {ec:1001,em:e.message};
        deferred.reject(er);
      }
      deferred.reject(e);
  });
  return deferred.promise;
}

function abortTransaction(m) {
  m.pl.status='aborted';
  return _updateTransaction(m);  
}

function wmm_rollBackTransaction(m) {
  m.pl.status='rolledback';
  return _updateTransaction(m);  
}

function commitTransaction(m) {
  m.pl.status='commited';
  return _updateTransaction(m);    
}

exports.operations = [init, createTransaction, abortTransaction,commitTransaction,wmm_rollBackTransaction];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});
