/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var md5 = require('./md5.function');
var core = require('./core.function');
var Q = require('q');

function AlipayNotification(alipay_config) {
    /**
     * HTTPS形式消息验证地址
     */
    //this.https_verify_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&';
    /**
     * HTTP形式消息验证地址
     */
    //this.http_verify_url = 'http://notify.alipay.com/trade/notify_query.do?';
    this.http_verify_url = 'http://localhost/fakeAlipay?';
    this.https_verify_url = 'https://localhost/fakeAlipay?';
    this.alipay_config = alipay_config;
}

/*
 * Method used for checking the Alipay notification as recommended by Alipay Guidelines
 * Chapter 2.2.2. Takes message with notification id (notifyId) object as parameter.
 * @param notifyId
 * @return true|false|invalid (string)
 */
AlipayNotification.prototype.validateNotification = function (m) {
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    if (null === m.pl.notifyId) {
        r.pl = 'false';
        return Q(r);
    }

    //Extract payload from message       
    var notifyId = m.pl.notifyId; //Alipay notification id
    //Configuration variables
    var partnerId = this.alipay_config['partner'].trim();
    var cacert = this.alipay_config['cacert'];
    var transport = this.alipay_config['transport'].trim().toLowerCase(); // http or https 
    var port = this.alipay_config['port'];
    //Build verify URL
    var verifyUrl = '';
    if (transport === "https") {
        verifyUrl = this.https_verify_url + "partner=" + partnerId + "&notify_id=" + notifyId;
    }
    else {
        verifyUrl = this.http_verify_url + "partner=" + partnerId + "&notify_id=" + notifyId;
    }
    //Partner signature generated with transaction details
    //var isSign = this.verifyPartnerSignature(m);
    //connect parameters
    var httpParam = {pl: {verifyUrl: verifyUrl, cacert: cacert, port: port}, er: null};
    core.getHttpResponseGET(httpParam)
            .then(function (response) {
                r.pl = response.pl;
                console.log('\nSTEP 3: GET ALIPAY RESPONSE:', response);
                console.log('response:',response.pl);
               
                if (response.pl === "true") {
                    r = response;
                }
                deferred.resolve(r);
            })
            .fail(function (error) {
                r.er = error;
                console.log('\nSTEP 3: GET ALIPAY RESPONSE ERROR:', error);
                deferred.reject(r);
            });
    return deferred.promise;
};

/**
 * Verify the signature using MD5
 * @param para_temp arry of paramenters used in the signature
 * @param signature Partner signature
 * @return Signature verification results true/false
 */
AlipayNotification.prototype.verifyPartnerSignature = function (m) {
    //Temp Variables
    var tempSignature = m.pl.signature;
    //Extract payload parameters
    var signature = m.pl.signature;
    //Configuration variables
    var signatureType = this.alipay_config['signatureType'].trim().toUpperCase();
    var apiKey = this.alipay_config['apiKey'];
    //Filter parameters
    var filteredParams = core.paraFilter(m.pl);
    //Sort Arguments
    var sortedParams = core.argSort(filteredParams);
    //Build URL string
    var preString = core.createLinkstring(sortedParams);
    var isSign = false;
    if (signatureType == "MD5") {
        isSign = md5.md5Verify(preString, signature, apiKey);
    }
    else {
        isSign = false;
    }
    return isSign;
};

exports.AlipayNotification = AlipayNotification;
