/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var qs = require('querystring');
var fs = require('fs');
//var https = require('https');
//var http = require('http');
var http = require("q-io/http");
//var rp = require('request-promise');
var md5 = require('./md5.function');
var Q = require('q');

/**
 * 远程获取数据，POST模式
 * 注意：
 * 1.使用Crul需要修改服务器中php.ini文件的设置，找到php_curl.dll去掉前面的";"就行了
 * 2.文件夹中cacert.pem是SSL证书请保证其路径有效，目前默认路径是：getcwd().'\\cacert.pem'
 * @param url 指定URL完整路径地址
 * @param cacert_url 指定当前工作目录绝对路径
 * @param para 请求的数据
 * @param input_charset 编码格式。默认值：空值
 * return 远程输出的数据
 */
exports.getHttpResponsePOST = function (m) {
    //Extract payload from message
    var url = m.pl.url;
    var cacertPath = m.pl.cacert;
    var parameters = m.pl.parameters;
    var inputCharset = m.pl.inputCharset;
    var port = m.pl.port;
    //Set charset options
    inputCharset = inputCharset || '';
    if (inputCharset.trim() != '') {
    //    url = url + "_input_charset=" + inputCharset;
    }
    //URL to post request to
    var parsed_url = require('url').parse(url);
    var para_str = qs.stringify(parameters);
    //Promise response
    var r = {pl: "", er: null};
    var deferred = Q.defer();
    //Set request options
    var options = {
        hostname: parsed_url.host,
        port: port,
        path: parsed_url.path,
        method: 'POST',
        body:[para_str],
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(para_str)
        }
    };
    //Fetch certificate, if one is defined
    if (cacertPath.trim() !== '') {
        options.cert = fs.readFileSync(cacertPath);
    }
    //Make request 
    console.log('GOING TO FETCH RESPONSE',options);
     http.request(options).then(function (response) {
        var responseText = '';
        response.body.forEach(function (chunk) {
            responseText += chunk;
        });
        r.pl = responseText;
        deferred.resolve(r);
    }).fail(function (error) {
        console.log(error);
        r.er = error;
        deferred.reject(r);
    });
    return deferred.promise;
    
};

/**
 * 远程获取数据，GET模式
 * 注意：
 * 1.使用Crul需要修改服务器中php.ini文件的设置，找到php_curl.dll去掉前面的";"就行了
 * 2.文件夹中cacert.pem是SSL证书请保证其路径有效，目前默认路径是：getcwd().'\\cacert.pem'
 * @param url with parameters
 * @param cacert path to certificate
 * return invalid | true | false
 */
exports.getHttpResponseGET = function (m) {
    //console.log('REQUEST:',m);
    //Extract message payload
    var url = m.pl.verifyUrl;
    var cacert_url = m.pl.cacert;
    var parsed_url = require('url').parse(url);
    var port = m.pl.port;
    //Initialize promisse
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    //Set request options
    var options = {
        hostname: parsed_url.host,
        port: port,
        path: parsed_url.path,
        method: 'GET'
    };

    //Fetch certificate, if defined
    if (cacert_url.trim() !== '') {
        console.log("CACERT_URL = ",cacert_url);
        console.log("CWD:",process.cwd());
        console.log("DIR:",__dirname);
        options.cert = fs.readFileSync(cacert_url);
    }
    //Make request  
    console.log('\nSTEP 2: MAKE VERIFICATION GET REQUEST TO: ', m.pl);
    http.request(options).then(function (response) {
        var string = '';
        response.body.forEach(function (chunk) {
            string += chunk;
        });
        r = JSON.parse(string);
        console.log("GOT// RESPONSE:",r);
        deferred.resolve(r);
    }).fail(function (error) {
        r.er = error;
        deferred.reject(r);
    });
return deferred.promise;    
};


/**
 * 除去对象中的空值和签名参数
 * @param para 签名参对象
 * return 去掉空值与签名参数后的新签名参对象
 */
exports.paraFilter = function (parameters) {
    var para_filter = new Object();
    for (var key in parameters) {
        if (key == 'signature' || key == 'signatureType' || parameters[key] == '') {
            continue;
        }
        else {
            para_filter[key] = parameters[key];
        }
    }
    return para_filter;
};

/**
 * 把对象所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串
 * @param para 需要拼接的对象
 * @return string with parameters in URL
 */
exports.createLinkstring = function (parameters) {
    //return qs.stringify(para);
    var ls = '';
    for (var k in parameters) {
        ls = ls + k + '=' + parameters[k] + '&';
    }
    ls = ls.substring(0, ls.length - 1);
    return ls;
};

/**
 * Method to sort arguments
 * @param para 排序前的对象
 * return object of sorted parameters
 */
exports.argSort = function (parameters) {
    var result = new Object();
    var keys = Object.keys(parameters).sort();
    for (var i = 0; i < keys.length; i++) {
        var k = keys[i];
        result[k] = parameters[k];
    }
    return result;
};

/**
 * 实现多种字符编码方式
 * @param input 需要编码的字符串
 * @param _output_charset 输出的编码格式
 * @param _input_charset 输入的编码格式
 * return 编码后的字符串
 */
exports.charsetEncode = function (input, _output_charset, _input_charset) {
    var output = "";
    _output_charset = _output_charset || _input_charset;
    if (_input_charset == _output_charset || input == null) {
        output = input;
    }
    else {
        //var iconv = new Iconv(_input_charset,_output_charset);
        //output = iconv.convert(input);
    }
    return output;
};

/**
 * 实现多种字符解码方式
 * @param input 需要解码的字符串
 * @param _output_charset 输出的解码格式
 * @param _input_charset 输入的解码格式
 * return 解码后的字符串
 */
exports.charsetDecode = function (input, _input_charset, _output_charset) {
    var output = "";
    _input_charset = _input_charset || _output_charset;
    if (_input_charset == _output_charset || input == null) {
        output = input;
    }
    else {
        //var iconv = new Iconv(_input_charset,_output_charset);
        //output = iconv.convert(input);
    }
    return output;
};

/**
 * 把对象所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串，并对字符串做urlencode编码
 * @param para 需要拼接的对象
 * return 拼接完成以后的字符串
 */
exports.createLinkstringUrlencode = function (m) {
    var parameters = m.pl.parameters;
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    try {
        r.pl.value = qs.stringify(parameters);
        deferred.resolve(r);
    } catch (error) {
        r.er = error;
        deferred.reject(r);
    }
    return deferred.promise;
};