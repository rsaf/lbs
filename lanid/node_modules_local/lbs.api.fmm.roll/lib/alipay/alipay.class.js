/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var core = require('./core.function');
var xml2js = require('xml2js');
var AlipayNotification = require('./notification.class').AlipayNotification;
var AlipaySubmit = require('./submit.class').AlipaySubmit;
var Q = require('q');
var default_alipay_config = {
    partner: '',
    apiKey: '',
    sellerEmail: '',
    host: 'http://localhost/',
    port:9090,
    cacert: '',
    transport: 'http',
    inputCharset: 'utf-8',
    signatureType: 'MD5',
    //httpsVerifyUrl: 'https://mapi.alipay.com/gateway.do?service=notify_verify&',
    //httpVerifyUrl: 'http://notify.alipay.com/trade/notify_query.do?',
    http_verify_url : 'http://localhost/fakeAlipay?',
    https_verify_url : 'https://localhost/fakeAlipay?',
    alipayGateway: 'https://mapi.alipay.com/gateway.do?'
};

//Class constructor
function Alipay(alipay_config) {
    //default config
    /*
    this.alipay_config = default_alipay_config;
    //config merge
    for (var key in alipay_config) {
        this.alipay_config[key] = alipay_config[key];
    }
    */
    this.alipay_config = alipay_config;
}
;
/* verifyUserPayment
 * Single Transaction Query Interface: requests information from Alipay about a single transaction.
 * @params out_trade_no
 * @return is_success[T,F], trade_no, out_trade_no, subject, trade_status[WAIT_BUYER_PAY,TRADE_FINISHED,TRADE_CLOSED]
 * */
Alipay.prototype.verifyUserPayment = function (m) {
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    //var self = this;
    var alipaySubmit = new AlipaySubmit(this.alipay_config);
    //Add service
    m.pl.service = 'notify_verify';//'single_trade_query';
    //Make request to Alipay
    alipaySubmit.buildRequestHttp(m)
            .then(function (response) {
                var parser = new xml2js.Parser({explicitRoot: false, trim: true});
                //Parse response XML into JSON
                return parser.parseString(response.pl, function (err, xml) {
                    if (err) {
                        console.log("FAIL PARSE!",err)
                        r.er = err;
                        return Q.fail(r);
                    }
                    //Payment was successful, get params
                    xml = JSON.parse(JSON.stringify(xml));
                    if (xml.is_success[0] === "T") {
                        console.log("SUCCESSFUL PAYMENT: ",xml.response[0].trade[0])
                        r.pl = {
                            is_success: true,
                            trade_no: xml.response[0].trade[0].trade_no[0],
                            out_trade_no: xml.response[0].trade[0].out_trade_no[0],
                            subject: xml.response[0].trade[0].subject[0],
                            trade_status: xml.response[0].trade[0].trade_status[0]
                        };
                    }
                    //Payment was not successful, get error
                    else {
                        console.log("UNSUCCESSFUL PAYMENT: ",xml.error[0]);
                        r.pl = {
                            is_success: false,
                            trade_status: xml.error[0]
                        };
                    }
                    deferred.resolve(r);
                });
            })
            .fail(function (error) {
            console.log("PROPER FAIL:",error);
                r.er = error;
                deferred.reject(r);
            });
    return deferred.promise;

};

/*
 * verifyAlipayNotification
 * After making payment with Alipay a notification message will be sent from Alipay to the notification URL. 
 * This method checks with Aliipay wether the information contained in the notification is valid or not.
 * @params notify_id
 * @return true | false | invalid
 */
Alipay.prototype.verifyAlipayNotification = function (m) {
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    if (null === m.pl.notifyId) {
        r.pl = 'false';
        return Q(r);
    }

    //Extract payload from message       
    var notifyId = m.pl.notifyId; //Alipay notification id
    //Configuration variables
    var partnerId = this.alipay_config['partner'].trim();
    var cacert = this.alipay_config['cacert'];
    console.log("CACERT inside alipay verify is",cacert);
    var transport = this.alipay_config['transport'].trim().toLowerCase(); // http or https 
    var port = this.alipay_config['port'];
    //Build verify URL
    var verifyUrl = '';
    if (transport === "https") {
        verifyUrl = this.alipay_config['https_verify_url'] + "partner=" + partnerId + "&notify_id=" + notifyId;
    }
    else {
        verifyUrl = this.alipay_config['http_verify_url'] + "partner=" + partnerId + "&notify_id=" + notifyId;
    }
    //Partner signature generated with transaction details
    //var isSign = this.verifyPartnerSignature(m);
    //connect parameters
    var httpParam = {pl: {verifyUrl: verifyUrl, cacert: cacert, port: port}, er: null};
    core.getHttpResponseGET(httpParam)
            .then(function (response) {
                r.pl = response.pl;
                console.log('\nSTEP 3: GET ALIPAY RESPONSE:', response);
                console.log('response:',response.pl);
               
                if (response.pl === "true") {
                    r = response;
                }
                deferred.resolve(r);
            })
            .fail(function (error) {
                r.er = error;
                console.log('\nSTEP 3: GET ALIPAY RESPONSE ERROR:', error);
                //TODO <always accept>
                //r.er = null;
                //r.pl = true;
                //deferred.resolve(r);
                deferred.reject(r);
                //TODO </always accept>
            });
    return deferred.promise;
};

/*
 * verifyAlipayReturn
 * After making payment with Alipay user is redirected to a previously provided return URL. 
 * This method checks with Aliipay wether the information contained in the retur URL is valid or not.
 * @params notify_id
 * @return out_trade_no | trade_no | trade_status [WAIT_BUYER_PAY|WAIT_SELLER_SEND_GOODS|WAIT_BUYER_CONFIRM_GOODS|TRADE_FINISHED]
 */
Alipay.prototype.verifyAlipayReturn = function (_GET) {
    var r = {pl: null, er: null};
    var deferred = Q.defer();
    //If message object is empty, stop with error.
    if (Object.keys(_GET).length == 0) {
        r.er = "No parameters defined";
        deferred.reject(r);
        return deferred.promise;
    }
    else {
        var get = {pl: null, er: null};
        for (var key in _GET) {
            get.pl[key] = _GET[key];
        }
        var alipayNotification = new AlipayNotification(this.alipay_config);
        alipayNotification.validateNotification(get).then(function (response) {
            // If validation is successful (true)
            if (response.pl) {
                r.pl = {
                    out_trade_no: _GET['out_trade_no'],
                    trade_no: _GET['trade_no'],
                    trade_status: _GET['trade_status']
                };
                r.pl = response.pl;
                deferred.resolve(r);
            }
            // Validation returned false
            else {
                r.er = "Error: Return URL could not be verified";
                deferred.reject(r);
            }
        }).fail(function (error) {
            r.er = error;
            deferred.reject(r);
        });
        return deferred.promise;
    }
};

/*
 * getAlipayUrl
 * Returns a valid URL to redirect the user to alipay direct payment
 * @params out_trade_no ,price , subject , body [optional]
 * return out_trade_no ,price , subject , body [optional] , partner , payment_type , currency , notify_url , 
 * return_url, seller_email, sign, sign_type , _input_charset
 */
Alipay.prototype.getAlipayUrl = function (m) {
    var r = {"pl": null, "er": null};
    var deferred = Q.defer();
    //If message object is empty, stop with error.
    if (Object.keys(m).length == 0) {
        r.er = "No parameters defined";
        deferred.reject(r);
    }
    else {
        var alipaySubmit = new AlipaySubmit(this.alipay_config);
        r.pl = this.alipay_config.alipayGateway + alipaySubmit.getRequestParameters(m);
        deferred.resolve(r);
    }
    return deferred.promise;
};
exports.Alipay = Alipay;
