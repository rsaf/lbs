/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var express = require('express');
//Server settings
var ws = express();
var app = require('http').createServer(ws);
var io = require('socket.io').listen(app.listen(9090));
var redis = require('socket.io-redis');

// Web Server Settings
//ws.set('port', process.env.PORT || 80);
//ws.listen(ws.get('port'), function () {
//    console.log(" Web Server Simulator Using Node.js Running on Port " + ws.get('port'));
//});

var logger = require('morgan');
var fs = require('fs');
var fmm = require('../fmm_Interface.js');
var bodyP = require('body-parser');
var oCMM = require('cmm');

//Socket io clients
clients = [];

//Build the initial API message
//Makes models a dependency for the API to run correctly
//function dependency(m) {
//    var dependency = {er: '',
//        pl: {
//            fn: fmm.fmm_models
//        }
//    };
//    return dependency;
//}
//
////Sets Namespace and returns dependency value
//function message(m) {
//    if (m.op === 'dependency')
//    {
//        m.ns = 'fmm';
//        return dependency(m);
//    }
//}
//var init_message = {
//    'op': 'init',
//    ns: '',
//    'pl': {fn: message}
//};


function messageESB(m) {
    if (m.op === 'dependency')
    {
        m.ns = 'fmm';
        return oCMM.dependency(m);
    }
}
var init_message = {
    'op': 'init',
    ns: '',
    'pl': {fn: messageESB}
};



console.log('\n Initiating fmm ....');
oCMM.init(init_message).then(function (r) {
    console.log('reply from cmm init', r);
    fmm.init(init_message).then(function (r1) {

        console.log('reply from fmm init', r1);

    }).fail(function (r) {
        console.log(r);
    });
}).fail(function (r) {
    console.log(r);
});


//fmm.fmm_init(init_message);

ws.use(bodyP.json());
ws.use(bodyP.urlencoded({extended: true}));

ws.use(logger('dev'));
//Socket io


//getting redis depedencies

messageESB({
    op: 'dependency',
    ns: 'bs',
    pl: {dn: 'redis'}
}).then(function (r) {
    var redisClient = r[0].pl.fn;
    console.log('redisclient', redisClient);

    io.adapter(redisClient);

    //all functions requiring io needs to be nested inside here..
});

io.on('connection', function (socket) {
    console.log('A socket connected! ID:' + socket.id);
    //clients.push(socket);
    socket.on('alipayRequest', function (data) {
        console.log("SOCKET REQUEST RECEIVED FROM CLIENT:", data);
        socket.id = data.pl.transactionId;
        console.log(socket.id);
        //clients[socket].emit('my message', msg);
    });
    socket.on('disconnect', function () {
        console.info('Client has disconnected. ID:' + socket.id);
    });
});

//Main Page
ws.get('/', function (req, res, next) {
    console.log('getting home');
    var startPage = __dirname + '/index.html';

    fs.readFile(
            startPage,
            function (err, contents) {
                if (err) {
                    send_failure(res, err);
                    return;
                }
                contents = contents.toString('utf8');
                res.writeHead(200, {"Content-Type": "text/html"});
                res.end(contents);
            }
    );
}
);
ws.use("/css", express.static(__dirname + '/css'));
ws.use("/js", express.static(__dirname + '/js'));
//ws.get('/profile.json', profileHandler);
//ws.use(express.static('../static'));
//Call this url manually in order to simulate Alipay Notify Response. Result will be either true | false | invalid
ws.post('*/alipayNotify', function (paramRequest, paramResponse, next)
{
    var contents = fmm.fmm_alipayNotification(
            {
                pl: {
                    notifyId: paramRequest.body.pl.notifyId,
                    accountId: paramRequest.body.pl.accountId,
                    transactionAmount: paramRequest.body.pl.transactionAmount,
                    transactionId: paramRequest.body.pl.transactionId
                }
            })
            .then(function (response) {
                var transactionId = response.pl.transactionId;
                contents = JSON.stringify(response);
                console.log('SUCCESSFUL...STARTING SOCKET:', response);
                return io.to(transactionId).emit('alipayResponse', contents);
            })
            .then(function () {
                contents = JSON.stringify(order);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
                console.log("Message Sent to Client!");
            })
            .fail(function (error) {
                var r = {pl: null, er: error};
                io.to(transactionId).emit('alipayResponse', r);

            });
}
);

//Fake Alipay System. Will always respond true.
ws.get('*/fakeAlipay', function dummyData(paramRequest, paramResponse)
{
    var r = {pl: 'true', er: null};
    console.log('\nSTEP 3: ALIPAY ENDPOINT SAYS:', r);
    paramResponse.writeHead(200, {"Content-Type": "application/json"});
    paramResponse.end(JSON.stringify(r));
}
);
//Fake alipay post reponse
ws.post('*/fakeAlipay', function dummyData(paramRequest, paramResponse)
{
    console.log('GOT POST Request');
    fs.readFile('fake.xml', "utf8", function (err, data) {
        if (err)
            throw err;
        paramResponse.writeHead(200, {'Content-Type': 'text/xml'});
        paramResponse.end(data);
    });
});

//Verify the user balance in the financial account
ws.post('*/verifyUserBalance', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_verifyUserBalance(
            {
                pl: {
                    accountId: paramRequest.body.pl.accountId,
                    accountType: paramRequest.body.pl.accountType
                }
            })
            .then(function (balance) {
                contents = JSON.stringify(balance);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
}
);
//Create a new account for the user
ws.post('*/createAccount', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_createAccount(
            {
                pl: {
                    accountId: paramRequest.body.pl.accountId,
                    accountType: paramRequest.body.pl.accountType,
                    accountBalance: paramRequest.body.pl.accountBalance
                },
                er: null
            })
            .then(function (account) {
                contents = JSON.stringify(account);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
}
);
//Sell credits
ws.post('*/sellCredits', function dummyData(paramRequest, paramResponse) {
    var contents = fmm.fmm_sellCredits({
        pl: {
            accountId: paramRequest.body.pl.accountId,
            serviceId: paramRequest.body.pl.serviceId,
            transactionId: paramRequest.body.pl.transactionId,
            orderAmount: paramRequest.body.pl.orderAmount
        }, er: null
    })
            .then(function (response) {
                contents = JSON.stringify(response);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
});
//Get all pending credit sales
ws.post('*/getCreditSales', function dummyData(paramRequest, paramResponse) {
    var contents = fmm.fmm_getPaymentOrders({
        pl: {
            where: {
                serviceType: 'CREDIT_SALE',
                orderStatus: 'pending'
            }
        }, er: null
    })
            .then(function (response) {
                contents = JSON.stringify(response);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
});

//Confirm Credit Sales
ws.post('*/confirmCreditSales', function dummyData(paramRequest, paramResponse) {
    var contents = fmm.fmm_confirmCreditSale({
        pl: {
            orderId: paramRequest.body.pl.orderId
        },
        er: null
    })
            .then(function (response) {
                contents = JSON.stringify(response);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
});

//Create order
ws.post('*/createOrder', function dummyData(paramRequest, paramResponse) {
    var contents = fmm.fmm_createOrder(
            {
                pl: {
                    serviceType: paramRequest.body.pl.serviceType,
                    serviceName: paramRequest.body.pl.serviceName,
                    serviceId: paramRequest.body.pl.serviceId,
                    userAccountId: paramRequest.body.pl.userAccountId,
                    serviceProviderId: paramRequest.body.pl.serviceProviderId,
                    corporationId: paramRequest.body.pl.corporationId,
                    platformCommissionAmount: paramRequest.body.pl.platformCommissionAmount,
                    agentCommissionAmount: paramRequest.body.pl.agentCommissionAmount,
                    agentId: paramRequest.body.pl.agentId,
                    orderAmount: paramRequest.body.pl.orderAmount,
                    transactionId: paramRequest.body.pl.transactionId,
                    paymentType: paramRequest.body.pl.paymentType
                },
                er: null
            }
    ).then(function (order) {
        contents = JSON.stringify(order);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    }).fail(function (error) {
        contents = JSON.stringify(error);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    });
});
//Make a manual money transfer
ws.post('*/recordPayment', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_recordPayment(
            {
                pl: {
                    sourceAccountId: paramRequest.body.pl.sourceAccountId,
                    destinationAccountId: paramRequest.body.pl.destinationAccountId,
                    transactionAmount: paramRequest.body.pl.transactionAmount,
                    paymentOrderId: paramRequest.body.pl.paymentOrderId
                },
                er: null
            })
            .then(function (response) {
                contents = JSON.stringify(contents);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });

}
);
//Get transaction history for a given account id
ws.post('*/getTransactionHistory', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_getTransactionHistory(
            {
                pl: {
                    accountId: paramRequest.body.pl.accountId
                }
            }).then(function (response) {
        contents = JSON.stringify(response);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    }).fail(function (error) {
        contents = JSON.stringify(error);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    });

}
);
//Verify User Payment
ws.post('*/verifyPayment', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_verifyPayment(
            {
                pl: {
                    transactionId: paramRequest.body.pl.outTradeNumber,
                    accountId: paramRequest.body.pl.accountId,
                    transactionAmount: paramRequest.body.pl.transactionAmount
                }
            });
    contents = JSON.stringify(contents);
    paramResponse.writeHead(200, {"Content-Type": "application/json"});
    paramResponse.end(contents);
}
);
//Split Platform Payment
ws.post('*/splitPayment', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_splitPayment(
            {
                pl: {
                    transactionId: paramRequest.body.pl.transactionId
                }
            });
    contents = JSON.stringify(contents);
    paramResponse.writeHead(200, {"Content-Type": "application/json"});
    paramResponse.end(contents);
}
);
//Mark order for split
ws.post('*/changeOrderStatus', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_updateOrderStatus(
            {
                pl: {
                    orderStatus: paramRequest.body.pl.orderStatus,
                    where: {
                        transactionId: paramRequest.body.pl.transactionId,
                        serviceType: 'ACTIVITY'
                    }
                },
                er: null
            })
            .then(function (status) {
                contents = JSON.stringify(status);
                console.log("RESPONSE", contents);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            })
            .fail(function (error) {
                contents = JSON.stringify(error);
                console.log("RESPONSE", contents);
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(contents);
            });
}
);

//Generate URL to Alipay and create orders
ws.post('*/makeAliPayment', function dummyData(paramRequest, paramResponse)
{
    var contents = fmm.fmm_generateAlipayUrl(
            {
                pl: {
                    transactionId: paramRequest.body.pl.transactionId,
                    subject: paramRequest.body.pl.subject,
                    transactionAmount: paramRequest.body.pl.transactionAmount,
                    orders: paramRequest.body.pl.orders
                }
            }).then(function (response) {
        contents = JSON.stringify(response);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    }).fail(function (error) {
        contents = JSON.stringify(error);
        paramResponse.writeHead(200, {"Content-Type": "application/json"});
        paramResponse.end(contents);
    });

}
);
ws.get('*', function () {
});
ws.get('*', four_oh_four);


//Helper functions
function four_oh_four(req, res) {
    res.writeHead(404, {"Content-Type": "application/json"});
    res.end(JSON.stringify(invalid_resource()) + "\n");
}

function send_failure(res, err) {
    var code = (err.code) ? err.code : err.name;
    res.writeHead(code, {"Content-Type": "application/json"});
    res.end(JSON.stringify({error: code, message: err.message}) + "\n");
}


function invalid_resource() {
    return make_error("invalid_resource",
            "the requested resource does not exist.");
}

function make_error(err, msg) {
    var e = new Error(msg);
    e.code = err;
    return e;
}



