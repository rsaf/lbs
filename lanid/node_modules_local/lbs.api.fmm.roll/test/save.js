/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var oCMM = require('cmm');
var oFMM= require('../fmm_Interface.js');

function message(m){
    if (m.op === 'dependency')
    {
        m.ns = 'fmm';

      return oCMM.dependency(m);
    }
}
var init_message = {
    'op': 'init',
     ns : '',
    'pl':{fn:message}
    };


exports.start = function (test) {
    var corporationId=500;
    var clientId=445;
    var systemId=1000;
    var paymentAmount =100;
    var transactionId = Math.floor(Math.random() * 1000);
    var ms = {ns: null, pl: null, er: null};
    ms.pl = {corporationId: systemId, accountBalance: 1500, accountType: 'System'};
    //Create System Account
    oFMM.createAccount(ms).then(function (r) {
        console.log('System Account Created:', r + "\n");
        //Create corporation account
        ms.pl = {corporationId: corporationId, accountBalance: 0, accountType: 'Corporation'};
        oFMM.createAccount(ms).then(function (r) {
             console.log('Corporation Account Created:', r + "\n");
                test.expect(4);
                test.equals(r.er, null);
                test.equals(r.pl.corporationId, ms.pl.corporationId);
                test.equals(r.pl.accountBalance, ms.pl.accountBalance);
                test.equals(r.pl.accountType, ms.pl.accountType);

            //Create client account
            vms.pl = {corporationId: clientId, accountBalance: 0, accountType: 'Client'};
            oFMM.createAccount(ms).then(function (r) {
                console.log('Client Account Created:', r + "\n");
                test.expect(4);
                test.equals(r.er, null);
                test.equals(r.pl.corporationId, ms.pl.corporationId);
                test.equals(r.pl.accountBalance, ms.pl.accountBalance);
                test.equals(r.pl.accountType, ms.pl.accountType);
                
                //Transfer Money from System to Client account
                ms.pl = {srcAccountId: systemId, destAccountId: clientId, paymentAmount: paymentAmount, transactionId: transactionId};
                //Test create account method
                oFMM.recordPayment(ms).then(function(r){
                    console.log('Transfered from System to Client Account:', r + "\n");
                    test.expect(2);
                    test.equals(r.er, null);
                    test.equals(r.pl, 'COMMIT');
                    
                    //Create Order for processing client purchase
                    ms.pl = {srcAccountId: systemId, destAccountId: clientId, paymentAmount: paymentAmount, transactionId: transactionId};
                    oFMM.createOrder(ms).then(function(r){
                        
                    })
                }).fail(function(r){
                console.log('\nTransfer to Client Account Errors:', r);
                    test.done();
                })
            }).fail(function(r){
                console.log('\nCreate Client Account Errors:', r);
                test.done();
            })
        }).fail(function(r){
            console.log('\nCreate Corportation Account Errors:', r);
            test.done();
        })
    })
            .fail(function (r) {
                console.log('\nErrors:', r);
                test.done();
            });
};
//Create an account
exports.testCreateAccount = function (test) {
    var ms = {ns: null, pl: null, er: null};
    ms.pl = {corporationId: 1000, accountBalance: 1500, accountType: 'System'};
    oFMM.createAccount(ms)
            .then(function (r) {
                console.log(r + "\n");
                test.expect(4);
                test.equals(r.er, null);
                test.equals(r.pl.corporationId, ms.pl.corporationId);
                test.equals(r.pl.accountBalance, ms.pl.accountBalance);
                test.equals(r.pl.accountType, ms.pl.accountType);
                test.done();
            }).fail(function (r) {
        console.log('\nErrors:', r);
        test.done();
    });
};
//Test MakePayment method
exports.testRecordPayment = function (test) {
    var ms = {ns: null, pl: null, er: null};
    var randomID = Math.floor(Math.random() * 1000);
    ms.pl = {srcAccountId: 1000, destAccountId: 445, paymentAmount: 100, transactionId: randomID};
    //Test create account method
    oFMM.recordPayment(ms)
            .then(function (r) {
                console.log("\n", r.pl);
                test.expect(2);
                test.equals(r.er, null);
                test.equals(r.pl, "COMMIT");
                test.done();
            }).fail(function (r) {
        console.log('\nErrors:', r);
        test.done();
    });
};
//Test Verify user balance
exports.testVerifyUserBalance = function (test) {
    var ms = {ns: null, pl: null, er: null};
    ms.pl = {accountId: 445};
    // Test verifyUserBalance method
    oFMM.verifyUserBalance(ms).then(function (r) {
        test.expect(2);
        test.equals(r.er, null);
        test.equals(r.pl.accountId, ms.pl.accountId);
        console.log('\nCurrent user Balance is:' + r.pl.accountBalance);
        test.done();
    }).fail(function (r) {
        console.log('Errors:', r.er);
        test.done();
    });
};
//Get PaymentHistory
exports.testGetTransactionHistory = function (test) {
    var ms = {ns: null, pl: null, er: null};
    ms.pl = {accountId: 445};
    oFMM.getTransactionHistory(ms).then(function (r) {
        test.expect(1);
        test.equals(r.er, null);
        test.equals(r.pl, !null);
        test.done();
    }).fail(function (r) {
        console.log('\nErrors:', r);
        test.done();
    });
};
//Test Verify Alipay Payment
exports.testVerifyPayment = function (test) {
    var ms = {ns: null, pl: null, er: null};
    var randomID = Math.floor(Math.random() * 1000);
    ms.pl = {parameters: {out_trade_no: 1234, service: 'single_trade_query'}, srcAccountId: 445, destAccountId: 340, paymentAmount: 100, transactionId: randomID};
    oFMM.verifyPayment(ms).then(function (r) {
        console.log("\nResult:", r);
        test.expect(1);
        test.equals(r.er, null);
        test.done();
    }).fail(function (r) {
        console.log('/nError:', r);
        test.done();
    });
};
exports.tearDown = function tearDown(callback) {
    console.log("\ntearing down integration testing ...");
    callback();
};
//Setup API Tests: begin...
exports.setUp = function(callback) {
    console.log('\nsetting up integration testing ....');
    oFMM.init(init_message).then(function (r) {
        console.log('SUCESS:', r);
        callback();
    }).fail(function (r) {
        console.log(r);
        callback();
    });
}
;


 exports.setUp=function setUp(callback) {
    console.log('\nsetting up integration testing ....');
    
    oFMM.init(init_message).then(function (r) {
        console.log(r);
        callback();

    }).fail(function (r) {
        console.log(r);
        callback();
    });
};

exports.tearDown = function tearDown(callback) {
    console.log("\ntearing down integration testing ...");
    callback();
};




/* 
 This is an example test suite to demonstrate the nested test reporter.
 Run with --reporter nested, e.g.,
 nodeunit --reporter nested nested_reporter_test.unit.js
 The test output should be something like:
    nested_reporter_test.unit.js
    Test 0.1 (pass)
    TC 1
      TC 1.1
        Test 1.1.1 (pass)
    TC 2
      TC 2.1
        TC 2.1.1
          Test 2.1.1.1 (pass)
          Test 2.1.1.2 (pass)
        TC 2.2.1
          Test 2.2.1.1 (pass)
          TC 2.2.1.1
            Test 2.2.1.1.1 (pass)
          Test 2.2.1.2 (pass)
    TC 3
      TC 3.1
        TC 3.1.1
          Test 3.1.1.1 (should fail) (fail) âœ– 
    AssertionError: false == true
      // stack trace here.
    FAILURES: 1/8 assertions failed (6ms)
*/

module.exports = testCase({
    "Test 0.1": function(test) {
        test.ok(true);
        test.done();
    },

    "TC 1": testCase({
        "TC 1.1": testCase({
            "Test 1.1.1": function(test) {
                test.ok(true);
                test.done();
            }
        })
    }),

    "TC 2": testCase({
        "TC 2.1": testCase({
            "TC 2.1.1": testCase({
                "Test 2.1.1.1": function(test) {
                    test.ok(true);
                    test.done();
                },

                "Test 2.1.1.2": function(test) {
                    test.ok(true);
                    test.done();
                }
            }),

            "TC 2.2.1": testCase({
                "Test 2.2.1.1": function(test) {
                    test.ok(true);
                    test.done();
                },

                "TC 2.2.1.1": testCase({
                    "Test 2.2.1.1.1": function(test) {
                        test.ok(true);
                        test.done();
                    },
                }),

                "Test 2.2.1.2": function(test) {
                    test.ok(true);
                    test.done();
                }
            })
        })
    }),

    "TC 3": testCase({
        "TC 3.1": testCase({
            "TC 3.1.1": testCase({
                "Test 3.1.1.1 (should fail)": function(test) {
                    test.ok(false);
                    test.done();
                }
            })
        })
    })
});
