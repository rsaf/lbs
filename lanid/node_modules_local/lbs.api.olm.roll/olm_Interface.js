/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//  message format
/*
 var m = {
 "ns":"olm",
 "mv": "1.00"
 "op": "readOperationsLog",
 "pl": {"userAccountID": "value1", "opType":"value2", "pageNumber":"value3", "pageSize":"value4"}
 };

 var r = {
 ns:'olm',
 "er":{ec:null, em: null},
 "pl": {},
 }
 */

'use strict';
var mongoose = null ; //mongoose object
var message = null;   //message function

var Q = require('q');
var lib = require('lib');

var LogSchema = null;
var Log = null;


function init(m) {
    if(!(m.pl.fn instanceof Function)) {
        return Q.fail({pl:null, er:{ ec: null, em: 'Payload pl is not a function'}});
    }
    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    return message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    }).then(function(r1){
        //console.log(r1);
        mongoose = r1.pl.fn;
        console.log('\nolm: olm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        LogSchema = require("./models/log.js")(mongoose);
        Log = mongoose.model('logs', LogSchema); //exposes static methods
        var r = {pl: {pm: 'olm initialization done! '}, er: null};
        return Q(r);
    });
}

function readOperationsLog(m) {
    m.mt = m.mt || {};
    //console.log("ROL:", m.mt);
    var r ={"pl":null, "er":null};
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    //paramUserAccountID, paramOpType, paramPageNumber, paramPageSize, paramCallback
    //console.log(m.pl);
    var isAdmin = m.pl.currentOrganization == "200000000000000000000000"
    if(m.pl.opType){
        var query = isAdmin?{opType: m.pl.opType}:{userAccountID:m.pl.userAccountID, opType:m.pl.opType};
    }
    else {
        var query = isAdmin?{}:{userAccountID: m.pl.userAccountID};
    }

    //console.log("Operation Log query", query);


    var filterQuery = []
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({'opName':m.mt.sk});

    //Define start date
    if(m.mt.sd) filterQuery.push({'opDate':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'opDate':{'$lte' : dateplus}})     }

    if(filterQuery.length) query['$and'] = filterQuery;

    var query = lib.authTransform(query,'r',credential);

    return Q.all([
        function(){
            return Log.find(query).sort({opDate:-1}).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }()
        ,function(){
            return Log.find(query).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,  function fail(err){
        return {er:err};
    })
}

function readOperationsLogByID(m) {
    var r ={"pl":null, "er":null};
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    Log.findOne(lib.authTransform({_id:m.pl.logID},'r',credential),function(paramError, paramData){
        if(!paramError){
            r.pl = paramData;
            deferred.resolve(r);
        }
        else {
            r.er = paramError;
            deferred.reject(r);
        }
    });
    return deferred.promise;
}

exports.operations = [init,getLogRequest,readOperationsLog, readOperationsLogByID];

//re-export ops (for testing)
exports.operations.forEach(function(op) {
    exports[op.name] = op;
});

//will be use to address the orthogonal concern. Initialized and use directly
function getLogRequest(m){
    var r = {
        pl: {fn:null},
        er: null
    };

    // Initialize the counter
    var counter = 0;
    r.pl.fn = function logger(){
        return function createLogHandler(paramRequest, paramResponse, next) {
            var writeHead = paramResponse.writeHead; // Store the original function
            counter++;
            //Log the incoming request
            //console.log("Request " + counter + " " + paramRequest.method + " " + paramRequest.url);
            console.log("/n/home/login and url " + paramRequest.url.toString() + " compare : " + (paramRequest.url.toString() == '/home/login') );
            var requestURL = paramRequest.url.toString();
            var requestStart = new Date();
            // Wrap writeHead to hook into the exit path through the layers.
            paramResponse.writeHead = function(code, headers) {
                var varOperationType = null;
                var varOperationName = null;
                switch (requestURL) {
                    case "/home/login.json":
                        varOperationType = '授权操作';
                        varOperationName = '登陆';
                        break;
                    case "/home/registration.json":
                        varOperationType = '授权操作';
                        varOperationName = '注册';
                        break;
                    case "/home/logout.json":
                        varOperationType = '授权操作';
                        varOperationName = '安全退出';
                        break;
                    default:
                        varOperationType = '业务操作';
                        varOperationName = '业务';
                }
                var varUserAccountID = null;
                //console.log('logging request for you user..' + paramRequest.user.id);
                if (paramRequest.user) {
                    varUserAccountID = paramRequest.user.id;
                }
                else {
                    varUserAccountID = '000000000000000000000002'; // for guest users
                }
                var paramLogJson = {
                    userAccountID: varUserAccountID,
                    opType: varOperationType,
                    opMethod: paramRequest.method,
                    opName: varOperationName,
                    opDate: new Date().toLocaleString(),
                    srcIP: paramRequest.headers['x-real-ip'] || paramRequest.connection.remoteAddress,
                    srcURI:requestURL,
                    detail: JSON.stringify(headers),
                    status: paramResponse.statusCode
                };
                paramResponse.writeHead = writeHead; // Put the original back
                // Log the outgoing response
                //console.log("Response " + counter + " " + code + " " + JSON.stringify(headers));
                paramResponse.writeHead(code, headers); // Call the original
                var requestEnd = new Date();
                var duration = requestEnd.getTime() - requestStart.getTime();
                console.log("PROCESSING TIME FOR ",requestURL," WAS ",duration,"ms");
                Log.create(paramLogJson, function(parammError, parammLogJson) {
                    //console.log('log created: ' + parammLogJson.toString());
                });
            };
            //Pass through to the next layer
            next();
        }
    };
    return Q(r);
}
