/* 
 * ServicePoint Schema
 * creteated by: Harm Meijer, harmmeiier@gmail.com
 */

var lib = require("lib");
module.exports = function (paramMongoose){
  
var servicePointSchema = paramMongoose.Schema({
     //_id: String,
    s : lib.permissionsSchema({all:"r"}),
  ct: { //creator 
    uID: {type:String,required:true},//id of the user who created the servicePoint
    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    cd: {type: Date, default: Date.now}//creation date
  },
  md: {//modified
    uID: {type:String,required:true},//id of user who changed the servicePoint
    oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
    lu: {type:Date,required:true}//last updated date
  },
  servicePointCode: String,//http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/
                           //http://stackoverflow.com/questions/28357965/mongoose-auto-increment
  servicePointName:String,
  sppc:String,             //service point parent company
  status:Number,
  servicePointAddress:String,
  //@todo:add postal code here, select postal code
  servicePointType:{ type: paramMongoose.Schema.Types.ObjectId, ref: 'servicepointtypes' },
  operatingHours:String,
  contactPerson:String,
  ds:{type:Boolean,default:false},//delete status
  contactPhone:String,
  servicePointDescription: String,
  postalCode:{type:String,required:false}
});

//Model Declaration ===============================

//public Methods ===============================
servicePointSchema.statics.servicePointsByCreator = function(userName,orgid, paramCallback){
   return this.find({"ds":{"$ne":true}, $or:[{"ct.uID" : userName},{"ct.oID":orgid}]})
    .populate('servicePointType')
    .sort('-ct.cd')
    .exec(paramCallback); //static method
};


return servicePointSchema;

};