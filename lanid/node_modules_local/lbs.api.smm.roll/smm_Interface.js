/*
 * Interface for:
 *   Service
 *   ServicePoint
 *   BusinessRecord
 * mongooseConfig run with smm last working version before major refactor
 * with the right post it should insert, update and delete, here js update code
//@todo: probably first want to hit the insert endpoint and then update, insert with 3 price lists, update 1, delete 1
// then check the result (hitting the endpont to get the service
//new service:
$.post('/home/login.json',{antiBotValue:'MSNP',password:'123456',user_captcha:'MSP',username:'haru'})
.then(function(){
  lbs.modHelper.getMessage(
   "/workspace/services/service.json"
   , false, {},'POST',{json:
          JSON.stringify(
            {"pl":{"servicePoint":{"servicePointCode":null,"servicePointName":"dfs","status":0,"servicePointAddress":null,"servicePointType":"54fd08084fcd8a66029faf12","operatingHours":null,"contactPerson":null,"contactPhone":null,"servicePointDescription":null}}}
          )
      }
  ).then(function(msg){console.log(msg);});
});



$.post('/home/login.json',{antiBotValue:'MSNP',password:'123456',user_captcha:'MSP',username:'haruadmin'})
.then(function(){
  lbs.modHelper.getMessage(
   "/workspace/services/service.json"
   , false, {},'PUT',{json:JSON.stringify(
      {"pl":{"service":{"PriceList":[{"_id":"54f9634b115ad6b108869461","servicePoint":"54f96316115ad6b10886944a","service":"54f9634b115ad6b108869460","serviceName":"54f95b1b4d0b82a8086dde0e","pc":"110000","serviceType":"54f95b1a4d0b82a8086dddfe","servicePrices":1,"discountedPrice":1,"appointmentRequeirement":"0","remark":"1","ds":false,"paymentMethod":[2],"md":{"uID":"54eaf7cc1647b0e30a5e3806","oID":"54eaf7cc1647b0e30a5e3806","lu":"2015-03-06T08:21:12.796Z"},"ct":{"cuID":"54eaf7cc1647b0e30a5e3806","oID":"54eaf7cc1647b0e30a5e3806","cd":"2015-03-06T08:20:27.719Z"}}],"standardReservationRequest":true,"_id":"54f9634b115ad6b108869460"}}}
   )}
   ).then(function(msg){console.log(msg);});
});


 */




var Q = require('q')
var xlsx = require('node-xlsx')

, mongoose  = null
,storageBucketManager = null
, ServiceSchema = null
, ServiceTypeSchema = null
, ServiceNameSchema = null
, ServicePointSchema = null
, ServicePointDetailsSchema = null
, ServicePointTypeSchema = null
, PriceListSchema = null
, BusinessRecordSchema = null
, Service = null
, ServiceName = null
, ServicePoint = null
, ServiceType = null
, ServicePointType = null
, PriceList = null
, BusinessRecord =null
  ,CounterSchema
  ,Counter
, transactionHelper
, lib;
//inject all dependencies
function init(m) {
    if(!m || !m.pl || !m.pl.fn || (typeof m.pl.fn !== 'function')) {
        return Q.reject({pl:null, er:{ ec: null, em: 'Payload pl is not a function'}});
    }
    //return m.pl.fn({
    //    op: 'dependency'
    //   ,pl: {dn: 'mongoose'}
    //   ,pm:''
    //   ,ns: m.ns
    //}).then(function(r){

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    });
    var p2 = message({
        op: 'dependency',
        pl: {dn: 'bucketManager'}
    });

    return Q.all([p1, p2]).then(function (r1) {
        mongoose = r1[0].pl.fn;
        storageBucketManager = r1[1].pl.fn;


        //error or not, this can never throw an exception. return
        //  a resolved promise and if an error is thrown then use
        //  fail() to return as a correct message

        //mongoose = r.pl.fn;
        //storageBucketManager = r[1].pl.fn;

        console.log('smm got mongoose ' + mongoose.version + ' db:' + mongoose.connection.name);
        ServiceSchema = require("./models/Service.js")(mongoose);
        ServiceTypeSchema = require("./models/ServiceType.js")(mongoose);
        ServiceNameSchema = require("./models/ServiceName.js")(mongoose);
        ServicePointTypeSchema = require("./models/ServicePointType.js")(mongoose);
        PriceListSchema = require("./models/PriceList.js")(mongoose);
        //@todo: current index does not cover the queries used and query does not use this index.
        //  not sure what compound index to use for querying on 5 optional fields (_id, serviceName, serviceType,servicePrices,pc and ds
        PriceListSchema.index({pc: 1, ds: 1, servicePrices: 1, "_id": 1, serviceType: 1, serviceName: 1});
        BusinessRecordSchema = require("./models/BusinessRecord.js")(mongoose);
        PriceList = mongoose.model('pricelists', PriceListSchema);
        ServicePointSchema = require("./models/ServicePoint.js")(mongoose);
        ServicePointDetailsSchema = require("./models/ServicePointDetails.js")(mongoose);

        ServiceType = mongoose.model('servicetypes', ServiceTypeSchema);
        ServiceName = mongoose.model('servicenames', ServiceNameSchema);
        ServicePointType = mongoose.model('servicepointtypes', ServicePointTypeSchema);
        //following 2 depends on some of the others to be created servicepoint need servicepointtype
        Service = mongoose.model('services', ServiceSchema);
        ServicePoint = mongoose.model('servicepoints', ServicePointSchema);
        ServicePointDetailsModel = mongoose.model('servicepointDetails', ServicePointDetailsSchema);
        BusinessRecord = mongoose.model('businesses', BusinessRecordSchema);
        CounterSchema = require("./models/Counter.js")(mongoose);
        Counter = mongoose.model('counters', CounterSchema);
        lib = require('lib');
        transactionHelper = require('lib').transactionHelper.init({pl: {mongoose: mongoose}});

        //Take all the default data from the .json and populate the smm database
        try {
            var jsoninit = require("./data/mongo_init.json");
        }catch(e){
            console.log('requiring jsoninit...',e)
        }
        return lib.prepopulateMongoDatabase(jsoninit, transactionHelper);
    })
    .then(function success() {
        return Q.resolve({pl: {pm: 'smm initialization done!'}, er: null});
    }  ,  function failure(r) {
        return Q.resolve({pl: {pm: 'smm initialization had some issue: ',er: r}});
    });
}

exports.init=init;

function _healthCheck(start,credential){
  start = new Date(start.getTime()-120000);
  return Q()
  .then(function(){
    return PriceList.find({"ct.cd":{$gt:start}})
    .populate('servicePoint').exec();
  })
  .then(function(data){
    var i = data.length,promises=[];
    while(--i>-1){
      if(lib.digFor(data[i],"servicePoint.postalCode") && data[i].pc!==data[i].servicePoint.postalCode){
        promises.push(PriceList.update(lib.authTransform({"_id":data[i]._id},'w',credential),{"$set":{"pc":data[i].servicePoint.postalCode}}).exec());
      }
    }
    return Q.all(promises);
  })//making sure a q promise is returned
  .then(
    function resolve(res){
      return Q.resolve(res);
    },function reject(er){
      return Q.reject(er);
  });
}

function _updateMultiPriceList(query,oldValues,newValues,transactionid,credential){
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return transactionHelper.prepareMultiUpdate({
    collectionName:'pricelists'
    ,transactionid:transactionid
    ,query:query
    ,values:JSON.stringify(oldValues)
  })
  .then(function(){
    return PriceList.update(lib.authTransform(query,'w',credential),newValues,{multi:true}).exec();
  })
  .then(function resolve(){
      return Q.resolve();
    },function reject(er){
      return Q.reject(er);
    }
  );
}

function _removePriceLists(arg,credential){
  var priceListids,r ={"pl":null, "er":null};
  return Q()
  .then(function(){
    priceListids=arg.priceListids;
    r ={"pl":null, "er":null};
    var i=-1,len=priceListids.length,promises=[];
    if(len===0){
      r.pl=[];
      return Q(r);
    }
    while(++i<len){
      priceListids[i]=priceListids[i]._id;
      promises.push(transactionHelper.prepareDelete({
        transactionid:arg.transactionid
        ,entity:{_id:priceListids[i]}
        ,collectionName:'pricelists'
      }));
    }
    return Q.all(promises);
  }).then(function(){
    var deferred = Q.defer();
    PriceList.remove(lib.authTransform({'_id':{ $in: priceListids}},'w',credential),function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
    
  });
}

function _getQueryFromMessage(arr){
  var i=-1, len = arr.length,noDoubles={},ret=[],services={},pc=[],qpc,min,max,keys,j
  ,uniquePriceList=false;
  //grouping all queries into queries per service (sn field)
  while(++i<len){
    arr[i].serviceName = arr[i].sn||'------';
    if(!services[arr[i].serviceName]){
      services[arr[i].serviceName] = {ds:{"$ne":true}};
      if(arr[i].sn){
        services[arr[i].serviceName].serviceName=new mongoose.Types.ObjectId(arr[i].sn);
      }
      services[arr[i].serviceName].groupIndex=i;
    }
    if(arr[i].pl){
      services[arr[i].serviceName]["_id"]=services[arr[i].serviceName]["_id"]||{"$in":[]};
      services[arr[i].serviceName]["_id"]["$in"].push(arr[i]["pl"]);
    }
    //uniqueplid is a unique payload id, this is used when a respondent submits a payload id (chooses a service)
    //  to make sure the user has choosen a price list that is in the activity and get the correct data for this
    //  price list this value is used
    if(arr[i].uniqueplid){
      services[arr[i].serviceName]["$and"]=[{_id:arr[i].uniqueplid}];
      uniquePriceList=arr[i].serviceName;
    }
    

    //@todo: choose the lowest min and the highest max, now it just takes whatever comes last
    if(arr[i].min!==undefined){
      min = parseFloat(arr[0]['min']);
      if(!isNaN(min)){
        services[arr[i].serviceName]['servicePrices']={"$gte":min};
      }
    }
    if(arr[i].max!==undefined){
      max = parseFloat(arr[0]['max']);
      if(!isNaN(max)){
        services[arr[i].serviceName]['servicePrices']=services[arr[i].serviceName]['servicePrices']||{};
        services[arr[i].serviceName]['servicePrices']["$lte"]=max;
      }
    }
    if(arr[i].st!==undefined&&arr[i].st!==""){
      services[arr[i].serviceName]['serviceType']=services[arr[i].serviceName]['serviceType']||{"$in":[]};
      services[arr[i].serviceName]['serviceType']["$in"].push(new mongoose.Types.ObjectId(arr[i].st));
    }
    if(arr[i].pc){
      pc = (Object.prototype.toString.call(arr[i].pc).indexOf('Array')!==-1)?arr[i].pc:[arr[i].pc];//if "online" is selected it is not an array
      qpc=[];
      j = pc.length;
      while(--j>-1){
        //@todo: use noDoubes set and check a key there to (not) add elements to qpc
        if(/^\d\d0000$/.test(pc[j])){
          if(!noDoubles[pc[j].substr(0,2)]){
            qpc.push(new RegExp("^"+pc[j].substr(0,2)));
            noDoubles[pc[j].substr(0,2)]=true;
          }
        }else if(/^\d\d\d\d00$/.test(pc[j])){
          if(!noDoubles[pc[j].substr(0,4)]){
            qpc.push(new RegExp("^"+pc[j].substr(0,4)));
            noDoubles[pc[j].substr(0,4)]=true;
          }
          if(!noDoubles[pc[j].substr(0,2)+'0000']){
            qpc.push(pc[j].substr(0,2)+'0000');
            noDoubles[pc[j].substr(0,2)+'0000']=true;
          }
        }else if(/^\d\d\d\d\d\d$/.test(pc[j])){
          if(!noDoubles[pc[j]]){
            qpc.push(pc[j]);
            noDoubles[pc[j]]=true;
          }
          if(!noDoubles[pc[j].substr(0,2)+'0000']){
            qpc.push(pc[j].substr(0,2)+'0000');
            noDoubles[pc[j].substr(0,2)+'0000']=true;
          }
          if(!noDoubles[pc[j].substr(0,4)+'00']){
            qpc.push(pc[j].substr(0,4)+'00');
            noDoubles[pc[j].substr(0,4)+'00']=true;
          }
        }else{
          if(!noDoubles[pc[j]]){
            qpc.push(pc[j]);
            noDoubles[pc[j]]=true;
          }            
        }
      }
      if(pc.length){
        services[arr[i].serviceName]['pc']=services[arr[i].serviceName]['pc']||{"$in":[]};
        services[arr[i].serviceName]['pc']["$in"]=services[arr[i].serviceName]['pc']["$in"].concat(qpc);
      }
    }
  }
  if(uniquePriceList){
    //only return one result set with one (or no) pricelist
    //  this is when the query is used to check if the user submitted
    //  a valid pricelist id for it's response
    delete services[uniquePriceList].groupIndex;
    return [services[uniquePriceList]];
  }
  keys = Object.keys(services);i=keys.length;
  while(--i>-1){
    ret.push(services[keys[i]]);
  }

  //make sure it's sorted the right way
  ret.sort(function(a,b){
    return b.groupIndex-a.groupIndex;
  });
  i=ret.length;
  while(--i>-1){
    delete ret[i].groupIndex;
  }
  return ret;//return possibly multiple queries merged by sn (service name)
}

function _isValidObjectId(id) {
  if(id == null) {return false;}

  if(id != null && 'number' != typeof id && (id.length != 12 && id.length != 24)) {
    return false;
  } else {
    // Check specifically for hex correctness
    /*ignore jslint start*/
    if(typeof id == 'string' && id.length == 24) {return (new RegExp("^[0-9a-fA-F]{24}$")).test(id);}
    /*ignore jslint end*/
    return false;
  }
}

function _getServiceName(name,transactionid,credential){
  var query;
  if(transactionHelper.isValidObjectId(name)){
    query={'_id':name};
  }else{
    query={'text':name};
  }  
  return transactionHelper.getCreate('servicenames',{},transactionid,query,true,credential)
  .then(function(serviceName){
    if(serviceName.isNew){
      serviceName.text=name;
      return transactionHelper.saveToPromise(serviceName);
    }
    return Q.resolve(serviceName);
  })
  .then(
    function resolve(data){
      return Q.resolve(data);
    },function reject(err){
      return Q.reject('In _getServiceName: '+err);
    }
  );
}

function persistPriceLists(m){
  var r ={"pl":null, "er":null}
  ,toSave=[]
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q()
  .then(function(){
    var pls=m.pl.priceList,i = pls.length
      ,promises=[];
    if(i===0){
      r.pl=[];
      return Q.resolve(r);
    }
    while(--i>-1){
      promises.push(transactionHelper.getCreate(
        'pricelists'
        ,pls[i]
        ,m.pl.transactionid
          ,undefined, undefined, credential
      ));
    }
    return Q.all(promises);
  }).then(function(msg){
    var pls=m.pl.priceList,i = pls.length
      ,promises=[];
    if(msg.length===0){
      r.pl=[];
      return Q(r);
    }
    while(--i>-1){
      pls[i].service = m.pl.serviceid;
      pls[i].serviceName = m.pl.serviceName;
      pls[i].serviceType = m.pl.serviceType;
      pls[i].ds = false;
      if(!pls[i].pc){
        delete pls[i].pc;
      }
      transactionHelper.setFields(msg[i],pls[i],'pricelists',m.pl.loginName,m.pl.currentOrganization);
      promises.push(transactionHelper.saveToPromise(msg[i]));
    }
    return Q.all(promises);
  })
  .then(function resolve(data){
      return Q.resolve(data);
    },function reject(err){//mongoose promise does not support .then, turn returned promise into q promise
      return Q.reject(err); 
  });
}

function myservice(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q().then(function(){
    if(m.pl.query._id.toLowerCase && m.pl.query._id.toLowerCase().indexOf('lzs')===0){
      m.pl.query={serviceCode:m.pl.query._id};
    }
    return Service.findOne(lib.authTransform(m.pl.query,'r',credential))
    .populate('PriceList serviceType serviceName')
    .exec();
  })
  .then(function(data){
    r.pl = data;
    return Q.resolve(r);
  })
  .then(null,function reject(e){
    er.pl=null;
    er.er = {ec:1001,em:e};
    return Q.reject(er);
  });
}

function persistService(m){
  var r
  , service
  ,newPriceList=[]
  ,deletedPriceList=[]
  ,updatedPriceList=[]
  ,tmp
  ,start = new Date()
  ,serviceFromDB
  ,priceList
  ,i;
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q()
  .then(function(){
    service=m.pl.service;
    service.status=service.status || 10;
    service.PriceList=service.PriceList||[];//prevent error: cannot read property length of undefined
    i=service.PriceList.length;
    while(--i>-1){
      if(service.PriceList[i].clientCommandAddNew===true){
        delete service.PriceList[i].clientCommandAddNew;
        newPriceList.push(service.PriceList[i]);
      }
      if(service.PriceList[i].clientCommandRemove===true){
        delete service.PriceList[i].clientCommandRemove;
        deletedPriceList.push(service.PriceList[i]);
      }
      if(service.PriceList[i].clientCommandUpdate===true){
        delete service.PriceList[i].clientCommandUpdate;
        updatedPriceList.push(service.PriceList[i]);
      }
    }
    //either get the service or create a new one
    return transactionHelper.getCreate('services',m.pl.service,m.pl.transactionid, m.pl.override?{serviceCode: service.serviceCode}:undefined, m.pl.override, credential);
  })
  .then(function(dbservice){
    var i;
    serviceFromDB=dbservice;
    if(service.ds===true){//if delete status of service is true then set all pricelist delete status to true
      tmp=serviceFromDB.PriceList||[];
      i = tmp.length;
      while(--i>-1){
        updatedPriceList.push({_id:tmp[i],ds:true});
      }
    }
    if(m.pl.override && !dbservice.isNew)
    {
        return Q.reject("INITIALIZATION MODE KICKOUT")
    }
    priceList=serviceFromDB.PriceList||[];
    //get service name
    //create, remove and update price lists and get server name
    return Q.all([
      service.serviceName?_getServiceName(service.serviceName,m.pl.transactionid,credential):false
      ,_removePriceLists({priceListids:deletedPriceList,transactionid:m.pl.transactionid},credential)
    ]);
  })
  .then(function(msg){
    var code = false;
    if(msg[0]&&service.serviceName){
      service.serviceName = msg[0]._id;
    }
    if(!serviceFromDB.serviceCode){
      code = transactionHelper.getNextSequence('serviceCode');
    }
    return Q.all([
      persistPriceLists({pl:{
          priceList:newPriceList
          ,transactionid:m.pl.transactionid
          ,serviceName:serviceFromDB.serviceName || service.serviceName
          ,serviceType:serviceFromDB.serviceType||service.serviceType
          ,serviceid:serviceFromDB._id
          ,loginName:m.pl.loginName
          ,currentOrganization:m.pl.currentOrganization
        }
      })
      ,code
      ,persistPriceLists({pl:{
          priceList:updatedPriceList
          ,transactionid:m.pl.transactionid
          ,serviceName:serviceFromDB.serviceName || service.serviceName
          ,serviceType:serviceFromDB.serviceType||service.serviceType
          ,serviceid:serviceFromDB._id
          ,loginName:m.pl.loginName
          ,currentOrganization:m.pl.currentOrganization
        }
      })
    ]);
  })
  .then(function(msg){
    var updateMultiPrice=false
    ,oldVal={},newVal={};
    if(msg[1]){
      service.serviceCode='LZS'+msg[1].seq;
    }
    if(service.serviceName!==serviceFromDB.serviceName&&serviceFromDB.serviceName&&service.serviceName){
      oldVal.serviceName=serviceFromDB.serviceName;
      newVal.serviceName=service.serviceName;
      updateMultiPrice=true;
    }
    if(service.serviceType!==serviceFromDB.serviceType&&serviceFromDB.serviceType&&service.serviceType){
      oldVal.serviceType=serviceFromDB.serviceType;
      newVal.serviceType=service.serviceType;
      updateMultiPrice=true;
    }
    if(updateMultiPrice){
      updateMultiPrice = _updateMultiPriceList(
        {service:serviceFromDB._id}
        ,oldVal
        ,newVal
        ,m.pl.transactionid
        ,credential
      );      
    }
    return Q.all([msg[0],updateMultiPrice]);
  })
  .then(function(msg){
    var i = deletedPriceList.length;
    while(--i>-1){
      priceList.splice(priceList.indexOf(deletedPriceList[i]),1);
    }
    i = msg[0].length;
    while(--i>-1){
      priceList.push(msg[0][i]._id);
    }
    service.PriceList=priceList;
    transactionHelper.setFields(serviceFromDB,service,'services',m.pl.loginName,m.pl.currentOrganization);
    return transactionHelper.saveToPromise(serviceFromDB);
  })
  .then(function(s){
    return Q.all([s,_healthCheck(start,credential)]);
  })
  .then(function(s){
      return myservice({
          pl:
            {
                query:{'_id':s[0]._id},
                loginName: m.pl.loginName,
                currentOrganization: m.pl.currengOrganization
            }
      });
  })
  .then(function(msg){
    r=msg;
    return transactionHelper.commit({transactionid:m.pl.transactionid});
  })
  .then(function resolve(){
      return r;
    },function reject(e){
          console.log("ERROR persisting:",e);
      if(e == "INITIALIZATION MODE KICKOUT")
      {
          console.log("rejecting with ",e)
          return Q.reject(e);
      }
      var err = {};
      err.pl=null;
      err.er = {ec:1001,em:e.em||e.message};
      return Q.reject(err);
  });
}

function smm_getServices(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var filterQuery = []
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'serviceCode': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

    var query = {"ds":{"$ne":true}, $or:[{"ct.uID" : m.pl.loginName},{"ct.oID":m.pl.currentOrganization}]};
    var model = Service;

    if(m.pl.which==='all'){
        query = {"ds":{"$ne":true}};
    }

    if(filterQuery.length) query['$and'] = filterQuery;

    return Q.all([
        function(){
            return model.find(lib.authTransform(query,'r',credential)).populate('serviceType serviceName').sort('-md.lu').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }()
        ,function(){
            return model.find(lib.authTransform(query,'r',credential)).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,  function fail(err){
        return {er:{ec:1001, em:err}};
    })

}

function recordsByOrganization(m){
    m.mt = m.mt || {};
    var r ={"pl":null, "er":null}
        ,er=new Error();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var filterQuery = []
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'btc':m.mt.sk},{'usn': m.mt.sk},{'serviceCode': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }

    var query = {"ds":{"$ne":true}};
    if(!m.pl.currentOrganization == "200000000000000000000000")
        query.oID = m.pl.organization;
    var model = BusinessRecord;

    if(filterQuery.length) query['$and'] = filterQuery;

    return Q.all([
        function(){
            return model.find(lib.authTransform(query,'r',credential)).sort({rc:1}).populate('service').populate('svn').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }()
        ,function(){
            return model.find(lib.authTransform(query,'r',credential)).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,  function fail(err){
        return {er:{ec:1001, em:err}};
    })

}

function downloadRecordsByOrganization(m){

    console.log("DOWNLOADING RECORDS BY ORGANIZAION")
    var serviceStatusMap = {
        '10': {
            val: 10,
            text: '等待'
        } //PENDING
        ,
        '20': {
            val: 20,
            text: '未处理'
        } //ISSUED
        ,
        '30': {
            val: 30,
            text: '已付款'
        } //PAID
        ,
        '40': {
            val: 40,
            text: '正在处理'
        } //UNDERPROCESSING
        ,
        '50': {
            val: 50,
            text: '已处理'
        } //PROCESSED
        ,
        '51': {
            val: 51,
            text: '取消'
        } //REJECTED

    };

    return recordsByOrganization(m)
        .then(function(records){
            records = records.pl;
            console.log("Got records:",records.length)
            var data = [[
                "交易编码",
                "服务代码",
                "服务名称",
                "总价（元）",
                "服务状态",
                "处理时间",
                "姓名"
            ]];
            records.forEach(function(ele,idx,arr){
                var matrix = [
                    ele.btc,
                    ele.serviceCode,
                    ele.svn.text,
                    ele.svp,
                    serviceStatusMap[ele.st+""]?serviceStatusMap[ele.st+""].text:ele.st,
                    ele.spt?ele.spt.toLocaleDateString() + " " + ele.spt.toLocaleTimeString():"",
                    ele.usn
                ]
                data.push(matrix);
            });
            var buffer = xlsx.build([{name: "template_"+ m.pl.currentOrganization, data: data}]);
            return storageBucketManager('uploadfile', null, "xlsx", buffer, null)
        })
        .then(function(xlurl){
            console.log("XL url is:",xlurl);
            return {pl:{url:"/files/" + xlurl.pl.uuid + ".xlsx"}};
        }  ,  function(err){
            console.log("Error creating excel:",err);
            return {err:err};
        })
}

function myservicePoint(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q()
  .then(function(){
    if(m.pl.query._id.toLowerCase && m.pl.query._id.toLowerCase().indexOf('lzp')===0){
      m.pl.query={servicePointCode:m.pl.query._id};
    }
    return ServicePoint.findOne(lib.authTransform(m.pl.query,'r',credential))
    .populate('servicePointType')
    .exec();
  })
  .then(function resolve(data){
    r.pl = data;
    return Q.resolve(r);
  })
  .then(null,function reject(e){
    er.pl=null;
    er.er = {ec:1001,em:e};
    return Q.reject(er);
  });
}

function serviceTypes(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var deferred;
    deferred = Q.defer();
//    ServiceType.getServiceTypesOrdered(function(paramError, paramData){
    ServiceType.getServiceTypesOrdered(function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw er;
    }
    throw e;    
  });
}

function serviceNames(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var deferred;
    deferred = Q.defer();
    ServiceName.getServiceNamesOrdered(function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString(),ms:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message,ms:e.message};
      throw er;
    }
    throw e;    
  });
}

function servicePointTypes(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();
  return Q.fcall(function(){
    var deferred;
    deferred = Q.defer();
    ServicePointType.getServicePointTypesOrdered(function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      return Q.reject(er);
    }
    return Q.reject(e);
  });
}

function smm_queryServices(m){
  var qObj={},totals=[],results=[];
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q().then(function(){
    var promises=[],set=[],i;
    qObj=_getQueryFromMessage(m.pl.query);
    i=qObj.length;
    while(--i>-1){  
      (function(index){
        set=[];
        if(m.pl.totals){
          set.push(PriceList.aggregate([
              {"$match":lib.authTransform(qObj[index],'r',credential)}
              ,{"$group":{"_id":"$serviceName","serviceName":{"$first": "$serviceName"},"service":{"$first": "$service"}  ,"min":{"$min":"$servicePrices"},"max":{"$max":"$servicePrices"}}}
              ,{"$sort":{"min":1}}
              ,{"$limit":5}
              ],function(){}//needs a callback passed or no promise is returned
            ).then(function(res){
              return PriceList.populate(res,{path:"serviceName service"});
            }).then(function(res){
              return Q.resolve(res);
            })
          );          
        }else{
          set.push(false);
        }
        set.push(PriceList.find(
          lib.authTransform(qObj[index],'r',credential)
            ,null//all fields
            ,{sort:{"servicePrices":1}}
          ).populate("servicePoint service serviceName")
          .exec()//needs exec to return a promise
          .then(function(res){
            return Q.resolve(res);
          })
        );
      }(i));
      promises.push(
        Q.all(set)
        .then(function resolve(res){
          totals.push(res[0]);
          results.push(res[1]);
        },function reject(err){
            return Q.reject(err);
        })
      );
    }
    return Q.all(promises)
    .then(function resolve(res){
        return Q.resolve({totals:totals,results:results});
      },function reject(err){
        return Q.reject(err);
    });
  })
  .then(function(res){
    return Q.resolve({er:null,pl:{totals:res.totals,results:res.results}});
  })
  .then(null,function(e){//fail, mongoose doesn't support fail on their promises so have to use the standard way (have a reject listener)
    if(!e.er){
      e.pl=null;
      e.er = {ec:1001,em:e.message};
      return Q.reject(e);
    }
  });
}

function smm_changeServicePointCode(m){
    m.pl.field = "servicePointCode";
    m.pl.model = ServicePoint;
    return _findByAndSetModelField(m);
}
function smm_changeServiceCode(m) {
    m.pl.field = "serviceCode";
    m.pl.model = Service;
    return _findByAndSetModelField(m);
}
function smm_servicePointCodeInUse(m){
    m.pl.model = ServicePoint;
    m.pl.tgtField = "servicePointCode"
    return _elementByIdentifierExists(m)
}
function smm_serviceCodeInUse(m){
    m.pl.model = Service;
    m.pl.tgtField = "serviceCode"
    return _elementByIdentifierExists(m)

}
function _elementByIdentifierExists(m){
    var query = {};
    query[m.pl.tgtField] = m.pl.code;
    var model = m.pl.model;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    return Q()
        .then(function(){
            return model.findOne(lib.authTransform(query,'r',credential)).exec()
        })
        .then(function resolve(res){
            if(res)
            {
                return true;
            }
            return false;
        }  ,  function failure(err){
            throw err;
        })
}
function _findByAndSetModelField(m){
    var field = m.pl.field,
        model = m.pl.model,
        tgtCode = m.pl.find,
        newCode = m.pl.code;
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    if(!(tgtCode && newCode && field && model)) throw 'invalid payload: missing "find" "code" "model" or "field" in '+m;

    var query = {};
    var update = {};
    query[field] = tgtCode;
    update[field] = newCode;

    var deferred = Q.defer();

    model.update(lib.authTransform(query,'w',credential),{$set:update},{},function(err,cnt){
            if(err)
                deferred.reject(err);
            else
                deferred.resolve(cnt);
        }
    )
    return deferred.promise;
}

function persistServicePoint(m){
  var counter=false
  ,r ={"pl":null, "er":null}
  ,dbServicePoint=false
  ,transactionid=false
  ,er=new Error();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q().then(function(){
    transactionid=m.pl.transactionid;
    m.pl.servicePoint.status= m.pl.servicePoint.status || 10;
    m.pl.servicePoint.servicePointStatus= m.pl.servicePointStatus || 10;
    return transactionHelper.getCreate('servicepoints',m.pl.servicePoint,transactionid, m.pl.override?{servicePointCode:m.pl.servicePoint.servicePointCode}:undefined, m.pl.override,credential);
  })
  .then(function(servicepoint){
    dbServicePoint=servicepoint;
    if(m.pl.override && !servicepoint.isNew)
    {
        console.log("Service point already exists and we are in initialization mode: do not create");
        return Q.reject("INITIALIZATION MODE KICKOUT");
    }
    if(!dbServicePoint.servicePointCode){
      counter = transactionHelper.getNextSequence('servicePointCode');
    }
    //here we need to prepare an update or insert
    return Q.all([counter]);
  })
  .then(function(msg){
    var d = Q.defer();
    if(msg[0]){
      m.pl.servicePoint.servicePointCode='LZP'+msg[0].seq;
    }
    return lib.digFor(m,"pl.servicePoint.postalCode")!==undefined?
      _updateMultiPriceList({servicePoint:dbServicePoint._id},{pc:dbServicePoint.postalCode},{pc:m.pl.servicePoint.postalCode},transactionid,credential)
      :false;
  })
  .then(function(){
    transactionHelper.setFields(dbServicePoint,m.pl.servicePoint,'servicepoints',m.pl.loginName,m.pl.currentOrganization);
    return transactionHelper.saveToPromise(dbServicePoint);
  })
  .then(function resolve(d){
      r.pl=d;
      return Q.resolve(r);
    },function reject(e){
      if(e == "INITIALIZATION MODE KICKOUT")
      {
          return Q.reject(e);
      }
      if(!e.er){
        er.pl=null;
        er.er = {ec:1001,em:'In persistServicePoint: '+JSON.stringify(e)};
        return Q.reject(er);
      }
      return Q.reject(e);
  });
}

function servicePointsByCreator(m){
    m.mt = m.mt || {};
    var r ={"pl":null, "er":null}
        ,er=new Error();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    var filterQuery = []
    //Designate Search Key
    if(m.mt.sk) filterQuery.push({$or:[{'servicePointCode':m.mt.sk},{'servicePointName': m.mt.sk}]});

    //Define start date
    if(m.mt.sd) filterQuery.push({'ct.cd':{'$gte': new Date(m.mt.sd)}});

    //Define end date
    if(m.mt.ed)      {         var dateplus = new Date(m.mt.ed);         dateplus.setDate(dateplus.getDate() + 1);         filterQuery.push({'ct.cd':{'$lte' : dateplus}})     }


    var query = {"ds":{"$ne":true}};
    var orclause = [{"ct.uID" : m.pl.loginName},{"ct.oID":m.pl.currentOrganization}];
    if(!m.pl.currentOrganization == "200000000000000000000000") query["$or"] = orclause;
    var model = ServicePoint;

    if(filterQuery.length) query['$and'] = filterQuery;

    return Q.all([
        function(){
            return model.find(lib.authTransform(query,'r',credential)).populate('servicePointType').sort('-ct.cd').skip(m.mt.p * m.mt.ps).limit(m.mt.ps).exec()
        }()
        ,function(){
            return model.find(lib.authTransform(query,'r',credential)).count().exec()
        }()
    ]).then(function resolve(data){
        m.mt.tc = data[1];
        return {er: null, pl: data[0], mt: m.mt};
    }  ,  function fail(err){
        return {er:{ec:1001, em:err}};
    })
}

function smm_updateStatus(m){
  var query = {};
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  if(m.pl.col==='services'){
    query.serviceCode=m.pl.ei;
  }
  else if(m.pl.col==='servicepoints'){
    query.servicePointCode=m.pl.ei;
  }
  return Q().then(function(){
    return transactionHelper.getCreate(m.pl.col,{},m.pl.transactionid,query,undefined,credential);
  }).then(function(msg){
    var entity=msg;
    entity.status=m.pl.status;
    return transactionHelper.saveToPromise(entity);
  }).then(function(msg){
    //no need to return the updated entity
    return transactionHelper.commit({transactionid:m.pl.transactionid});
  });
}

function smm_rollback(m){
  return transactionHelper.rollback({transactionid:m.pl.transactionid});
}

function smm_readAllServicePointDetails(m){

  m.mt = m.mt || {};
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  var query = {"ds":{"$ne":true}};


  if(m.pl&&m.pl.filter){

    //var cond = '/'+m.pl.filter+'/'; regular expression to work as the like query in sql database
    var cond = m.pl.filter;

    console.log('conditions----',cond);

    query = {$and:[{"ds":{"$ne":true}},{$or:[{sprc:cond},{cspn:cond}]}]};
  }



  return Q.all([
    function(){
      return   ServicePointDetailsModel.find(lib.authTransform(query,'r',credential)).skip(m.mt.p * m.mt.ps).limit(m.mt.ps).populate({
        path:'spbi', select:'servicePointCode servicePointName servicePointAddress servicePointType operatingHours contactPhone'}).exec()
    }()
    ,function(){
      return ServicePointDetailsModel.find(lib.authTransform(query,'r',credential)).count().exec()
    }()
  ]).then(function resolve(data){
    m.mt.tc = data[1];
    return {er: null, pl: data[0], mt: m.mt};
  }  ,function fail(err){

    r.er = err;
    console.log('smm  error in smm_readAllServicePointDetails: ',r.er);
    return r;
  })



 //
 //ServicePointDetailsModel.find(query)
 //    .limit(m.pl.pageSize)
 //       .populate({path:'spbi', select:'servicePointCode servicePointName servicePointAddress servicePointType operatingHours contactPhone'})
 //            .exec(function(paramError, paramData){
 //               if(!paramError){
 //                 r.pl = paramData;
 //                 deferred.resolve(r);
 //                 }
 //                 else {
 //                   r.er.em = paramError;
 //                   deferred.reject(r);
 //                 }
 //             });

  return deferred.promise;

}

function smm_getService(m){
  var r = {"pl": null, "er":null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  var query = {"ds":{"$ne":true}};
  if(m.pl.code)
    query.serviceCode = m.pl.code;
  if(m.pl.qid)
    query._id = new mongoose.Types.ObjectId(m.pl.qid);
  if(!m.pl.qid && !m.pl.code) {
    deferred.reject({pl:null,er:{ec:1283, em:"No service identifier (id or code) specified"}});
    return deferred.promise;
  }
  console.log("QUERYING WITH",query);
  Service.findOne(lib.authTransform(query,'r',credential)).populate('PriceList').exec(function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = {em:paramError};
      deferred.reject(r);
    }
  });
  return deferred.promise;
}

function smm_getServicePointByCode(m){
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
    ServicePoint.findOne(lib.authTransform({servicePointCode: m.pl.code},'r',credential)).exec(function(err,data){
        if(err)
        {
            console.log("failed servicepoint lookup with",err);
            deferred.reject(err);
        }
        else deferred.resolve(data);
    });
    return deferred.promise
}
function smm_readServicePointDetails (m){
  console.log('smm reading servicepoint details---------');

  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);





  ServicePointDetailsModel.findOne(lib.authTransform({sprc:m.pl.sprc},'r',credential)).populate({path:'spbi', select:'servicePointCode servicePointName servicePointAddress sppc operatingHours contactPhone'}).exec(function (paramError, paramData) {


    if (paramData) {
      r.pl = paramData;
      deferred.resolve(r);
    }
    else if (paramError) {
      r.er = paramError;
      deferred.reject(r);
    }
    else if (!paramData) {


      ServicePoint.findOne(lib.authTransform({'servicePointCode': m.pl.sprc},'r',credential)).populate('servicePointType').exec(function (paramError2, paramData2) {


       // console.log('paramData2-----',paramData2);


        if (paramData2) {

          var uid = m.pl.uID || null;
          var oid = m.pl.oID || null;


          ServicePointDetailsModel.create({
            sprc: m.pl.sprc,
            cspn: paramData2.servicePointName,
            spbi: paramData2,
            sptn: paramData2.servicePointType?paramData2.servicePointType.text:null,
            'ct.oID': oid,
            'ct.uID': uid,
            's.own.uid':uid,
            's.grp.uid':oid
          }).then(function (detail) {
                detail.populate({
                  path: 'spbi',
                  select: 'servicePointCode servicePointName servicePointAddress  operatingHours contactPhone sppc'
                }, function (err, param) {

                  if (param) {

                 //  console.log('smm servicepoint detail crated----', param);
                    r.pl = param;
                    deferred.resolve(r);
                  }
                  else if (err) {
                    r.er = err;
                    console.log("smm Error from Create servicepoint detail... " + err);
                    deferred.reject(r);
                  }
                });

              });

        }
        else {
          console.log("smm Error from find servicepoint and populate... " + paramError2);
        }

      });


    }

  });


  return deferred.promise;
}

function smm_updateServicePointDetail(m){
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  ServicePointDetailsModel.updateServicePointDetail(m.pl, credential, function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;

      deferred.reject(r);
    }
  });
  return deferred.promise;
}

function smm_uploadServicePointDetailLogo(m) {
  console.log('\nsmm: in uploading servicepoint detail logo\n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
  storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

    m.pl.jsonData.spl.value = '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;

    delete m.pl.PhotoData;

    ServicePointDetailsModel.updateServicePointDetail( m.pl.jsonData, credential, function(paramError, paramDetail){

      if (!paramError) {
        r.pl = paramDetail;

        deferred.resolve(r);
      }
      else {
        r.er = {ec:'', em: paramError};
        deferred.reject(r);
      }
    });


  }).fail(function (r) {
    deferred.reject(r);
  });
  return deferred.promise;
}

function smm_updateServicePointDetailImages(m) {
  console.log('\nsmm: in uploading servicepoint detail images\n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)



  if(m.pl.op==='create'){

    storageBucketManager('uploadphoto', null,m.pl.ifm, m.pl.photoData, null).then(function (r) {

      var url =  '/photos/' + r.pl.uuid +'_m' +'.' + m.pl.ifm;


      delete m.pl.PhotoData;

      ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {images: {url:url}}},{safe: true, upsert: true}, function(err, profile){
        if(!err){
          r.pl = profile.images.pop();
          deferred.resolve(r);
        }
        else {
          r.er = err;
          deferred.reject(r);
        }
      });

    }).fail(function (r) {
      deferred.reject(r);
    });

  }

  else if (m.pl.op==='delete'){
    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {images: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, servicepointDetail){
      if(!err){
        //returns the whole servicepointDetail
        r.pl = {status:true};
        deferred.resolve(r);
      }
      else {
        r.er = err;
        r.pl = {status:false};
        deferred.reject(r);
      }

    });
  }






  return deferred.promise;
}
function smm_updateServicePointDetailVideos(m) {
  console.log('\nsmm: in updating Servicepoint detail videos\n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)


  if(m.pl.op==='create'){

    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {videos: {url: m.pl.jsonData.url}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        r.pl = returnedDetail.videos.pop();
        deferred.resolve(r);
      }
      else {
        r.er = err;
        deferred.reject(r);
      }
    });
  }

  else if (m.pl.op==='delete'){
    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {videos: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        //returns the whole servicepointDetail
        r.pl = {status:true};
        deferred.resolve(r);
      }
      else {
        r.er = err;
        r.pl = {status:false};
        deferred.reject(r);
      }

    });
  }

  return deferred.promise;
}

function smm_updateServicePointDetailAudios(m) {
  console.log('\nsmm: in uploading Servicepoint detail videos\n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)

  if(m.pl.op==='create'){

    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {audios: {url: m.pl.jsonData.url}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        r.pl = returnedDetail.audios.pop();
        deferred.resolve(r);
      }
      else {
        r.er = err;
        deferred.reject(r);
      }
    });
  }

  else if (m.pl.op==='delete'){
    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {audios: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        //returns the whole returnedDetail
        r.pl = {status:true};
        deferred.resolve(r);
      }
      else {
        r.er = err;
        r.pl = {status:false};
        deferred.reject(r);
      }

    });
  }



  return deferred.promise;
}

function smm_updateServicePointDetailDescription(m) {

  ////
  //description:{
  //    text: {value: {type:String, default: '无'}, verified: Boolean, verifiedDate: Date},
  //    attachment:[{nm: String, fm: String, url: String,fs:Number, uuid: String }]
  //}
  var i;
  console.log('\nsmm: uploading files and updating Servicepoint detail description \n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var fileUploadsPromises = [];
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


  if(m.pl.op==='create'){


    for (i in m.pl.jsonData.description.attachment){
      //executeBucketCommand(paramCommand, paramUUID, paramExtension, paramFileData, paramOptions)
      var p =  storageBucketManager('uploadfile', null, m.pl.jsonData.description.attachment[i].fm, m.pl.jsonData.description.attachment[i].fd, null);
      fileUploadsPromises.push(p);
    }
    Q.all(fileUploadsPromises).then(function (rl){
      var j;
      for (j in rl ){
        if(!(rl[j])) {
          continue;
        }

        //m.pl.jsonData.description.attachment[j].url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.jsonData.description.attachment[j].fm;

        var url  = '/files/' +  rl[j].pl.uuid + '.'+  m.pl.jsonData.description.attachment[j].fm;
        var fm =m.pl.jsonData.description.attachment[j].fm;
        var fd =m.pl.jsonData.description.attachment[j].fd;
        var nm = m.pl.jsonData.description.attachment[j].nm;

        delete m.pl.jsonData.description.attachment[i].fd;

        ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {'description.attachment': {url:url,nm:nm,fd:fd,fm:fm}}},{safe: true, upsert: true}, function(err, returnedDetail){
          if(!err){
            r.pl = returnedDetail.description.attachment.pop();
            deferred.resolve(r);
          }
          else {
            r.er = err;
            deferred.reject(r);
          }
        });

      }


    }).fail(function(){
      deferred.reject(r);
    });

  }
  else if(m.pl.op === 'update'){

    ServicePointDetailsModel.updateServicePointDetail(m.pl.jsonData,credential,function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = paramError;

        deferred.reject(r);
      }
    });
  }

  else if (m.pl.op==='delete'){
    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {'description.attachment': {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        //returns the whole returnedDetail
        r.pl = {status:true};
        deferred.resolve(r);
      }
      else {
        r.er = err;
        r.pl = {status:false};
        deferred.reject(r);
      }

    });
  }

  return deferred.promise;
}

function smm_updateServicePointDetailFAQ(m){
  console.log('\nsmm: updating ServicePoint detail faq\n ');
  var r = {"pl": null, "er": null};
  var deferred = Q.defer();
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);


  if(m.pl.op==='create'){

    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$push': {faq: {q: m.pl.jsonData.q, a: m.pl.jsonData.a}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        r.pl = returnedDetail.faq.pop();
        deferred.resolve(r);
      }
      else {
        r.er = err;
        deferred.reject(r);
      }

    });
  }
  else if(m.pl.op === 'update'){

    ServicePointDetailsModel.update(lib.authTransform({'faq.uuid':m.pl.jsonData.uuid},'w',credential), {'$set': {'faq.$.q': m.pl.jsonData.q, 'faq.$.a': m.pl.jsonData.a}}, function(err, returnedDetail){
      if(!err){


        if(returnedDetail===1)
        {
          r.pl = {status: true};
        }
        else if(returnedDetail===0)
        {
          r.pl = {status: false};
        }

        deferred.resolve(r);
      }
      else {
        r.er = err;
        deferred.reject(r);
      }
    });
  }

  else if (m.pl.op==='delete'){
    ServicePointDetailsModel.findOneAndUpdate(lib.authTransform({_id:m.pl.jsonData._id},'w',credential), {'$pull': {faq: {uuid: m.pl.jsonData.uuid}}},{safe: true, upsert: true}, function(err, returnedDetail){
      if(!err){
        //returns the whole returnedDetail
        r.pl = {status:true};
        deferred.resolve(r);
      }
      else {
        r.er = err;
        r.pl = {status:false};
        deferred.reject(r);
      }

    });
  }

  return deferred.promise;
}
function smm_fetchBusinessRecord(m){
    var ac_code = m.pl.ac_code,
        rc_code = m.pl.rc_code;
    var deferred = Q.defer();
    var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);

    BusinessRecord.findOne(lib.authTransform({acn:ac_code, rc:rc_code},'r',credential),function(err,res){
        if(!err)
            deferred.resolve(res);
        else
            deferred.reject(err);
    });
    return deferred.promise;
}
function smm_spawnBusinessRecord(m){
  var jsonResponse = m.pl.response,
      dbResponse = undefined,
      query = m.pl.query? m.pl.query: m.pl.response,
      ln = m.pl.loginName,
      org = m.pl.currentOrganization,
      tid = m.pl.transactionid._id;
  var credential = new lib.Credential(m.pl.loginName, m.pl.currentOrganization);
  return Q()
      //CREATE BUSINESS RECORD
      .then(function(){

        return transactionHelper.getCreate('businesses',jsonResponse,tid,{acn: m.pl.response.acn,rc: m.pl.response.rc,serviceCode: m.pl.response.serviceCode},true,credential);
      })
      //SET BUSINESS RECORD FIELDS
      .then(function(transCreate) {
          dbResponse = transCreate;
          return transactionHelper.getNextSequence('businessRecordCode');
      })
      .then(function(btc){
        if(!dbResponse.btc)
            jsonResponse.btc = 'LZC'+btc.seq;
        var callbacks = {};
        transactionHelper.setFields(dbResponse,jsonResponse,'businesses',ln,org, callbacks);
        return transactionHelper.saveToPromise(dbResponse);
      })
      .then(function(msg){
        //no need to return the updated entity
        return msg;//transactionHelper.commit({transactionid:tid});
      })
      .fail(function(err){
        return err;
      })
}

exports.operations = [init,
  persistServicePoint
  ,servicePointsByCreator
  ,smm_getServices
  ,recordsByOrganization
  ,downloadRecordsByOrganization
  ,myservice
  ,serviceTypes
  ,servicePointTypes
  ,persistService
  ,serviceNames
  ,myservicePoint
  ,smm_rollback
  ,smm_updateStatus
  ,smm_queryServices
  ,smm_readServicePointDetails
  ,smm_updateServicePointDetail
  ,smm_uploadServicePointDetailLogo
  ,smm_updateServicePointDetailImages
  ,smm_updateServicePointDetailVideos
  ,smm_updateServicePointDetailAudios
  ,smm_updateServicePointDetailDescription
  ,smm_updateServicePointDetailFAQ
  ,smm_readAllServicePointDetails
  ,smm_getService
  ,smm_spawnBusinessRecord
  ,smm_changeServiceCode
  ,smm_changeServicePointCode
  ,smm_serviceCodeInUse
  ,smm_servicePointCodeInUse
  ,smm_fetchBusinessRecord
  ,smm_getServicePointByCode
];
//=======================================PUBLIC INTERFACE =========================================//

//re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});


