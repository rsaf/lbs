//install the cli(as sudo): npm install -g grunt-cli
// install grunt: npm install grunt --save-dev
try{
var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');
}catch(e){
  console.log('In grunt there is a helper to drop the database (grunt dropdb)\n\
The integration tests will drop the database before running if the option --dropdb=true is given.\n\
For this to work you need to soft link to mongodb, issue the following command in test/node\n\
ln -s cmm/node_modules/mongoose/node_modules/mongodb/ mongodb\n');
  throw new Error("No mongodb set in test/node_modules")
}
 module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    nodeunit: {
      integration: ['./test*.js']
      , unit: ['./unit-test*.js']
    },
    watch: {
      integration: {
        files: ['../*.js','./**/test*.js','../models/**/*.js','./fixtures/*.js'],
        tasks: ['integrationtest']
      }
      , unit: {
        files: ['../*.js','./**/unit-test*.js','../models/**/*.js','./fixtures/**/*.js'],
        tasks: ['unittest']
      }
    }
  });
  grunt.registerTask('dropdb','drops smm collection.',function(){
    var done = this.async();
    MongoClient.connect('mongodb://localhost/smm', function(err, db) {
      if(err){
        throw new Error('Unable to connect to smm.');
      }
      db.dropDatabase(function(err){
        db.close();
        if(err){
          throw new Error('Unable to drop smm.');
        }
        done();
      });
    });
  });
  grunt.registerTask('integrationtest','Runs the integration tests.',function(){
    console.log('');
    console.log('*******************************************************************************');
    console.log('*********  Running integration tests, to drop database before test do *********');
    console.log('*********  grunt --dropdb=true                                        *********');
    console.log('*******************************************************************************');
    if(grunt.option('dropdb')){
      grunt.task.run('dropdb');
    }
    grunt.task.run('nodeunit:integration');
  });
  grunt.registerTask('unittest','Runs the unit tests.',function(){
    grunt.task.run('nodeunit:unit');
  });
  grunt.registerTask('watchunit','Runs the unit tests continuous.',function(){
      grunt.task.run('watch:unit');
  });
  // Load the plugin that provides the "nodeunit" task.
  grunt.loadNpmTasks('grunt-contrib-nodeunit');
  // Load the plugin that provides the "watch" task.
  grunt.loadNpmTasks('grunt-contrib-watch');
  // Default task(s).
  grunt.registerTask('default', ['integrationtest']);
};