/*
 * Tests for ../smm_interface
 */
var smm;
var servicePointId;
var serviceId;
var pricelists;
var Q = require('q');
try{
  var oCMM = require('cmm');
}catch(e){
  console.log('test depends on the cmm, to get that dependency without having to re install it you can softlink it:\n\
in dev/bitbucket/lbs.api.smm.yourbranche/node_modules use the following command:\n\
ln -s ../../../lbs.api.cmm.development/ cmm\n');
  throw new Error('Have to set cmm dependency');
}
var smm= require('../smm_Interface.js');
var transactionid;

exports.setUp = function setUp(callback) {
  function message(m){
      if (m.op === 'dependency')
      {
          m.ns = 'smm';

        return oCMM.dependency(m);
      }
  }
  var init_message = {
      'op': 'init',
       ns : '',
      'pl':{fn:message}
      };
  smm.init(init_message).then(
    function resolve(r) {
      callback();
    },function fail(r) {
      console.log('failed to resolve init',r);
      callback();
  });
};

exports.tearDown = function tearDown(callback) {
    callback();
};

//exports.testFailAll = function testFailAll(test){
//};

exports.testCreateServicePoint = function testCreateServicePoint(test){
  var m = {"pl": {
      servicePoint:{
        servicePointCode: undefined,
        servicePointName: "servicePointName",
        servicePointAddress: "servicePointAddress",
        servicePointType: "54c1ed0c2577af17051b3cf0",
        operatingHours: "operatingHours",
        contactPerson: "contactPerson",
        contactPhone: "contactPhone",
        postalCode:'110000',
        servicePointDescription: "servicePointDescription"
      }
      ,"loginName": "haru"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
      ,transactionid:'000000000000000000000001'
    }
  };
  smm.persistServicePoint(m).then(function(msg){
    servicePointId=msg.pl._id;
    test.strictEqual(1,1,'Payload should be null when createService failed');
    test.done();
  }).fail(function(er){
    console.log('failed create service point:',er);
    test.done();
  });
};

exports.testUpdateServicePoint = function testUpdateServicePoint(test){
  var m = {"pl": {
      servicePoint:{
        _id: servicePointId,
        servicePointName: "new servicePointName",
        servicePointAddress: "new servicePointAddress",
        servicePointType: "54c73ac4986b31f829292729",
        operatingHours: "new operatingHours",
        contactPerson: "new contactPerson",
        postalCode:'120000',
        contactPhone: "new contactPhone",
        servicePointDescription: "new servicePointDescription"
      }
      ,"loginName": "haru"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
      ,transactionid:'000000000000000000000001'
    }
  };
  smm.persistServicePoint(m).then(function(msg){
    servicePointId=msg.pl._id;
    test.strictEqual(1,1,'Payload should be null when createService failed');
    test.done();
  }).fail(function(er){
    console.log('failed create service point:',er);
  });
};

exports.testCreateService = function testCreateService(test){
  var m = {
    pl:{
      service:{
        serviceName: 'service name',
        serviceType: '54c1f04c8142df3b05608ba9',
        briefOverview: 'overview',
        standardPayment: ['3'],
        standardServicePrice: '1',
        standardPricing: '3',
        standardServiceNotes: '2',
        standardReservationRequest: false,
        "PriceList":[
            {     servicePrices: '111',
                  pc:'110000',
                  discountedPrice: '2222',
                  appointmentRequeirement: '0',
                  paymentMethod: ['2', '3'],
                  remark: 'notes1',
                  servicePoint:servicePointId,
                  clientCommandAddNew:true}]
      }
      ,"loginName": "haru"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
      ,transactionid:'000000000000000000000001'
    }
  };
  smm.persistService(m)
  .then(function(msg){
    test.equal(msg.pl.briefOverview,'overview','correct briefOverview');
    test.equal(msg.pl.standardPayment[0],3,'correct standardPayment');
    test.equal(msg.pl.standardServicePrice,1,'correct standardServicePrice');
    test.equal(msg.pl.standardPricing,3,'correct standardServiceNotes');
    test.equal(msg.pl.standardServiceNotes,2,'correct standardServiceNotes');
    test.equal(msg.pl.status,10,'correct status');
    test.equal(msg.pl.standardReservationRequest,false,'correct standardReservationRequest');
    test.equal(msg.pl.PriceList.length,1,'correct PriceList');
    test.equal(msg.pl.PriceList[0].serviceType,'54c1f04c8142df3b05608ba9','correct PriceList service type');
    test.equal(msg.pl.PriceList[0].serviceName,msg.pl.serviceName._id.toString(),'correct PriceList service name is set');
    test.equal(msg.pl.PriceList[0].pc,'120000','correct PriceList postal code');//should have been done by healthcheck
    test.equal(msg.pl.ct.uID,'haru','correct created user');
    test.equal(msg.pl.md.uID,'haru','correct update user');
    serviceId=msg.pl._id;
    return   smm.persistService({pl:
          {service:{"PriceList":[
            {     servicePrices: '1',
                  discountedPrice: '2',
                  pc:'110000',
                  appointmentRequeirement: '0',
                  paymentMethod: ['2', '3'],
                  remark: 'notes2',
                  servicePoint:servicePointId,
                  clientCommandAddNew:true}
            ,{    servicePrices: '100',
                  discountedPrice: '2',
                  appointmentRequeirement: '0',
                  pc:'112600',
                  paymentMethod: ['2', '3'],
                  remark: 'notes3',
                  servicePoint:servicePointId,
                  clientCommandAddNew:true}
        ]
        ,"_id":serviceId
        ,standardReservationRequest:true
        ,standardServiceNotes:'standard notes'
        ,standardPricing:88
        ,standardServicePrice:888
        ,briefOverview:'new overview'
        ,serviceName:'new name'
        ,serviceType:'54c1f04c8142df3b05608ba8'
        ,standardPayment:[1]
      }
      ,"loginName": "haru1"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
      ,transactionid:'54852b4bada015b113c0df7e'
      }
    });
  })
  .then(function(msg){
    test.equal(msg.pl.status,10,'correct status');
    test.equal(msg.pl.briefOverview,'new overview','correct briefOverview');
    test.equal(msg.pl.standardPayment[0],1,'correct standardPayment');
    test.equal(msg.pl.standardServicePrice,888,'correct standardServicePrice');
    
    test.equal(msg.pl.PriceList[0].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg.pl.PriceList[1].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg.pl.PriceList[2].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg.pl.PriceList[0].serviceName,msg.pl.serviceName._id.toString(),'correct PriceList service name is set');
    test.equal(msg.pl.PriceList[0].pc,'120000','correct PriceList postal code');//should have been done by healthcheck

    test.equal(msg.pl.standardPricing,88,'correct standardServiceNotes');
    test.equal(msg.pl.standardServiceNotes,'standard notes','correct standardServiceNotes');
    test.equal(msg.pl.standardReservationRequest,true,'correct standardReservationRequest');
    test.equal(msg.pl.serviceName.text,'new name','correct serviceName');
    test.equal(msg.pl.ct.uID,'haru','correct created user');
    test.equal(msg.pl.md.uID,'haru1','correct update user');
    return   smm.persistService({pl:
          {service:{"PriceList":[
            {     servicePrices: '33',
                  pc:'112700',
                  clientCommandUpdate:true,
                  _id:msg.pl.PriceList[0]._id
                }
            ]
            ,_id:msg.pl._id
          }
          ,transactionid:'000000000000000000000007'
          ,"loginName": "haru1"
          ,"currentOrganization": "54852b4bada015b113c0df7e"
          }
        });
  })
  .then(function(msg){
    test.equal(msg.pl.PriceList[0].servicePrices,33,'correct updated picelist');
    test.equal(msg.pl.PriceList[0].pc,'120000','correct updated picelist postal code');
    test.equal(msg.pl.md.uID.toString(),"haru1",'correct last updated user id');
    return smm.persistService({pl:
          {service:{"PriceList":[
            {     _id: msg.pl.PriceList[0]._id,
                  clientCommandRemove:true}
            ,{    _id: msg.pl.PriceList[1]._id,
                  discountedPrice: '111',
                  clientCommandUpdate:true}
            ,{
                  discountedPrice: '333',
                  servicePoint:servicePointId,
                  clientCommandAddNew:true}
              ]
        ,"_id":serviceId
        ,standardPricing:'not a number'
        ,serviceName:'rolled back name'
        ,standardServicePrice:888
      }
      ,"loginName": "haru2"
      ,"currentOrganization": "54852b4bada015b113c0df7e"
      ,transactionid:'000000000000000000000008'
      }
    }).then(function resolve(m){
        test.equal(1,2,'not supposed to succeed');
        console.log('not supposed to succeed');
      },function reject(er){
        return smm.smm_rollback({pl:{transactionid:'000000000000000000000008'}});
    });
  })
  .then(function(msg){
    return smm.myservice({pl:{query:{_id:serviceId}}});
  })
  .then(function(msg){
    test.equal(msg.pl.PriceList.length,3,'correct amount of picelist after rollback');
    test.equal(msg.pl.PriceList[0].pc,'120000','correct updated picelist postal code');
    test.equal(msg.pl.status,10,'correct status after rollback');
    test.equal(msg.pl.briefOverview,'new overview','correct briefOverview after rollback');
    test.equal(msg.pl.standardPayment[0],1,'correct standardPayment after rollback');
    test.equal(msg.pl.standardServicePrice,888,'correct standardServicePrice after rollback');
    test.equal(msg.pl.standardPricing,88,'correct standardServiceNotes after rollback');
    test.equal(msg.pl.standardServiceNotes,'standard notes','correct standardServiceNotes after rollback');
    test.equal(msg.pl.standardReservationRequest,true,'correct standardReservationRequest after rollback');
    test.equal(msg.pl.serviceName.text,'new name','correct serviceName after rollback');
    test.equal(msg.pl.ct.uID,'haru','correct created user after rollback');
    test.equal(msg.pl.md.uID,'haru1','correct update user after rollback');

    return Q.all([
      smm.persistService({
        pl:{
          service:{
            "_id":serviceId
            ,serviceName:'other name'
            ,serviceType:'54c1f04c8142df3b05608b99'
          }
          ,"loginName": "haru"
          ,"currentOrganization": "54852b4bada015b113c0df7e"
          ,transactionid:'000000000000002222222222'
        }
      })
    ,msg.pl.serviceName]);
  })
  .then(function(msg){
    return Q.all([
      smm.smm_rollback({pl:{transactionid:'000000000000002222222222'}})
      ,msg[1]
    ]);
  })
  .then(function(msg){
    return Q.all([smm.myservice({pl:{query:{_id:serviceId}}}),msg[1]]);
  })
  .then(function(msg){
    test.equal(msg[0].pl.PriceList[0].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg[0].pl.PriceList[1].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg[0].pl.PriceList[2].serviceType,'54c1f04c8142df3b05608ba8','correct PriceList service type');
    test.equal(msg[0].pl.PriceList[0].serviceName,msg[0].pl.serviceName._id.toString(),'correct PriceList service name is set');
    test.equal(msg[0].pl.PriceList[1].serviceName,msg[0].pl.serviceName._id.toString(),'correct PriceList service name is set');
    test.equal(msg[0].pl.PriceList[2].serviceName,msg[0].pl.serviceName._id.toString(),'correct PriceList service name is set');

  })
  .then(function(msg){
      test.done();
    },function(err){
      console.log('---------in the test fail:',err);
      test.equal(1,2,'Should not fail');
      test.done();
  });
};



