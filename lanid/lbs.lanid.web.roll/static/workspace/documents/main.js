/** * Created by rollandsafort on 4/6/15. */console.log('documents is loaded...');lbs.routes['/workspace'] = {mod: 'lbs.workspace', location: '/workspace/main.js'};lbs.routes['/workspace/documents'] = {mod: 'lbs.workspace.documents', location: '/workspace/documents/main.js'};lbs.routes['/workspace/documents/contracts'] =    lbs.routes['/workspace/documents/otherdocuments'] = {mod:'lbs.workspace.documents.common',location:'/workspace/documents/main.js'};        lbs.routes['/workspace/documents:list'] = {mod:'lbs.workspace.documents:list',location:'/workspace/documents/main.js'};lbs.routes['/workspace/documents:delete'] = {mod:'lbs.workspace.documents:delete',location:'/workspace/documents/main.js'};lbs.modules['/workspace/documents'] = {    create: function () {        this.parent = lbs.workspace;        this.endPoints = {};        this.endPoints.contracts = '/workspace/blobs/contracts/all.json';        this.endPoints.otherdocuments = '/workspace/blobs/otherdocuments/all.json';        lbs.workspace.documents = this;        var me = this;        this.handlers['documents:listView'] = function (e) {            me['documents:listView'](e);        };        this.handlers['documents:galleryView'] = function (e) {            me['documents:galleryView'](e);        };        this.handlers['document:send:email'] = function (e) {            me.emailDocuments(e);            console.log('---------------------send email');        };        this.handlers['document:new:upload'] = function (e) {            me.uploadNewDocument(e);        };        this.handlers['document:information:upload'] = function (e) {            me.submitDocument(e);        };        this.handlers['documents:document:delete'] = function (e){            console.log('delete multiple-------');            me.confirmDeleteDocument(e);        };        delete this.deps;        delete this.create;    }    , 'documents:listView': function (e) {        //cannot savely put content in the container because style is set on this container        //  style should have been set on a child of container_bottom so it can be replaced        //  without messing with the classes in script as we have to do now        var $listContainer = jQuery(this.listMod.forContainer);        this.listMod.currentView = 'listView';        this.listMod.pageSize = 10;        $listContainer.removeClass('idPhotoGalery');        this.listMod.rerender();    }    ,'documents:galleryView': function (e) {        var $listContainer = jQuery(this.listMod.forContainer);        this.listMod.currentView = 'galleryView';        this.listMod.pageSize = 8;        $listContainer.addClass('idPhotoGalery');        $listContainer.removeClass('unprocessedPhotosContainer');        this.listMod.rerender();    }    , data: {imgData: null, infoData: {}}    , basePath: '/workspace/documents'    , deps: ['/workspace', '/workspace/documents:list']    , listMod: null    , documentsToDelete:[]    , render: function render(arg) {        console.log(' /workspace/documents   render------');        arg = arg || {};        var me = this;        return jQuery.when(            lbs.modHelper.getView('/workspace/documents/main.html')            , lbs.modHelper.getMod('/workspace/documents:list')            , this.parent.render({fromChild: true})        ).then(function (view, listMod) {                console.log(' /workspace/documents    listMod---',listMod);                if(listMod.create){listMod.create()};                me.listMod = listMod;                lbs.modHelper.setContainer({                    mod: me,                    html: Mustache.render(view, {settings: arg.settings}),                    container: arg.container                });                lbs.actionHandler({container: arg.container, handlers: me.handlers});                return listMod.render({                    container: '.container_bottom'//@todo:just pass arg here and set arg.container                    , endPoint: arg.settings.endPoint                    , view: arg.view                    , handlers: arg.listHandlers                    , settings: arg.settings                    ,documentsToDelete:me.documentsToDelete                });            });    }    , emailDocuments: function emailDocuments() {        var me = this;        lbs.modHelper.getView('/workspace/documents/destinationEmail.html')            .then(function (view) {                //   console.log(me.personalProfile);                lbs.modHelper.setContainer({                    container: '#platformAPIsModal'                    , html: Mustache.render(view)                });                lbs.actionHandler({                    container: '#platformAPIsModal'                    , handlers: me.handlers                });                $('#platformAPIsModal').modal().off('hide.bs.modal.setEmail');                $('#platformAPIsModal').modal().on('hide.bs.modal.setEmail', function () {                    lbs.modHelper.setContainer({                        container: '#platformAPIsModal'                        , html: ''                    });                });                var i = -1, len = boundVals.length;                while (++i < len) {                    boundVals[i].updateUI();                    me.updatedContact = boundVals[i];                }            })    }    , submitDocument: function submitDocument(e) {        var me = this;        var type = $.param.fragment().split('/').pop();        var infoData =  $('#documentInforForm').serializeObject();        lbs.modHelper.getView('/workspace/documents/spinningStransitionPage.html')            .then(function (view) {                lbs.modHelper.setContainer({                    container: '#platformAPIsModal'                    , html: Mustache.render(view)                });                $('#platformAPIsModal').modal().off('hide.bs.modal.submitDocument');            });        $('#uploadForm').ajaxSubmit({             url:'/workspace/blobs/'+type+'/upload.json'            ,type:'POST'            ,data: {'fileInfo': JSON.stringify(infoData)}            ,contentType:'multipart/form-data'            ,dataType: 'json'            ,success: function (data) {                console.log('--------submit successful----------',data.pl);                lbs.workspace.documents.listMod.list.push(data.pl);                lbs.workspace.documents.listMod.rerender();                lbs.basemodule['photo:list'].movePage.call(lbs.workspace.documents.listMod,{e:{direction:'right'}});                $('#platformAPIsModal').modal('hide');                lbs.modHelper.setContainer({                    container: '#platformAPIsModal'                    , html: ''                });                $('#uploadForm').resetForm();            }            ,error: function(err){                console.log('error:---- ',err);                $('#uploadForm').resetForm();            }            ,cache: false   //dont cache request            ,processData: false // Don't process the files            ,contentType: false // Set content type to false as jQuery will tell the server its a query string request        });    }    , uploadNewDocument: function uploadNewDocument(e) {        lbs.basemodule.pageComplete();        var me = this;        var reader = new FileReader(),           // img = new Image(),            fileSize = 0,            fileSizePxWidth = 0,            fileSizePxHeight = 0;        console.log('inside document handlers-------------------');        var input = $(e.target),            files = e.target.files[0],            numFiles = input.get(0).files ? input.get(0).files.length : 1,            label = input.val().replace(/\\/g, '/').replace(/.*\//, '');             fileSize = Math.round(files.size / 1024);        // Create a formdata object and add the files        //$.each(files, function (key, value) {        //    me.data.imgData.append(key, value);        //});        var me = this;        //boundVals=[];        jQuery.when(            lbs.modHelper.getView('/workspace/documents/uploadedDocumentInfo.html')        ).then(function(view){                console.log(' ------rendering file upload modal---------');                lbs.modHelper.setContainer({                    container: '#platformAPIsModal'                    , html: Mustache.render(view)                });                lbs.actionHandler({                    container: '#platformAPIsModal'                    , handlers: me.handlers                });                $('.uploadedDocumentName').val(label);                $('#platformAPIsModal').modal( ).off('hide.bs.modal.uploadDocument');                lbs.basemodule.pageComplete();              //  $('#uploadedPhotoResolutionInfo').text(fileSizePxWidth + 'mmX' + fileSizePxHeight + 'mm');                $('#uploadedFileSizeInfo').text(fileSize + ' Kb');               $('.uploadedFileSizeInfo').val(fileSize + ' Kb');              //  $('.uploadedPhotoResolutionInfo').val(fileSizePxWidth + '*'+ fileSizePxHeight);                $('#platformAPIsModal').modal().on('hide.bs.modal.uploadDocument', function () {                    lbs.modHelper.setContainer({                        container: '#platformAPIsModal'                        , html: ''                    });                });            })    }    ,confirmDeleteDocument:function confirmDeleteDocument(e){        var me = this;        console.log('----------------confirm delete document-------\n');        lbs.modHelper.getMod('/workspace/documents:delete')            .then(function(newMod){                newMod.render({container:'#platformAPIsModal',codes: me.documentsToDelete});            });    }    , handlers: {        'document:search': function (e) {            e.preventDefault();        }        , setSelectedMode: function (e) {            lbs.basemodule['photo:list'].setSelectedMode.call(this, {e: e});        }    }};lbs.modules['/workspace/documents/contracts'] =    lbs.modules['/workspace/documents/otherdocuments'] =    {        deps : ['/workspace/documents']        ,container:'#right_container'        ,routes:{}        ,create : function create(){        var me = this;        this.parent=lbs.workspace.documents;        this.routes['/workspace/documents/contracts']={            endPoint:lbs.workspace.documents.endPoints.contracts            ,showDownload:false            ,showDropDown:true            ,showNewAlbum:false            ,showList:true            ,contracts:true            ,showGallery:true            ,showSelect:true            ,root:'文件管理'            ,currentPage:'协议合同'        };        this.routes['/workspace/documents/otherdocuments']={            endPoint:lbs.workspace.documents.endPoints.otherdocuments            ,showDownload:false            ,showDropDown:true            ,showNewAlbum:false            ,showList:true            ,otherdocuments:true            ,showGallery:true            ,showSelect:true            ,root:'文件管理'            ,currentPage:'其他文件'        };        lbs.workspace.documents.common = this;        var me = this;        delete this.deps;        delete this.create;    }        ,render : function render(arg){        return this.parent.render({            fromChild:true            ,container:this.container            ,settings:this.routes[jQuery.param.fragment()]        }).then(function(){            console.log('render contracts--done---');        })    }        ,handlers:{        'documents:bbqUpdate': lbs.globalHandlers.bbqUpdate    }        ,remove : function remove(){    }    };lbs.modules['/workspace/documents:list'] = {    deps: ['/workspace']    ,views:{        galleryView:'/workspace/documents/galleryView.html'        ,listView:'/workspace/documents/listView.html'    }    ,currentView:null    ,list:[]    ,otherHandlers:false    ,index:0    ,totalRecords:null    ,pageSize:8    ,documentsToDeleteBinders:[]    ,documentsToDelete:null    ,create : function create(){        var me = this;        this.handlers['documents:list:movePage']=function(e){            me.movePage(e);        }        this.handlers['show:document:bigger'] = function(e){            me.showBiggerDocument(e);        }        this.handlers['document:list:details'] = function(e){            me.showListViewDocumentDetails(e);        }        this.handlers['documents:select:all'] = function (e){            console.log('selected all documents');            me.markAllDocumentsSelected(e);        };        this.handlers['documents:document:delete:one'] = function (e){            console.log('delete-------');            me.confirmDeleteSingleDocument(e);        };        lbs.workspace['documents:list'] = this;        delete this.deps;        delete this.create;    }    ,render : function render(arg){        var me = this;        me.documentsToDelete=arg.documentsToDelete;        return lbs.basemodule['photo:list'].render.call(this,arg);    }    ,rerender:function rerender(){        var setTotalSelected = function(obj,key){            var numbeOfItems = obj[key].length;            if(numbeOfItems>0&&jQuery('.numberOfSelectedItems').length> 0){                jQuery('.numberOfSelectedItems').removeClass('hide').find('strong').text(numbeOfItems);            }        };        var me = this;        return lbs.basemodule['photo:list'].rerender.call(this)            .then(function(){                lbs.binder.unbind(me.documentsToDeleteBinders);                me.documentsToDeleteBinders = lbs.binder.bind('.container_bottom',{ids:me.documentsToDelete},'delDocument'                    ,[setTotalSelected]);                console.log('documentsToDeleteBinders:--- ',me.documentsToDeleteBinders);                console.log('documentsToDelete:--- ',me.documentsToDelete);                lbs.binder.updateUI(me.documentsToDeleteBinders);                setTotalSelected(me,'documentsToDelete');            });    }    ,markAllDocumentsSelected:function markAllDocumentsSelected(e){        var me = this;        console.log('marking as checked');        if(me.documentsToDelete.length<8) {            $('.documentSelection').prop('checked','true').change();        }        else{            $('.documentSelection').prop('checked',false).change();        }    }    ,showListViewDocumentDetails: function showListViewDocumentDetails(e){        var me = this;        var arr = lbs.workspace.documents.listMod.list;        var _id = e.target.getAttribute('data-id');        var details = null;        console.log('_id-----',_id);        var index = lbs.util.find({arr:arr,key:'_id',val:_id})        if(index>-1){            details = arr[index];            console.log('-----items is -----', details);        }        lbs.modHelper.getView('/workspace/documents/documentDetails.html')            .then(function(view){                lbs.modHelper.setContainer({                    container:'#platformAPIsModal'                    ,html:Mustache.render(view,{details:details,date:lbs.util.renderDate,size:lbs.util.renderFileSizeInKB})                });                $('#platformAPIsModal').modal().off('hide.bs.modal.docs');                $('#platformAPIsModal').modal().on('hide.bs.modal.docs', function(){                    lbs.modHelper.setContainer({                        container:'#platformAPIsModal'                        ,html:''                    });                });            });    }    ,movePage:function movePage(e){        lbs.basemodule['photo:list'].movePage.call(this,{e:e});    }    ,updateArrows:function updateArrows(){        var me = this;        lbs.basemodule['photo:list'].updateArrows.call(this);    }    ,confirmDeleteSingleDocument:function confirmDeleteSingleDocument(e){        var codes = [];        codes.push(e.target.getAttribute('data-code'));        lbs.modHelper.getMod('/workspace/documents:delete')            .then(function(newMod){                newMod.render({container:'#platformAPIsModal',codes:codes });            });    }    ,handlers:{    }    ,remove : function remove(){    }};lbs.modules['/workspace/documents:delete'] = {    view:'/workspace/documents/confirmDeleteDocument.html'    ,handlers:{}    ,confirmedDeleteCodes :null    ,documentStandard:{}    ,render : function render(arg){        var me = this;        console.log('delete render');        this.modalContainer=arg.container;        console.log('render called with',arg)        me.confirmedDeleteCodes = arg.codes;        lbs.modHelper.getView(me.view).then(function(view){            lbs.modHelper.setContainer({                mod:me                ,container:arg.container                ,html:Mustache.render(view)            });            lbs.actionHandler({container: arg.container, handlers: me.handlers});            jQuery(arg.container).modal().off('hidden.bs.modal.delete.document');            jQuery(arg.container).modal().on('hidden.bs.modal.delete.document', function(){                lbs.modHelper.setContainer({                    container:arg.container                    ,html:''                });            });        });    }    ,create : function(){        var me = this;        this.handlers['documents:documents:delelete:confirmed']=function(e){            me.deleteConfirmed();        }        lbs.workspace.documents.delete = this;        delete this.deps;        delete this.create;    }    ,deleteConfirmed : function deleteConfirmed(e){        var me = this;        console.log('delete confirmed-----');        lbs.modHelper.getMessage ('/workspace/blobs/documents/' +me.confirmedDeleteCodes+ '.json'            , null            , {modalToHide:'#platformAPIsModal'}, 'DELETE', {codes:me.confirmedDeleteCodes})            .then(function (data){                console.log('post succesfull');                console.log('data', data);                var i =  me.confirmedDeleteCodes.length;                console.log('going to delete:',me.confirmedDeleteCodes)                while(--i>-1){                    var index =   lbs.util.find({                        arr:lbs.workspace.documents.listMod.list                        ,key:'_id'                        ,val: me.confirmedDeleteCodes[i]                    });                    console.log('        index ',  index);                    if (index > -1) {                        lbs.workspace.documents.listMod.list.splice(index,1);                        me.confirmedDeleteCodes.splice(i,1);                    }                    console.log('----remaining documents:', lbs.workspace.documents.listMod.list.length);                }                $('#platformAPIsModal').modal('hide');                lbs.modHelper.setContainer({                    container:'#plaformAPIsModal'                    ,html:''                });                console.log('-----------------after while loop');                lbs.workspace.documents.listMod.rerender();            })    }    ,deps:[]};