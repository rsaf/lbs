/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

exports.version = "1.0.0";

var config = require('./config.js');
var mongoose = config.mongoose();

var LogSchema = require("./models/log.js")(mongoose);
var Log = mongoose.model('logs', LogSchema); //exposes static methods
var oLog = new Log(); //exposes instance methods

module.exports.logRequest = function()
{
   return function logHandler(paramRequest, paramResponse, paramNextFunction) {
        paramNextFunction();
        var varOperationType = null;
        var varOperationName = null;
        
        switch (paramRequest.url) {
            case '/home/login':
                varOperationType = '授权操作';
                varOperationName = '登陆';
                break;
            case '/home/registration':
                varOperationType = '授权操作';
                varOperationName = '注册';
                break;
            case '/home/logout':
                varOperationType = '授权操作';
                varOperationName = '注销';
                break;
            case '/personal/fin/':
                varOperationType = '授权操作';
                varOperationName = '财务';
                break;
                
            default:
                varOperationType = '业务操作';
                varOperationName = '业务';
                
        };

        var paramLogJson = {
            //userAccountID: paramRequest.user.id,
            opType: varOperationType,
            opName: varOperationName,
            opDate: new Date(),
            srcIP: paramRequest.connection.remoteAddress,
            srcURI: paramRequest.url,
            detail: "",
            status: paramResponse.statusCode
        };
        Log.create(paramLogJson, function(parammError, parammLogJson) {
            //console.log(parammLogJson.toString());
        });
        //console.log('response header: ' + paramResponse.headers.toString());
        //console.log(paramResponse.Session.user.toString());
    }
    ;
};

module.exports.readOperationsLogs = function(paramUserAccountID, paramOpType, paramPageNumber, paramPageSize, paramCallback) {
  if(paramOpType){
     var query = Log.find({userAccountID: paramUserAccountID,opType: paramOpType}).skip((paramPageNumber - 1) * paramPageSize).limit(paramPageSize);
  }
  else {
   var query = Log.find({userAccountID: paramUserAccountID}).skip((paramPageNumber - 1) * paramPageSize).limit(paramPageSize); 
  }
   query.exec(paramCallback);
  //Log.find({userAccountID: paramUserAccountID},paramCallback);
};

module.exports.initialize = function() {
    // Initialize the counter
    var counter = 0;
    return function createLogHandler(paramRequest, paramResponse, next) {
        var writeHead = paramResponse.writeHead; // Store the original function
        counter++;
        // Log the incoming request
        console.log("Request " + counter + " " + paramRequest.method + " " + paramRequest.url);
        // Wrap writeHead to hook into the exit path through the layers.
        paramResponse.writeHead = function(code, headers) {
            var varOperationType = null;
            var varOperationName = null;
            switch (paramRequest.url) {
                case '/home/login':
                    varOperationType = '授权操作';
                    varOperationName = '登陆';
                    break;
                case '/home/registration':
                    varOperationType = '授权操作';
                    varOperationName = '注册';
                    break;
                case '/home/logout':
                    varOperationType = '授权操作';
                    varOperationName = '注销';
                    break;
                case '/personal/fin/':
                    varOperationType = '授权操作';
                    varOperationName = '财务';
                    break;

                default:
                    varOperationType = '业务操作';
                    varOperationName = '业务';
            }
            ;
            var varUserAccountID = null;
            if (paramRequest.user && paramRequest.user !== "null" && paramRequest.user !== "undefined") {
                varUserAccountID = paramRequest.user.id;
            }
            else {
                varUserAccountID = '000000000000000000000002'; // for guest users
            }
            var paramLogJson = {
                userAccountID: varUserAccountID,
                opType: varOperationType,
                opMethod: paramRequest.method,
                opName: varOperationName,
                opDate: new Date(),
                srcIP: paramRequest.connection.remoteAddress,
                srcURI: paramRequest.url,
                detail: JSON.stringify(headers),
                status: paramResponse.statusCode
            };
            paramResponse.writeHead = writeHead; // Put the original back
            // Log the outgoing response
            console.log("Response " + counter + " " + code + " " + JSON.stringify(headers));
            paramResponse.writeHead(code, headers); // Call the original
            Log.create(paramLogJson, function(parammError, parammLogJson) {
                //console.log(parammLogJson.toString());
            });
        };
        //Pass through to the next layer
        next();
    };
};