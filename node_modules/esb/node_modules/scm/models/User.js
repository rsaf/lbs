/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//Model Dependencies ===============================
var bcrypt   = require('bcrypt-nodejs');

module.exports = function (paramMongoose){

//Model Schema Definition ===============================
var userSchema = paramMongoose.Schema({
    //_id: String,
    createdOn: { type: Date, default: Date.now }, 
    loginStatus: Boolean,
    lastHostName: String, 
    accountIsLocked: Boolean, 
    lastChangeDate: Date,
    lastLoginDate: Date,
    lastLoginMethod: String,  //local, facebook, twitter, google
    lastFailDate:  Date,
    failCount: Number,
    expirationDate: Date,
    userType: String, // personal, corporate, servicePoint,admin
    loginCountTotal: Number,
    groups:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'Group'}],
    organizations:[{type: paramMongoose.Schema.Types.ObjectId, ref: 'Organization'}],
    lanzheng         : {
        loginName    : {type: String, unique:true},
        hashPassword : String,
        oldPasswords : [String],
        loginCount   : Number
    },
     apiLogin        : {
        //id         : {type: String, unique:true},
        token        : String,
        email        : String,
        name         : String,
        loginCount   : Number
    },
    facebook         : {
        //id         : {type: String, unique:true},
        token        : String,
        email        : String,
        name         : String,
        loginCount   : Number
    },
    twitter          : {
        //id         : {type: String, unique:true},
        token        : String,
        displayName  : String,
        username     : String,
        loginCount   : Number
    },
    google           : {
        //id         : {type: String, unique:true},
        token        : String,
        email        : String,
        name         : String,
        loginCount   : Number
    }
});

// Model methods ======================
// generating a hash
userSchema.statics.findLanzhengUser = function(paramLoginName, paramCallback){    
this.findOne({'lanzheng.loginName': paramLoginName}, paramCallback);
};

userSchema.methods.incLanzhengLoginCount = function(paramCallback){
if(this.lanzheng.loginCount){
this.lanzheng.loginCount += 1;
}
else {
  this.lanzheng.loginCount = 1;  
}
this.save(paramCallback);
};

userSchema.methods.generateHash = function(paramPassword) {
    return bcrypt.hashSync(paramPassword, bcrypt.genSaltSync(8), null);
};

// checking if password is valid
userSchema.methods.validPassword = function(paramPassword) {
    return bcrypt.compareSync(paramPassword, this.lanzheng.hashPassword);
};

userSchema.methods.register = function (paramLoginName, paramPassword,paramUserType, paramCallback){
 this.userType = paramUserType;
 this.lanzheng.loginName = paramLoginName;
 this.lanzheng.hashPassword =  this.generateHash(paramPassword);
 this.lanzheng.loginCount = 1; // Once the user is registered, the user is automatically loginned
 this.loginStatus = true;
 this.save(paramCallback);
};

userSchema.statics.login = function (paramLoginName, paramPassword, paramCallback){
this.findLanzhengUser(paramLoginName, function(paramError, paramUser){
    if(paramError){
       paramCallback(paramError,false);
    }
    else if (paramUser){
        if(paramUser.validPassword(paramPassword)){
        paramUser.incLanzhengLoginCount(paramCallback);   
        }    
        else {
         paramCallback("Invalid Login or Password!, please try again ", false);   
        }
    }
    else {
        paramCallback(paramError,false);
    }
});
};

userSchema.statics.getByID = function (paramUserID, paramCallback){
this.findById(paramUserID, paramCallback);   
};

return userSchema;
};