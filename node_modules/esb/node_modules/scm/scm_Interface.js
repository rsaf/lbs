/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var UserSchema = null;
var GroupSchema = null;
var User = null;
var Group = null;
var mongoose = null;

var Q = require('q');
var message = null;

function init(m) {
    if (!(m.pl.fn instanceof Function)) {
        return Q.fail({pl: null, er: {em: 'Payload pl is not a function'}});
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    return message({
        op: 'dependency',
        pl: {dn: 'mongoose'}
    }).then(function (r1) {
        //console.log(r1);
        mongoose = r1.pl.fn;
        console.log('\nscm: scm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        UserSchema = require("./models/User.js")(mongoose);
        GroupSchema = require("./models/Group.js")(mongoose);
        User = mongoose.model('users', UserSchema); //exposes static methods
        Group = mongoose.model('groups', GroupSchema); //exposes static methods

        var r = {pl: {pm: 'scm initialization done! '}, er: null};
        return Q(r);
    });

}


passport.use(new LocalStrategy(function (paramUsername, paramPassword, paramCallback) {
    //console.log(paramUsername + " " + paramPassword);
    User.login(paramUsername, paramPassword, paramCallback);
}));

passport.serializeUser(function (paramUser, paramNext) {
    console.log("Serializing " + paramUser.id);
    paramNext(null, paramUser.id);
});

passport.deserializeUser(function (paramID, paramNext) {
    console.log("Deserializing " + paramID);

    User.getByID(paramID, function (paramError, paramUser) {
        if (paramError) {
            paramNext(paramError, null);
        }
        else if (paramUser) {
            paramNext(null, paramUser);
        }
    });
});

//=======================================PUBLIC INTERFACE =========================================//
function getPassport(m) {
    var r = {"pl": null, "er": null};
    r.pl = {fn: passport};
    return Q(r);
}

function getRegisterUser(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function registerUser() {
        return function registerNewUser(paramRequest, paramResponse) {

            var userType = paramRequest.body.userType;
            var loginName = paramRequest.body.loginName;
            var password = paramRequest.body.password;
            var r2 = {pl: null, er: null};
            paramRequest.logout();
            console.log('Registering userType:' + userType + '  LoginName:' + loginName + ' password:' + password);
            if (userType && loginName && password) {
                var oUser = new User(); //exposes instance methods
                oUser.register(loginName, password, userType, function (paramError, paramUser) {
                    if (paramError) {
                        r2.er = {ec: 8404, em: paramError}; //error message
                    }
                    else if (paramUser) {
                        paramRequest.logIn(paramUser, function (parameterError) {
                            console.log(paramUser);
                            console.log(parameterError);
                            if (parameterError) {
                                r2.er = {ec: 8404, em: parameterError}; //error message
                            }
                            else {
                                r2.pl = {
                                    status: true,
                                    userType: paramUser.userType,
                                    loginName: paramUser.lanzheng.loginName,
                                    loginCount: paramUser.lanzheng.loginCount,
                                    organization: null
                                };
                            }
                        });
                    }
                    else {
                        r2.er = {ec: 8404, em: "unknown error during login"}; //error message
                    }
                    paramResponse.writeHead(200, {"Content-Type": "application/json"});
                    paramResponse.end(JSON.stringify(r2));
                    console.log(JSON.stringify(r2));
                });
            }
            else {

                r2.er = {ec: 8404, em: "incorrect user information"}; //error message
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(JSON.stringify(r2));
                console.log(JSON.stringify(r2));
            }
        };
    };
    return Q(r);
}

function getVerifyUserLogin(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function loginUser() {
        return function loginUserCredentials(paramRequest, paramResponse) {
            console.log("Logging in ... " + paramRequest.body.username + " " + paramRequest.body.password);
            //console.log("Captcha... " + paramRequest.body.antiBotValue + " "+ paramRequest.body.user_captcha)
            //var systemCaptcha = paramRequest.body.antiBotValue;
            //var userCaptcha = paramRequest.body.user_captcha;
            var r2 = { pl: null, er: null};
            paramRequest.logout();
            //if (userCaptcha === systemCaptcha ){
            passport.authenticate('local', function (paramError, paramUser) {
                if (paramUser) {
                    paramRequest.logIn(paramUser, function (parameterError) {
                        if (parameterError) {
                            r2.er = {ec: 8404, em: parameterError};
                        }
                        else {
                            r2.pl = {
                                status: true,
                                userType: paramUser.userType,
                                loginName: paramUser.lanzheng.loginName,
                                loginCount: paramUser.lanzheng.loginCount,
                                organization: null
                            };
                        }
                    });
                }
                else if (paramError) {
                    r2.er = {ec: 8404, em:paramError};
                }
                else {
                    r2.er = {ec: 8404, em:"unknown error during login"};
                }
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
                paramResponse.end(JSON.stringify(r2));
                console.log(JSON.stringify(r2));
            })(paramRequest, paramResponse);
            //};
        };
    };
    return Q(r);
}


function getSessionUser(m) {
    var r = {
        pl: {fn: null},
        er: {ec: null, em: null}
    };
    r.pl.fn = function sessionUser() {
        return function getSessionUzer(paramRequest, paramResponse) {
            var r2 = {pl: null, er: null};
            if (paramRequest.isAuthenticated()) {
                //console.log(paramRequest.user);
                r2.pl = {
                    status: true,
                    userType: paramRequest.user.userType,
                    loginName: paramRequest.user.lanzheng.loginName,
                    loginCount: paramRequest.user.lanzheng.loginCount,
                    organization: null
                };
                paramResponse.writeHead(200, {"Content-Type": "application/json"});
            }
            else {
                r2.er = {ec: 8404, em: 'user not found'};
                paramResponse.writeHead(404, {"Content-Type": "application/json"});
            }
            paramResponse.end(JSON.stringify(r2));
            console.log(JSON.stringify(r2));
        };
    };
    return Q(r);
}


function getLogoutUser(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function logoutUser() {
        return function getLogoutUzer(paramRequest, paramResponse) {
            var r2 = {
                pl: {loginOut: true},
                er: null
            };

            paramRequest.logout();
            paramResponse.writeHead(200, {"Content-Type": "application/json"});
            paramResponse.end(JSON.stringify(r2));
            console.log(JSON.stringify(r2));
        };
    };
    return Q(r);
}


function getUserIsAuthorizedChecker(m) {
    var r = {
        pl: {fn: null},
        er: null
    };
    r.pl.fn = function verifyAuthen() {
        return function verifyAuthenticatedSessions(paramRequest, paramResponse, paramNext) {
            var r2 = {
                pl: null,
                er: null
            };

            if (!paramRequest.isAuthenticated()) {
                r2.er = {ec: 8401, em: 'user not authorized'};
                paramResponse.writeHead(401, {"Content-Type": "application/json"});
                paramResponse.end(JSON.stringify(r2));
                console.log(JSON.stringify(r2));
                //return paramResponse.redirect('/'); // If user is not login, user will be redirected to the login page..
            }
            else {
                //check for user authorization using redis ...
                //var varUserID = paramRequest.user.id;
                //check if user has access to the requested resources
                console.log('user id: ' + paramRequest.user.id + ' is authorized ...');
                return paramNext();
            }
        };
    };
    return Q(r);
}

exports.operations = [init, getPassport, getVerifyUserLogin, getRegisterUser, getSessionUser, getLogoutUser, getUserIsAuthorizedChecker];

// re-export ops (for testing)
exports.operations.forEach(function (op) {
    exports[op.name] = op;
});
