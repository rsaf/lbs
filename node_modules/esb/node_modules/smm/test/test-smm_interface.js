/*
 * Tests for ../smm_interface
 */
var mongoose = require('mongoose');
var helper = require('./fixtures/helper.js');
var smm;
var q = require('q');
var m = {
  ns: null, op: null
    
  , pl: {
    gn: 'group name',
    userid:"54852b4bada015b113c0df7e",
    description: 'description',
    memberCount: 2,
    serviceCode: 'service code',
    serviceName:'service name',
    serviceType:'54852b4bada015b113c0df7e',
    serviceProvider:'54852b4bada015b113c0df7e',
    price:'10',
    briefOverview:'brief overview'
  }
};
var msp = {//message for servicePoint
  ns: null, op: null
    
  , pl: {
    userid:"54852b4bada015b113c0df7e",
    servicePointCode: 'servicePointCode',
    servicePointName: 'servicePointName',
    servicePointStatus: 'servicePointStatus',
    servicePointAddress: 'servicePointAddress',
    servicePointType:'servicePointType',
    operatingHours:'operatingHours',
    contactPerson:'contactPerson',
    contactPhone:'contactPhone',
    servicePointDescription:'servicePointDescription'
  }
};

exports.setUp=function setUp(callback){
  var cmm = helper.integration.getModule({moduleName:'cmm',message:{pl:function(){}}});
  cmm.promise.then(function(){
    cmm = cmm.mod;
    helper.integration.getModules({
      moduleNames:['../../smm_Interface.js']
      ,messages:[{
          pl:{
            fn:cmm.dependency
          }
          ,ns:'smm'
      }]
    }).then(function(modules){
      smm = modules[0];
      callback();
    },function(){console.log('rejected');}).fail(function(e){console.log('fail:',e);});
  },function(reason){console.log('rejected, reason:',reason);}).fail(function(f){console.log('failed, f is:',f);});
};

exports.tearDown=function tearDown(callback){
  callback();
};

exports.testFailAll = function testFailAll(test){
  //test createService with no message
  smm.createService().then(function(){
    test.strictEqual(1,2,'Calling createService without message is supposed to fail.');
  }).fail(function(reason){
    test.strictEqual(reason.pl,null,'Payload should be null when createService failed');
    test.strictEqual(!reason.er.em,false
      ,'Error should have been set.');
  })
  //test createService with no payload
  .then(function(){
    return smm.createService({});
  }).then(function(){
    createService({});
  }).then(function(m){
    test.strictEqual(1,2,'Calling createService without payload is supposed to fail.');
  }).fail(function(reason){
    test.strictEqual(reason.pl,null,'Payload should be null when createService failed');
    test.strictEqual(!reason.er.em,false
      ,'Error should have been set.');
  })
  //test createService with invalid payload (trigger error in mongoose)
  .then(function(){
    return smm.createService({pl:{}});
  }).then(function(m){
    test.strictEqual(1,2,'Calling createService without payload is supposed to fail.');
  }).fail(function(reason){
    test.strictEqual(reason.pl,null,'Payload should be null when createService failed');
    test.strictEqual(!reason.er.em,false//could be anything for invalid payload
      ,'Error should have been set.');
  })
  .then(function(){//final then to indicate tests are over
    test.done();
  });
}

exports.testCreateService = function testCreateService(test){
//var paramPersonalJsonInput = JSON.parse(JSON.stringify(m));
  smm.createService(m)
    .then(function(r){
      test.expect(8);
      test.notEqual(r,undefined,'Expecting a result.');
      test.notEqual(r.pl,undefined,'Expecting a payload in result.');
//      test.notEqual(r.pl.createdOn,undefined,'Payload should have a createdOn');
//      test.equals(typeof r.pl.createdOn.getTime
//        ,'function','createdOn should be a date (have a getTime function).');
//      test.equals(r.pl.createdOn.getTime()>new Date().getTime()-1000
//        ,true,'createdOn should be no more then one second ago.');
      test.equals(r.pl.er,null,'Payload should not have an error.');
      test.notEqual(r.pl._id,undefined,'Payload should have an _id.');
      test.equals(r.pl.serviceCode,'service code','Payload should have correct value for serviceCode.');
      test.equals(r.pl.serviceName,'service name','Payload should have correct value for serviceName.');
      test.equals(r.pl.price,10,'Payload should have correct value for price.');
      test.equals(r.pl.briefOverview,'brief overview','Payload should have correct value for briefOverview.');
      test.done();
    },function(e){
      console.log('rejected:',e);
      test.done();
    }).fail(function(e){
      console.log('failed:',e);
      test.done();
    });
};
//testCreateService();
exports.testFindServicesByCreator = function testFindServicesByCreator(test){
  var p=[];
  m.pl.description='1';
  p.push(smm.createService(m));
  m.pl.description='2';
  p.push(smm.createService(m));
  m.pl.description='3';
  p.push(smm.createService(m));
  q.all(p).then(function(m){
    return smm.servicesByCreator({pl:{userAccountID:"54852b4bada015b113c0df7e"}});
  }).then(function(r){
    test.strictEqual(r.pl.length>=3,true,'At least 3 records should return.');
    test.strictEqual(r.er,null,'er should be null.');
    test.done();
  }).fail(function(e){
    console.log('!!!!!!Was not intended to fail:',e);
    test.strictEqual(1,2,'This test should not have failed.');
    test.done();
  });
};

exports.testCreateServicePoint = function testCreateService(test){
//var paramPersonalJsonInput = JSON.parse(JSON.stringify(m));
  smm.createServicePoint(msp)
    .then(function(r){
      test.strictEqual(1,1);
      test.done();
      return;
      //@todo: should test values here
      test.expect(13);
      test.notEqual(r,undefined,'Expecting a result.');
      test.notEqual(r.pl,undefined,'Expecting a payload in result.');
//      test.notEqual(r.pl.createdOn,undefined,'Payload should have a createdOn');
//      test.equals(typeof r.pl.createdOn.getTime
//        ,'function','createdOn should be a date (have a getTime function).');
//      test.equals(r.pl.createdOn.getTime()>new Date().getTime()-1000
//        ,true,'createdOn should be no more then one second ago.');
      test.equals(r.pl.er,null,'Payload should not have an error.');
      test.notEqual(r.pl._id,undefined,'Payload should have an _id.');
      test.equals(r.pl.gn,'group name','payload should have correct value for groupName.');
      test.equals(r.pl.description,'description','Payload should have correct value for description');
      test.equals(r.pl.memberCount,2,'Payload should have correct value for membercount.');
      test.equals(r.pl.serviceCode,'service code','Payload should have correct value for serviceCode.');
      test.equals(r.pl.serviceName,'service name','Payload should have correct value for serviceName.');
      test.equals(r.pl.serviceType,'service type','Payload should have correct value for serviceType.');
      test.equals(r.pl.serviceProvider,'service provider','Payload should have correct value for serviceProvider.');
      test.equals(r.pl.price,10,'Payload should have correct value for price.');
      test.equals(r.pl.briefOverview,'brief overview','Payload should have correct value for briefOverview.');
      test.done();
    },function(e){
      console.log('rejected servicepoint:',e);
      test.done();
    }).fail(function(e){
      console.log('failed service point:',e);
      test.done();
    });
};

//testCreateService();
exports.testFindServicePointssByCreator = function testFindServicesByCreator(test){
  var p=[];
  m.pl.description='1';
  p.push(smm.createService(m));
  m.pl.description='2';
  p.push(smm.createService(m));
  m.pl.description='3';
  p.push(smm.createService(m));
  q.all(p).then(function(m){
    return smm.servicesByCreator({pl:{userAccountID:"54852b4bada015b113c0df7e"}});
  }).then(function(r){
    test.strictEqual(r.pl.length>=3,true,'At least 3 records should return.');
    test.strictEqual(r.er,null,'er should be null.');
    test.done();
  }).fail(function(e){
    console.log('!!!!!!Was not intended to fail:',e);
    test.strictEqual(1,2,'This test should not have failed.');
    test.done();
  });
};