/*
 * Interface for:
 *   Service
 *   ServicePoint
 *   BusinessRecord
 * mongooseConfig run with smm
 */
var Q = require('q')
, ServiceSchema = null
, BusinessRecordSchema = null
, Service = null
, BusinessRecord =null;

//inject all dependencies
function init(m) {
    if(!m || !m.pl || !m.pl.fn || (typeof m.pl.fn !== 'function')) {
        return Q.fail({pl:null, er:{ ec: null, em: 'Payload pl is not a function'}});
    }
    return m.pl.fn({
        op: 'dependency'
       ,pl: {dn: 'mongoose'}
       ,pm:''
       ,ns: m.ns
    }).then(function(r){ 
      //error or not, this can never throw an exception. return
      //  a resolved promise and if an error is thrown then use
      //  fail() to return as a correct message 
      var mongoose = r.pl.fn;
      console.log('smm got mongoose ' + mongoose.version + ' db:' + mongoose.connection.name);
      ServiceSchema = require("./models/Service.js")(mongoose);
      ServicePointSchema = require("./models/ServicePoint.js")(mongoose);
      BusinessRecordSchema = require("./models/BusinessRecord.js")(mongoose);
      Service = mongoose.model('services', ServiceSchema);
      ServicePoint = mongoose.model('servicepoints', ServicePointSchema);
      BusinessRecord = mongoose.model('businesses', BusinessRecordSchema);
      return Q({pl: {pm: 'smm initialization done!'}, er: null});
    });
}

exports.init=init;

/**
 * 
 * @param {lbs.smm.service.newMessage} m
 * @returns {Q@call;defer.promise}
 */
function createService(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var service={ct:{},md:{}};
    var deferred = Q.defer();
    //@todo: do not use payload directly, copy values
    //  this way you can add stuff to payload that doesn't
    //  get saved to the page
    service.ct = {
       cuID:m.pl.userid
      ,oID:m.pl.userid//@todo:this should be oID
      ,cd:new Date()
    };
    service.md = {
       uID:m.pl.userid
      ,oID:m.pl.userid//@todo:this should be oID
      ,lu:new Date()
    };
    //service.memberCount= m.pl.memberCount;
    service.servicePoints=m.pl.servicePoints;
    service.serviceCode= m.pl.serviceCode;
    service.serviceName=m.pl.serviceName;
    service.serviceType=m.pl.serviceType;
    service.serviceProvider=m.pl.serviceProvider;
    service.price=m.pl.price;
    service.briefOverview=m.pl.briefOverview;

    Service.create(service,function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw(er);
    }
    throw(e);
  });
}

function servicesByCreator(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var deferred;
    deferred = Q.defer();
    Service.servicesByCreator(m.pl.userAccountID,function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    console.log('error in serviceByCreator:',e);
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw er;
    }
    throw e;    
  });
}

function createServicePoint(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var servicePoint={ct:{},md:{}};
    var deferred = Q.defer();
    //@todo: do not use payload directly, copy values
    //  this way you can add stuff to payload that doesn't
    //  get saved to the page
    servicePoint.ct = {
       cuID:m.pl.userid
      ,oID:m.pl.userid//@todo:this should be oID
      ,cd:new Date()
    };
    servicePoint.md = {
       uID:m.pl.userid
      ,oID:m.pl.userid//@todo:this should be oID
      ,lu:new Date()
    };
    servicePoint.servicePointCode= m.pl.servicePointCode;
    servicePoint.servicePointName= m.pl.servicePointName;
    servicePoint.servicePointStatus= m.pl.servicePointStatus;
    servicePoint.servicePointAddress= m.pl.servicePointAddress;
    servicePoint.servicePointType=m.pl.servicePointType;
    servicePoint.operatingHours=m.pl.operatingHours;
    servicePoint.contactPerson=m.pl.contactPerson;
    servicePoint.contactPhone=m.pl.contactPhone;
    servicePoint.servicePointDescription=m.pl.servicePointDescription;

    ServicePoint.create(servicePoint,function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw(er);
    }
    throw(e);
  });
}

function servicePointsByCreator(m){
  var r ={"pl":null, "er":null}
  ,er=new Error();  
  return Q.fcall(function(){
    var deferred;
    deferred = Q.defer();
    ServicePoint.servicePointsByCreator(m.pl.userAccountID,function(paramError, paramData){
      if(!paramError){
        r.pl = paramData;
        deferred.resolve(r);
      }
      else {
        r.er = {ec:1001,em:paramError.toString()};
        deferred.reject(r);
      }
    });
    return deferred.promise;
  }).fail(function(e){
    if(!e.er){
      er.pl=null;
      er.er = {ec:1001,em:e.message};
      throw er;
    }
    throw e;    
  });
}

operations = [init,createService,createServicePoint,servicePointsByCreator,servicesByCreator];
exports.operations = operations;
//=======================================PUBLIC INTERFACE =========================================//

//re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});