//install the cli(as sudo): npm install -g grunt-cli
// install grunt: npm install grunt --save-dev
var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');
 module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    nodeunit: {
      integration: ['test/test*.js']
      , unit: ['test/unit-test*.js']
    },
    watch: {
      integration: {
        files: ['*.js','test/**/test*.js','models/**/*.js','test/fixtures/*.js'],
        tasks: ['integrationtest']
      }
      , unit: {
        files: ['*.js','test/**/unit-test*.js','models/**/*.js','test/fixtures/**/*.js'],
        tasks: ['unittest']
      }
    }
  });
  grunt.registerTask('dropsmm','Runs the integration tests.',function(){
    var done = this.async();
    MongoClient.connect('mongodb://localhost/smm', function(err, db) {
      if(err){
        throw new Error('Unable to reset database smm please check Gruntfile');
      }
      db.dropDatabase(function(err){
          db.close();
          if(err){
            throw new Error('Unable to reset database smm please check Gruntfile');
          }
          done();
      });
    });    
  });
  grunt.registerTask('tasks','Runs the integration tests.',function(){
    console.log('************List of tasks available.');
    console.log('*');
    console.log('* integrationtest [DEFAULT]');
    console.log('* Runs integration tests and deletes smm database');
    console.log('* Parameter nodrop can cancel dropping smm database.');
    console.log('* Run with command \'grunt\' or \'grunt integrationtest\'');
    console.log('* Parameters:');
    console.log('*   nodrop; when set to any truthy value the mongodb will not');
    console.log('*   be dropped before running tests');
    console.log('*     example: \'grunt integrationtest --nodrop=1\'');
    console.log('*              \'grunt --nodrop=1\'');
    console.log('*');
    console.log('***************************************************************');
    console.log('*');
    console.log('* dropsmm');
    console.log('* Drops smm database.');
    console.log('* Run with command \'grunt dropsmm\'');
    console.log('* Parameters: no parameters');
    console.log('*');
    console.log('***************************************************************');
    console.log('*');
    console.log('* nodeunit:integration');
    console.log('* Runs integration test but does not drop smm database.');
    console.log('* Run with command \'grunt nodeunit\' or \'grunt nodeunit:integration\'');
    console.log('* Parameters: no parameters');
    console.log('*');
    console.log('***************************************************************');
    console.log('*');
    console.log('* nodeunit:unit');
    console.log('* Runs unit test, unit tests mock all other objects so no');
    console.log('* database or other objects are needed.');
    console.log('* Run with command \'grunt nodeunit:unit\'');
    console.log('* Parameters: no parameters');
    console.log('*');
    console.log('***************************************************************');
    console.log('*');
    console.log('* watch');
    console.log('* Watches files specified under watch in Gruntfile.js');
    console.log('* if any file changes i\'ll run task(s) associated with the watch.');
    console.log('* This will continuously run untill you press control + c.');
    console.log('* Run with command \'grunt watch\'');
    console.log('* Parameters: any parameters that can be used in the task(s)');
    console.log('* that run when a file changes associated with the watch.');
    console.log('*');
    console.log('***************************************************************');
    console.log('*');
    console.log('* watchunit');
    console.log('* Watches files specified under watch.unit in Gruntfile.js');
    console.log('* if any file changes i\'ll run unittest.');
    console.log('* This will continuously run untill you press control + c.');
    console.log('* Run with command \'grunt watchunit\'');
    console.log('* Parameters: any parameters that can be used in the task(s)');
    console.log('* that run when a file changes associated with the watch.');
  });
  grunt.registerTask('integrationtest','Runs the integration tests.',function(){
    if(!grunt.option('nodrop')){
      grunt.task.run('dropsmm');
    }
    grunt.task.run('nodeunit:integration');
  });
  grunt.registerTask('unittest','Runs the unit tests.',function(){
    grunt.task.run('nodeunit:unit');
  });
  grunt.registerTask('watchunit','Runs the unit tests continuous.',function(){
      grunt.task.run('watch:unit');
  });
  // Load the plugin that provides the "nodeunit" task.
  grunt.loadNpmTasks('grunt-contrib-nodeunit');
  // Load the plugin that provides the "watch" task.
  grunt.loadNpmTasks('grunt-contrib-watch');
  // Default task(s).
  grunt.registerTask('default', ['integrationtest']);
};