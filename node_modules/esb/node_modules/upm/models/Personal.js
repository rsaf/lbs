/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
module.exports = function (paramMongoose){

//Model Schema ===============================
var personalSchema = paramMongoose.Schema ({
    //_id: {type:paramMongoose.Schema.Types.ObjectId,required:true} // mongodb automatically create this one for us.
    ct: { //creator
        cuID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of the user who created the service
        oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
        cd: {type: Date, required:true}//creation date
    },
    md: {//modified
        uID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//id of user who changed the service
        oID: {type:paramMongoose.Schema.Types.ObjectId,required:true},//organisation id
        lu: {type:Date,required:true}//last updated date
    },

    userAccountID: paramMongoose.Schema.Types.ObjectId, // Profile UserAccountID from User Account ID on User.ID
    lzID: paramMongoose.Schema.Types.ObjectId,
    completion: Number,
    basic:{
    IDCode:  {value: String, verified: Boolean, verifiedDate: Date},
    names: {value: String, verified: Boolean, verifiedDate: Date},
    gender:{value: String, verified: Boolean, verifiedDate: Date},
    birthDay:{value: Date, verified: Boolean, verifiedDate: Date},
    country: {value: String, verified: Boolean, verifiedDate: Date},
    nativeLoc: {value: String, verified: Boolean, verifiedDate: Date},
    currentLoc:  {value: String, verified: Boolean, verifiedDate: Date}
    },
    contact: {
     email1: {value: String, verified: Boolean, verifiedDate: Date},
     email2: {value: String, verified: Boolean, verifiedDate: Date},
     tel1: {value: String, verified: Boolean, verifiedDate: Date},
     tel2: {value: String, verified: Boolean, verifiedDate: Date},
     qq: {value: String, verified: Boolean, verifiedDate: Date},
     weixin: {value: String, verified: Boolean, verifiedDate: Date}
    },
    author: {createdUserID: String, createdOrgID: String, createdDate: String}
});

//Model Declaration ===============================
//var  Personal = mongoose.model('personal',personalSchema); 

//public Methods ===============================
personalSchema.statics.readByUserAccountID = function(paramUserAccountID, paramCallback){
   return this.findOne({userAccountID: paramUserAccountID},paramCallback); //static method
};

personalSchema.methods.deleteByUserAccountID = function(paramUserAccountID, paramCallback){
   return this.findOne({userAccountID:paramUserAccountID},paramCallback);
};

personalSchema.statics.updatePersonalProfile = function(paramPersonalJson, paramCallback ){

var query =  {userAccountID:paramPersonalJson.userAccountID};
var update =  paramPersonalJson;
var options = { new: true };
//console.log(query);
//console.log(update);
//delete update.userAccountID;
//console.log(query);
//console.log(update);

this.findOneAndUpdate(query, update, options, paramCallback);

};

return personalSchema;

};
