/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



'use strict';
var mongoose = null ; //mongoose object
var message = null;   // message function

var PersonalSchema = null;
var CorporateSchema = null;
var Personal = null;
var defaultNavigation = null;

var Q = require('q');

function init(m) {
    var r = {pl: null , er:''};
    if(!(m.pl.fn instanceof Function)) {
        r.er = {ec:null , em: 'Payload pl is not a function'};
        return Q.fail(r);
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
    var p1 = message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    });

    var p2 = message({
        op: 'dependency',
        pl: {dn:'navigation'}
    });
return Q.all([p1,p2]).then(function(r1){
        //console.log(r);
        mongoose = r1[0].pl.fn;
        defaultNavigation = r1[1].pl.fn;

        console.log('\nupm: upm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
         PersonalSchema = require("./models/Personal.js")(mongoose);
         CorporateSchema = require("./models/Corporate.js")(mongoose);
         Personal = mongoose.model('personals', PersonalSchema); //exposes static methods
         var r = {pl: {pm: 'upm initialization done! '}, er: null};
         return Q(r);
    });

}

function createPersonalProfile (m){
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  Personal.create(m.pl, function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;
     deferred.reject(r);
    }
  });
  return deferred.promise;
}

function updatePersonalProfile(m){
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  Personal.updatePersonalProfile(m.pl,function(paramError, paramData){
    if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;
     deferred.reject(r);
    }
  });
  return deferred.promise;
};

function readPersonalProfileByUserID (m){
   var r ={"pl":null, "er":null};
   var deferred = Q.defer();
   Personal.readByUserAccountID(m.pl.userAccountID,function( paramError, paramData ){
 if(!paramError){
      r.pl = paramData;
      deferred.resolve(r);
    }
    else {
      r.er = paramError;
     deferred.reject(r);
    }

   });
   return deferred.promise;
}


function getUserNavigation (m){
    var r ={"pl":null, "er":null};

    if (m.pl.userType === "personal"){
        r.pl = defaultNavigation.personal;
        return Q(r);
    }
    else if (m.pl.userType === "corporate"){
        r.pl = defaultNavigation.corporate;
        return Q(r);
    }
    else if (m.pl.userType === "admin"){
        r.pl = defaultNavigation.admin;
        return Q(r);
    }
}


exports.operations = [init, createPersonalProfile, updatePersonalProfile,readPersonalProfileByUserID, getUserNavigation];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});
