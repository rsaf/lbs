/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//  message format
/*
var m = {
"ns":"olm",
"mv": "1.00"
"op": "readOperationsLog",
"pl": {"userAccountID": "value1", "opType":"value2", "pageNumber":"value3", "pageSize":"value4"}
};

var r = {
   ns:'olm',
  "er":{ec:null, em: null},
   "pl": {},
}
*/

'use strict';
var mongoose = null ; //mongoose object
var message = null;   //message function

var Q = require('q');

var LogSchema = null;
var Log = null;


function init(m) {
    if(!(m.pl.fn instanceof Function)) {
        return Q.fail({pl:null, er:{ ec: null, em: 'Payload pl is not a function'}});
    }

    message = m.pl.fn;
    // the promise for this init is completed once we get mongoose
   return message({
        op: 'dependency',
        pl: {dn:'mongoose'}
    }).then(function(r1){
        //console.log(r1);
    mongoose = r1.pl.fn;
       console.log('\nolm: olm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
        LogSchema = require("./models/log.js")(mongoose);
        Log = mongoose.model('logs', LogSchema); //exposes static methods

        var r = {pl: {pm: 'olm initialization done! '}, er: null};
        return Q(r);
    });

}


function readOperationsLog(m) {
  var r ={"pl":null, "er":null};
  var deferred = Q.defer();
  //paramUserAccountID, paramOpType, paramPageNumber, paramPageSize, paramCallback

  if(m.pl.opType){
     var query = Log.find({userAccountID: m.pl.userAccountID,opType: m.pl.opType}).sort({opDate:-1}).skip((m.pl.pageNumber - 1) * m.pl.pageSize).limit(m.pl.pageSize);
  }
  else {
   var query = Log.find({userAccountID: m.pl.userAccountID}).sort({opDate:-1}).skip((m.pl.pageNumber - 1) * m.pl.pageSize).limit(m.pl.pageSize);
  }
   query.exec(function(paramError, paramData){
     if(!paramError){
       r.pl = paramData;
       deferred.resolve(r);
     }
     else {
       r.er = paramError;
       deferred.reject(r);
     }

   });

return deferred.promise;
}

function readOperationsLogByID(m) {
 var r ={"pl":null, "er":null};
 var deferred = Q.defer();
 Log.findById(m.pl.logID,function(paramError, paramData){
   if(!paramError){
     r.pl = paramData;
     deferred.resolve(r);
   }
   else {
     r.er = paramError;
    deferred.reject(r);
   }
 });
 return deferred.promise;
}

exports.operations = [init,getLogRequest,readOperationsLog, readOperationsLogByID];

// re-export ops (for testing)
exports.operations.forEach(function(op) {
  exports[op.name] = op;
});

//will be use to address the orthogonal concern. Initialized and use directly
function getLogRequest(m){
    var r = {
        pl: {fn:null},
        er: null
    };

    // Initialize the counter
    var counter = 0;
    r.pl.fn = function logger(){
        return function createLogHandler(paramRequest, paramResponse, next) {
        var writeHead = paramResponse.writeHead; // Store the original function
        counter++;
        //Log the incoming request
        //console.log("Request " + counter + " " + paramRequest.method + " " + paramRequest.url);
        //console.log("/n /home/login and url " + paramRequest.url.toString() + " compare : " + (paramRequest.url.toString() == '/home/login') );
        var requestURL = paramRequest.url.toString();
            // Wrap writeHead to hook into the exit path through the layers.
        paramResponse.writeHead = function(code, headers) {
            var varOperationType = null;
            var varOperationName = null;
             switch (requestURL) {
                case '/home/login.json':
                    varOperationType = '授权操作';
                    varOperationName = '登陆';
                    break;
                case '/home/registration.json':
                    varOperationType = '授权操作';
                    varOperationName = '注册';
                    break;
                case '/home/logout.json':
                    varOperationType = '授权操作';
                    varOperationName = '注销';
                    break;
                case '/workspace/finance':
                    varOperationType = '财务操作';
                    varOperationName = '财务';
                    break;

                default:
                    varOperationType = '业务操作';
                    varOperationName = '业务';
            }
            var varUserAccountID = null;
            //console.log('logging request for you user..' + paramRequest.user.id);
            if (paramRequest.user) {
                varUserAccountID = paramRequest.user.id;
            }
            else {
                varUserAccountID = '000000000000000000000002'; // for guest users
            }
            var paramLogJson = {
                userAccountID: varUserAccountID,
                opType: varOperationType,
                opMethod: paramRequest.method,
                opName: varOperationName,
                opDate: new Date().toLocaleString(),
                srcIP: paramRequest.connection.remoteAddress,
                srcURI:requestURL,
                detail: JSON.stringify(headers),
                status: paramResponse.statusCode
            };
            paramResponse.writeHead = writeHead; // Put the original back
            // Log the outgoing response
            //console.log("Response " + counter + " " + code + " " + JSON.stringify(headers));
            paramResponse.writeHead(code, headers); // Call the original
            Log.create(paramLogJson, function(parammError, parammLogJson) {
                //console.log('log created: ' + parammLogJson.toString());
            });
        };
        //Pass through to the next layer
        next();
    }
    };
    return Q(r);
}
