/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

exports.version ="1.0.0";
 
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
 
var config = require('./config.js');
var mongoose = config.mongoose();

var UserSchema = require("./models/User.js")(mongoose);
var GroupSchema = require("./models/Group.js")(mongoose);

var User = mongoose.model('users', UserSchema); //exposes static methods
var oUser = new User(); //exposes instance methods

var Group = mongoose.model('groups', GroupSchema); //exposes static methods
var oGroup = new Group(); //exposes instance methods

passport.use(new LocalStrategy(function(paramUsername, paramPassword, paramCallback){
     User.login(paramUsername, paramPassword, paramCallback); 
 })); 
 
passport.serializeUser(function(paramUser, paramNext) {
     console.log("Serializing " + paramUser.id);
    paramNext(null, paramUser.id);
});

passport.deserializeUser(function(paramID, paramNext) {
    console.log("Deserializing " + paramID);
            User.getByID(paramID, function(paramError,paramUser){
                if(paramError) 
                {
                    paramNext(paramError);
                }
                else if (paramUser) {
                    paramNext(null,paramUser);
                }  
            });
 });

//=======================================PUBLIC INTERFACE =========================================//
module.exports.initiat = function (paramAppService){ 
 paramAppService.use(passport.initialize());
 paramAppService.use(passport.session()); 
 };

module.exports.registerUser = function(paramRequest, paramResponse){
 var userType   = paramRequest.body.userType;
 var loginName  = paramRequest.body.loginName;
 var password   = paramRequest.body.password;
 var returnJson = null;
 
 console.log('userType:' + userType + '  LoginName:' + loginName + ' password:' + password );
 
 oUser.register(loginName,password,userType, function(paramError, paramUser){
     if(paramError){
     console.log(' error occur ' + paramError);
     returnJson = {"status": false, "type": null,"loginCount": paramUser.null };
     }
     else if(paramUser){ 
     paramRequest.logIn(paramUser, function(parameterError) {
             if(parameterError){
              console.log("Error in login " + parameterError);
              returnJson = {"status": false, "type": null,"loginCount": null};        
              }
              else {
              returnJson = {"status": paramUser.loginStatus, "type": paramUser.userType,"loginCount": paramUser.lanzheng.loginCount };
              }
     });
      }
      else {
           returnJson = {"status": false, "type": null,"loginCount": null };
           console.log("unknown error during login");
      }
    paramResponse.writeHead(200,{"Content-Type":"application/json"});												
    paramResponse.end(JSON.stringify(returnJson));
 });
};

module.exports.loginUser = function(paramRequest, paramResponse){
 var loginName = paramRequest.body.username;
 var password = paramRequest.body.password;
 var systemCaptcha = paramRequest.body.antiBotValue;
 var userCaptcha = paramRequest.body.user_captcha;
 var returnJson = null;
 if (userCaptcha === systemCaptcha ){ 
    passport.authenticate('local', function(paramError, paramUser){
         if(paramUser){
          paramRequest.logIn(paramUser, function(parameterError) {
              if(parameterError){
              console.log("Error in logIn " + parameterError);
              returnJson = {"status": false, "type": null,"loginCount": null};        
              }
              else {
              returnJson = {"status": paramUser.loginStatus, "type": paramUser.userType,"loginCount": paramUser.lanzheng.loginCount };
              }
          });
         }
         else if (paramError){
             returnJson = {"status": false, "type": null,"loginCount": null };
             console.log(" Error in passport authentication " + paramError);
         }
         else {
           returnJson = {"status": false, "type": null,"loginCount": null };
           console.log("unknown error during login");
         }
        paramResponse.writeHead(200,{"Content-Type":"application/json"});
        paramResponse.end(JSON.stringify(returnJson));  
     })(paramRequest, paramResponse);
 };
};

module.exports.userIsAuthorized = function(paramRequest, paramResponse, paramNext){
    if (paramRequest.isAuthenticated()) {
         //var varUserID = paramRequest.user.id;
         //check if user has access to the requested resources 
         paramNext();
         console.log('user is authorized ...');
     }     
    else {
        paramResponse.redirect('/'); // If user is not loginned, user will be redirected to the login page.. 
    }
};
