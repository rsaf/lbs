
// Security Management API Module


exports.version ="1.0.0";

 var db = require("./config/database.js");
 var userModel = require("./models/userModel.js");

function authenticator(){
    this.isLoggedIn = function(paramRequest, paramResponse){ 
        responseMessage(paramResponse, "This user is already logged in ");
        return true;   
    };
    
    this.loginUser = function(paramRequest, paramResponse){ 
        console.log("login user function called");
          //var loginName = paramRequest.loginName;
          //var password = paramRequest.password;

          var loginName = "leo@lbs.com";
          var password = "123456";
          
      db.init(function(paramError, paramResult){
            if(!paramError){
            db.users.find({'local.loginName': loginName}).toArray(function(paramError, paramResults){
            if(!paramError) {
            if(!paramResults){
            console.log(paramResults);
            var oUser = paramResults;
            console.log(paramResults);
            if(oUser.validPassword(password)){
            //save user into session and do redirect 
            paramResponse.redirect("/" + oUser.local.userType + "/home");
            }
            else {
             //
            }
            };
            };
         });   
    };
    });
};
    
    this.registerUser = function (paramRequest, paramResponse){
          var userType = paramRequest.body.userType;
          var loginName = paramRequest.body.loginName;
          var password = paramRequest.body.password;

          //var userType = "personal";
          //var loginName = "leo@lbs.com";
          //var password = "123456";
          
         db.init(function(paramError, paramResult){
            if(!paramError){
              oUser = new userModel();
              oUser.local.userType = userType;
              oUser.local.blueCardGUID = loginName;
              oUser.local.loginName = loginName;
              oUser.local.hashPassword =  oUser.generateHash(password);
              console.log("\n\n creating user in db .... ");
              db.users.insert(JSON.parse(JSON.stringify(oUser)), { w:1, safe:true}, function(paramError, paramResults){
               // save user into session object and do redirect
               if(!paramError){
               paramResponse.redirect("/" + paramResults[0].local.userType + "/home");
               };
              });
            }
           else {   
            console.error("FATAL ERROR ON START UP OF DATA STORAGE \n");
            console.error(paramError + "\n\n");
           }
         });      
    };
}


exports.createAuthenticator = function(){
     return new authenticator();
};

function  accessController(){
     this.isAuthorized = function (paramRequest, paramResponse){
     var oAuthenticator = new authenticator();
     if (oAuthenticator.isLoggedIn(paramRequest, paramResponse))
     {
     responseMessage(paramResponse, "User is authorized");
     return true;  
     }     
    };
};

exports.createAccessController = function(){
    return new accessController();
};

var responseMessage = function(paramResponse, paramMessage){

        console.log(paramMessage + "\n\n");
        
        var varBody = paramMessage + " \n \n";
        
        var varContentLength = varBody.length;
        
        paramResponse.writeHead(200, {
        	'Content-Length': varContentLength,
        	'Content-Type': 'text/plain'
        });
        paramResponse.end(varBody);
};



