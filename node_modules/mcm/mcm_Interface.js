/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//  message format
/*
 var m = {
 "ns":"olm",
 "mv": "1.00"
 "op": "readOperationsLog",
 "pl": {"userAccountID": "value1", "opType":"value2", "pageNumber":"value3", "pageSize":"value4"}
 };

 var r = {
 "er":"value",
 "pl": "value"
 }
 */

'use strict';
var mongoose = null ; //mongoose object
var smtp = null;      //smtp object
var message = null;   // esb message function

var EmailSchema = null;
var Email = null;

var Q = require('q');

function init(m) {
    var r = {pl: null , er:null};
  if(!(m.pl.fn instanceof Function)) {
      r.er = {ec: '' , em: 'Payload pl is not a function'};
    return Q.fail(r);
  }

  message = m.pl.fn;
  // the promise for this init is completed once we get mongoose
  var p1 = message({
    op: 'dependency',
    pl: {dn: 'mongoose'}
  });


  var p2 = message({
    op: 'dependency',
    pl: {dn: 'smtp' }
  });

 return Q.all([p1, p2]).then(function(r1){
   // console.log(r1);
    if(!(r1[0].pl.fn instanceof Object)){
        r.er = {ec: '005' , em: 'Payload r[0].pl.fn not an object '};
        return Q.fail(r);
    }
    else {
        mongoose = r1[0].pl.fn;
        console.log('\nmdm: mdm has received mongodb dependency: ' + mongoose.connection.name + ' with readyState: ' + mongoose.connection.readyState);
    }
    if(!(r1[1].pl.fn instanceof Object)){
        r.er = {ec: '006' , em: 'Payload r[1].pl.fn not an object '};
        return Q.fail(r);
    }
    else {
         smtp  = r1[1].pl.fn;
        console.log('mdm: mdm has received smtp dependency ...');
    }

    EmailSchema = require("./models/Email.js")(mongoose,smtp);
    Email = mongoose.model('emails', EmailSchema); //exposes static methods

    r.pl  = {pm: 'mdm initialization done!'};
    return Q(r);

  });

}

function instantiate(m) {
    var r =  {pl:null, er:null};
    if(m.pl.dn === 'smtp') {
        var smtpService = require('./services/smtpService.js');
        console.log('mdm: mdm self instantiating smtp with configurations from cmm ...');
        r.pl=  {fn: smtpService.smtpTransporter(m.pl.dc)};
        return Q(r);
    } else {
        r.er ={ec: null, em:'do not know how to instantiate ' + m.pl.dn};
        return Q.fail(r);
    }
}

exports.operations = [init,instantiate];
exports.operations.forEach(function(op) {
    exports[op.name] = op;
});

